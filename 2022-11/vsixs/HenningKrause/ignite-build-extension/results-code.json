{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "javascript/InsecureCipherNoIntegrity",
              "name": "InsecureCipherNoIntegrity",
              "shortDescription": {
                "text": "Use of a Broken or Risky Cryptographic Algorithm"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n### Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/LiskHQ/lisk-sdk/commit/449cdeccc265272a04c51ac8ca724ff96a0aa783?diff=split#diff-99fd5e0e64f4951b94b5d68d25e95a87L104",
                    "lines": [
                      {
                        "line": "const iv = crypto.randomBytes(16);",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "const passwordHash = hash(password, 'utf8');",
                        "lineNumber": 102,
                        "lineChange": "none"
                      },
                      {
                        "line": "const cipher = crypto.createCipheriv('aes-256-cbc', passwordHash, iv);",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const cipher = crypto.createCipheriv('aes-256-gcm', passwordHash, iv);",
                        "lineNumber": 103,
                        "lineChange": "added"
                      },
                      {
                        "line": "const firstBlock = cipher.update(plainText, 'utf8');",
                        "lineNumber": 104,
                        "lineChange": "none"
                      },
                      {
                        "line": "const encrypted = Buffer.concat([firstBlock, cipher.final()]);",
                        "lineNumber": 105,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/rate-engineering/rate3-monorepo/commit/eeebe3c4ba10bbbaaa439943195f1b7c8b5e3b82?diff=split#diff-8d78c1de2f3473b830c5024c30c5bf23L307",
                    "lines": [
                      {
                        "line": "// (other modes include: CBC, ECB, CFB, OFB, CTR)",
                        "lineNumber": 304,
                        "lineChange": "none"
                      },
                      {
                        "line": " // Note: CBC and ECB modes use PKCS#7 padding as default",
                        "lineNumber": 305,
                        "lineChange": "none"
                      },
                      {
                        "line": " const cipher = forge.cipher.createCipher('AES-GCM', key);",
                        "lineNumber": 306,
                        "lineChange": "none"
                      },
                      {
                        "line": " cipher.start({ iv: this.iv });",
                        "lineNumber": 307,
                        "lineChange": "none"
                      },
                      {
                        "line": "const key = buffer.getBytes(keySize);",
                        "lineNumber": 358,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const iv = buffer.getBytes(ivSize);",
                        "lineNumber": 359,
                        "lineChange": "removed"
                      },
                      {
                        "line": "const cipher = forge.cipher.createCipher('AES-CBC', key);",
                        "lineNumber": 360,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.start({ iv });",
                        "lineNumber": 361,
                        "lineChange": "removed"
                      },
                      {
                        "line": "cipher.update(forge.util.createBuffer(account.getPrivateKey(), 'binary'));",
                        "lineNumber": 362,
                        "lineChange": "removed"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/discourse/discourse-encrypt/commit/134702390b87b7e8b5b88d895df5ddf3636b3ca2?diff=split#diff-5df607ba4c506dd08a2a7ad84b32dd5dL26",
                    "lines": [
                      {
                        "line": " */",
                        "lineNumber": 23,
                        "lineChange": "none"
                      },
                      {
                        "line": "export function generateKeyPair() {",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return window.crypto.subtle",
                        "lineNumber": 25,
                        "lineChange": "none"
                      },
                      {
                        "line": "    .generateKey(",
                        "lineNumber": 26,
                        "lineChange": "none"
                      },
                      {
                        "line": "      {",
                        "lineNumber": 27,
                        "lineChange": "none"
                      },
                      {
                        "line": " */",
                        "lineNumber": 193,
                        "lineChange": "none"
                      },
                      {
                        "line": "export function generateKey() {",
                        "lineNumber": 194,
                        "lineChange": "none"
                      },
                      {
                        "line": "  return window.crypto.subtle.generateKey(",
                        "lineNumber": 195,
                        "lineChange": "none"
                      },
                      {
                        "line": "    { name: \"AES-CBC\", length: 256 },",
                        "lineNumber": 196,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    { name: \"AES-GCM\", length: 256 },",
                        "lineNumber": 196,
                        "lineChange": "added"
                      },
                      {
                        "line": "    true,",
                        "lineNumber": 197,
                        "lineChange": "none"
                      },
                      {
                        "line": "    [\"encrypt\", \"decrypt\"]",
                        "lineNumber": 198,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "* Added test harness and adjusted crypto functions",
                  "* Fix for decrypting session data",
                  "* Initial change to AES-GCM decryption."
                ],
                "precision": "very-high",
                "repoDatasetSize": 55,
                "cwe": [
                  "CWE-327"
                ]
              }
            },
            {
              "id": "javascript/InsecureHash",
              "name": "InsecureHash",
              "shortDescription": {
                "text": "Use of Password Hash With Insufficient Computational Effort"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nSensitive information should never be stored in plain text, since this makes it very easy for unauthorized users, whether malicious insiders or outside attackers, to access. Hashing methods are used to make stored passwords and other sensitive data unreadable to users. For example, when a password is defined for the first time, it is hashed and then stored. The next time that user attempts to log on, the password they enter is hashed following the same procedure and compared with the stored value. In this way, the original password never needs to be stored in the system.\n\nHashing is a one-way scheme, meaning a hashed password cannot be reverse engineered. However, if an outdated or custom programmed hashing scheme is used, it becomes simple for an attacker with powerful modern computing power to gain access to the hashes used. This opens up access to all stored password information, leading to breached security. Therefore, it is essential for developers to understand modern, secure password hashing techniques.\n\n### Best practices for prevention\n* Use strong standard algorithms for hashing rather than simpler but outdated methods or DIY hashing schemes, which may have inherent weaknesses.\n* Use modular design for all code dealing with hashing so it can be swapped out as security standards change over time.\n* Use salting in combination with hashing (While this places more demands on resources, it is an essential step for tighter security.).\n* Implement zero-trust architecture to ensure that access to password data is granted only for legitimate business purposes.\n* Increase developer awareness of current standards in data security and cryptography.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/feup-infolab/dendro/commit/af4689bf0d26af0607567c46922251ac07922dea?diff=split#diff-3ee957c630ef81dd1016237f56c05e070eff7d84460f45ae3c25ab0441fa79b9L25",
                    "lines": [
                      {
                        "line": "var crypto = require('crypto'),",
                        "lineNumber": 24,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    shasum = crypto.createHash('sha1');",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "shasum.update(req.body.password);",
                        "lineNumber": 27,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var encodedPassword = shasum.digest('hex');",
                        "lineNumber": 28,
                        "lineChange": "removed"
                      },
                      {
                        "line": "var crypto = require('crypto');",
                        "lineNumber": 24,
                        "lineChange": "added"
                      },
                      {
                        "line": "const key = crypto.pbkdf2Sync(req.body.password, user.ddr.salt, 100000, 512, 'sha512');",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "var encodedPassword = key.toString('hex');",
                        "lineNumber": 26,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/coderaiser/cloudcmd/commit/1c3a97fbad9c22f94000e89384321642affbf80d?diff=split#diff-0502e5ba15e6b2caa99bf88e97eb4fef9994e885299ee3df4efd1b51a59e13f0L104",
                    "lines": [
                      {
                        "line": "sha     = crypto.createHash('sha1');",
                        "lineNumber": 103,
                        "lineChange": "removed"
                      },
                      {
                        "line": "sha     = crypto.createHash('sha512WithRSAEncryption');",
                        "lineNumber": 103,
                        "lineChange": "added"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Swizec/node-unshortener/commit/e9a84efd37b3d65ff14f44e11297b28b8987d38e?diff=split#diff-d94bcce9e1b6dc29137c2d0fe590e001ef186ba13f7ed1322296e70e7e0196b8L75",
                    "lines": [
                      {
                        "line": "memclient.set( md5(url.href), JSON.stringify(result), 1000);",
                        "lineNumber": 74,
                        "lineChange": "removed"
                      },
                      {
                        "line": "memclient.set( hash.sha256(url.href), JSON.stringify(result), 1000);",
                        "lineNumber": 74,
                        "lineChange": "added"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "switch to sha256",
                  "Files are now hashed with SHA512 instead of SHA1"
                ],
                "precision": "very-high",
                "repoDatasetSize": 101,
                "cwe": [
                  "CWE-916"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "javascript/InsecureCipherNoIntegrity",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Counter mode (used in createCipher) does not provide integrity. Consider using  Galois/Counter mode.",
            "markdown": "{0} mode (used in {1}) does not provide integrity. Consider using  Galois/Counter mode.",
            "arguments": [
              "[Counter](0)",
              "[createCipher](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "igniteTask/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2552,
                  "endLine": 2552,
                  "startColumn": 22,
                  "endColumn": 40
                }
              }
            }
          ],
          "fingerprints": {
            "0": "692ebab6f28fd42b8646e0ec714172900ba62c74fa1ac689b72f08de83635666",
            "1": "1064501f.4773f344.191eaf2b.d7919eeb.ef9f7d82.8020cfdf.1e2b9372.71520ffe.1064501f.4773f344.191eaf2b.d7919eeb.ef9f7d82.8020cfdf.1e2b9372.71520ffe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2552,
                            "endLine": 2552,
                            "startColumn": 42,
                            "endColumn": 54
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 2552,
                            "endLine": 2552,
                            "startColumn": 22,
                            "endColumn": 40
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/InsecureCipherNoIntegrity",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Counter mode (used in createCipheriv) does not provide integrity. Consider using  Galois/Counter mode.",
            "markdown": "{0} mode (used in {1}) does not provide integrity. Consider using  Galois/Counter mode.",
            "arguments": [
              "[Counter](0)",
              "[createCipheriv](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "igniteTask/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8234,
                  "endLine": 8234,
                  "startColumn": 22,
                  "endColumn": 42
                }
              }
            }
          ],
          "fingerprints": {
            "0": "6a92f8638acec3e40d93f918db2cb288c4324f5001da76d824c60222e74c70c7",
            "1": "37bc1bfe.4bbe55b4.191eaf2b.8f3c2a81.ef9f7d82.8020cfdf.7a8c7288.71520ffe.37bc1bfe.4bbe55b4.191eaf2b.8f3c2a81.ef9f7d82.8020cfdf.cd61fc56.71520ffe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8203,
                            "endLine": 8203,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8234,
                            "endLine": 8234,
                            "startColumn": 22,
                            "endColumn": 42
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/InsecureCipherNoIntegrity",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Counter mode (used in createDecipheriv) does not provide integrity. Consider using  Galois/Counter mode.",
            "markdown": "{0} mode (used in {1}) does not provide integrity. Consider using  Galois/Counter mode.",
            "arguments": [
              "[Counter](0)",
              "[createDecipheriv](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "igniteTask/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 8249,
                  "endLine": 8249,
                  "startColumn": 28,
                  "endColumn": 50
                }
              }
            }
          ],
          "fingerprints": {
            "0": "78f55eafa12f2b02193b60d6e42238eec79cf0cba4c4cfd9547038779eca2acb",
            "1": "37bc1bfe.4773f344.191eaf2b.d7919eeb.ef9f7d82.ae30f3cc.7a8c7288.71520ffe.37bc1bfe.4773f344.191eaf2b.d7919eeb.ef9f7d82.ae30f3cc.cd61fc56.71520ffe"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8203,
                            "endLine": 8203,
                            "startColumn": 17,
                            "endColumn": 29
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 8249,
                            "endLine": 8249,
                            "startColumn": 28,
                            "endColumn": 50
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 555,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/InsecureHash",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "md5 hash (used in createHash) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "markdown": "{0} hash (used in {1}) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "arguments": [
              "[md5](0)",
              "[createHash](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "igniteTask/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11510,
                  "endLine": 11510,
                  "startColumn": 10,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "cff2bec2041797d26873f1959a81bdf3a2df40a7b5287350c3decf3b1d0388fc",
            "1": "f67c396a.4773f344.607187b5.d9da6552.ef9f7d82.82ca542b.8e20dc8b.5615f1ee.f67c396a.4773f344.607187b5.d9da6552.ef9f7d82.82ca542b.8e20dc8b.5615f1ee"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11510,
                            "endLine": 11510,
                            "startColumn": 47,
                            "endColumn": 51
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11510,
                            "endLine": 11510,
                            "startColumn": 10,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/InsecureHash",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "sha1 hash (used in createHash) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "markdown": "{0} hash (used in {1}) is insecure. Consider changing it to a secure hashing algorithm (e.g. SHA256).",
            "arguments": [
              "[sha1](0)",
              "[createHash](1)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "igniteTask/index.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 11559,
                  "endLine": 11559,
                  "startColumn": 10,
                  "endColumn": 45
                }
              }
            }
          ],
          "fingerprints": {
            "0": "af45fe650d07911a9f9a2bdc6f782274b5461e0ca67d04129336f5c64c1f4058",
            "1": "f67c396a.4773f344.607187b5.d9da6552.ef9f7d82.82ca542b.8e20dc8b.5615f1ee.f67c396a.4773f344.607187b5.d9da6552.ef9f7d82.82ca542b.8e20dc8b.5615f1ee"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11559,
                            "endLine": 11559,
                            "startColumn": 47,
                            "endColumn": 52
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "igniteTask/index.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 11559,
                            "endLine": 11559,
                            "startColumn": 10,
                            "endColumn": 45
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 554,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "multipleOccurrence"
              },
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 1,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 1,
            "isSupported": true,
            "lang": "JavaScript"
          }
        ]
      }
    }
  ]
}
