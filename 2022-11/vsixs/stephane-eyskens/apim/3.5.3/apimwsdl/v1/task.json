{
  "id": "9bfd810a-5e2b-4871-95d8-ae6e677d4224",
  "name": "apimwsdl",
  "friendlyName": "API Management - Create or Update API from WSDL",
  "description": "API Management - Create or update API from WSDL",
  "author": "Stephane Eyskens",
  "helpMarkDown": "API Management - Create/Update API from WSDL",
  "category": "Utility",
  "visibility": [
    "Release"
  ],
  "demands": [],
  "version": {
    "Major": "1",
    "Minor": "0",
    "Patch": "2"
  },
  "minimumAgentVersion": "1.95.0",
  "instanceNameFormat": "API Management - Create/Update API from WSDL $(message)",
  "inputs": [
    {
      "name": "ConnectedServiceNameARM",
      "type": "connectedService:AzureRM",
      "label": "Azure Subscription",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "Azure Resource Manager subscription to configure before running PowerShell"

    },
    {
      "name": "ResourceGroupName",
      "label": "Resource Group",
      "type": "pickList",
      "required": true,
      "helpMarkDown": "Select resource group which contains the API portal",
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "name": "ApiPortalName",
      "type": "pickList",
      "label": "API Portal",
      "required": true,
      "helpMarkDown": "The API Portal you want to deploy against",
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "name": "UseProductCreatedByPreviousTask",
      "type": "boolean",
      "label": "Product created by previous task",
      "helpMarkDown": "Make sure the task that creates/updates the product is not disabled and that it is executed by the same agent."
    },
    {
      "name": "product1",
      "type": "pickList",
      "label": "Product",
      "required": false,
      "helpMarkDown": "Product you want to add the API to.",
      "properties": {
        "EditableOptions": "True"
      },
      "visibleRule": "UseProductCreatedByPreviousTask=false"
    },
    {
      "name": "soapApiType",
      "type": "pickList",
      "label": "Type of Api to create",
      "required": true,
      "helpMarkDown": "Type of Api to create.",
      "defaultValue": "soap",
      "options": {
        "soap":"SOAP pass-through API",
        "http": "SOAP to REST API"
      },
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "name": "wsdllocation",
      "type": "string",
      "label": "WSDL Location URL",
      "required": true,
      "helpMarkDown": "Make sure the URL is connectable from the build servers",
      "defaultValue": ""
    },
    {
      "name": "wsdlServiceName",
      "type": "string",
      "label": "Service Name",
      "required": true,
      "helpMarkDown": "Name of the service as described in the WSDL",
      "defaultValue": ""
    },
    {
      "name": "wsdlEndpointName",
      "type": "string",
      "label": "Service Endpoint",
      "required": true,
      "helpMarkDown": "Name of endpoint(port) to import from WSDL.",
      "defaultValue": ""
    },
    {
      "name": "targetapi",
      "type": "string",
      "label": "API Name",
      "required": true,
      "helpMarkDown": "New or existing API"
    },
    {
      "name": "Description",
      "type": "multiLine",
      "label": "Description",
      "helpMarkDown": "Description appearing to subscribers",
      "required": true
    },
    {
      "name": "pathapi",
      "type": "string",
      "label": "API URL suffix",
      "required": true,
      "helpMarkDown": "API URL suffix"
    },
    {
      "name": "TemplateSelector",
      "type": "pickList",
      "label": "Start from Policy Template",
      "required": false,
      "helpMarkDown": "Optionally choose a starting policy template to apply to the API",
      "defaultValue": "None",
      "options": {
        "None": "None",
        "CacheLookup": "Cache lookup",
        "CORS": "CORS",
        "Custom": "Custom",
        "Basic": "Basic",
        "JWT": "JWT",
        "IP": "IP",
        "RateByKey": "RateByKey",
        "QuotaByKey": "QuotaByKey",
        "HeaderCheck": "HeaderCheck"
      },
      "properties": {
        "EditableOptions": "True"
      }
    },
    {
      "name": "None",
      "type": "multiLine",
      "label": "None",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "helpMarkDown": "",
      "visibleRule": "TemplateSelector = NAN"
    },
    {
      "name": "Custom",
      "type": "multiline",
      "label": "None",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "helpMarkDown": "",
      "visibleRule": "TemplateSelector = Custom"
    },
    {
      "name": "CacheLookup",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t\t<cache-lookup vary-by-developer='false' vary-by-developer-groups='false'>\n\t\t\t\t<vary-by-header>Accept</vary-by-header>\n\t\t\t\t<vary-by-header>Accept-Charset</vary-by-header>\n\t\t\t</cache-lookup>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default Cache Lookup Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = CacheLookup"
    },
    {
      "name": "Basic",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<authentication-basic username='username' password='password' />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default Basic Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = Basic"
    },
    {
      "name": "CORS",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<cors>\n\t\t\t<allowed-origins><origin>*</origin></allowed-origins>\n\t\t\t<allowed-methods><method>*</method></allowed-methods>\n\t\t\t<allowed-headers><header>*</header></allowed-headers>\n\t\t</cors>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default CORS Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = CORS"
    },
    {
      "name": "JWT",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<validate-jwt header-name='Insert HTTP Header Name here' failed-validation-httpcode='401' failed-validation-error-message='Unauthorized'>\n\t\t\t<issuer-signing-keys><key>Base64 Encoded Key 1</key>\n\t\t\t</issuer-signing-keys>\n\t\t\t<audiences><audience>Audience 1</audience>\n\t\t\t</audiences>\n\t\t<issuers>\n\t\t\t<issuer>Issuer 1</issuer>\n\t\t</issuers>\n\t\t<required-claims><claim name='claim1' match='all'><value>value1</value><value>value2</value></claim>\n\t\t\t</required-claims>\n\t\t</validate-jwt>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default JWT validation Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = JWT"
    },
    {
      "name": "IP",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<ip-filter action='allow | forbid'>\n\t\t\t<address>address</address>\n\t\t\t<address-range from='address' to='address' />\n\t\t</ip-filter>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default IP Filtering Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = IP"
    },
    {
      "name": "RateByKey",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<rate-limit-by-key calls='5' renewal-period='60' counter-key='@(context.Request.IpAddress)'/>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default Rate by key Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = RateByKey"
    },
    {
      "name": "QuotaByKey",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<quota-by-key calls='10000' bandwidth='40000' renewal-period='3600'/>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default Quota by key Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = QuotaByKey"
    },
    {
      "name": "HeaderCheck",
      "type": "multiLine",
      "label": "Policy",
      "defaultValue": "<policies>\n\t<inbound>\n\t\t<check-header name='header name' failed-check-httpcode='http status code to return on failure' failed-check-error-message='error message to return' ignore-case='true | false'>\n\t\t\t<value>value</value>\n\t\t</check-header>\n\t\t<base />\n\t</inbound>\n\t<backend>\n\t\t<base />\n\t</backend>\n\t<outbound>\n\t\t<base />\n\t</outbound>\n\t<on-error>\n\t\t<base />\n\t</on-error>\n</policies>",
      "required": false,
      "helpMarkDown": "Default Header Check Policy. Mind that this will replace any existing policy for that API. Add other policies manually if necessary!",
      "visibleRule": "TemplateSelector = HeaderCheck"
    }
  ],
  "dataSourceBindings": [
    {
      "target": "ResourceGroupName",
      "endpointId": "$(ConnectedServiceNameARM)",
      "dataSourceName": "AzureResourceGroups"
    },
    {
      "name": "ApiPortals",
      "target": "ApiPortalName",
      "endpointId": "$(ConnectedServiceNameARM)",
      "endpointUrl": "{{endpoint.url}}/subscriptions/$(endpoint.subscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.ApiManagement/service?api-version=2016-07-07",
      "resultSelector": "jsonpath:$.value[*].name",
      "parameters": {
        "ResourceGroupName": "$(ResourceGroupName)"
      }
    },
    {
      "target": "product1",
      "endpointId": "$(ConnectedServiceNameARM)",
      "endpointUrl": "{{endpoint.url}}/subscriptions/{{endpoint.subscriptionId}}/resourceGroups/$(ResourceGroupName)/providers/Microsoft.ApiManagement/service/$(ApiPortalName)/products?api-version=2017-03-01",
      "resultSelector": "jsonpath:$.value[*]",
      "resultTemplate": "{\"Value\" : \"{{{name}}}\", \"DisplayValue\" : \"{{{properties.displayName}}}\" }"
    }    
  ],
  "execution": {
    "PowerShell3": {
      "target": "apimwsdl.ps1"
    }
  }
}