[
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-ADMZIP-1065796",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "credit": [
          "cthackers"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.4,
        "functions": [],
        "malicious": false,
        "moduleName": "adm-zip",
        "references": [
          {
            "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-22"
          ]
        },
        "packageName": "adm-zip",
        "proprietary": false,
        "creationTime": "2021-01-28T07:59:50.454879Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-01-28T07:59:22Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T17:04:18.109270Z",
        "modificationTime": "2021-02-15T17:04:18.111270Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "adm-zip@0.4.13"
        ],
        "upgradePath": [
          false,
          "adm-zip@0.5.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "adm-zip",
        "version": "0.4.13",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\adm-zip\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ADMZIP-1065796",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "credit": [
          "cthackers"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.4,
        "functions": [],
        "malicious": false,
        "moduleName": "adm-zip",
        "references": [
          {
            "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-22"
          ]
        },
        "packageName": "adm-zip",
        "proprietary": false,
        "creationTime": "2021-01-28T07:59:50.454879Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-01-28T07:59:22Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T17:04:18.109270Z",
        "modificationTime": "2021-02-15T17:04:18.111270Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "adm-zip@0.4.13"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "adm-zip",
        "version": "0.4.13",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\adm-zip\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "wide-align@1.1.3",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "wide-align@1.1.3",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs@12.0.5",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs@12.0.5",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "string-width@2.1.1",
          "strip-ansi@4.0.0",
          "ansi-regex@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "wrap-ansi@2.1.0",
          "strip-ansi@3.0.1",
          "ansi-regex@2.1.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.1",
          "yargs@13.3.0",
          "cliui@5.0.0",
          "wrap-ansi@5.1.0",
          "strip-ansi@5.0.0",
          "ansi-regex@4.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "2.1.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\wrap-ansi\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "wrap-ansi@2.1.0",
          "string-width@1.0.2",
          "strip-ansi@3.0.1",
          "ansi-regex@2.1.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.1",
          "yargs@13.3.0",
          "cliui@5.0.0",
          "wrap-ansi@5.1.0",
          "string-width@3.0.0",
          "strip-ansi@5.0.0",
          "ansi-regex@4.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "2.1.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\wrap-ansi\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "wrap-ansi@2.1.0",
          "strip-ansi@3.0.1",
          "ansi-regex@2.1.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.1",
          "yargs-unparser@1.6.0",
          "yargs@13.3.0",
          "cliui@5.0.0",
          "wrap-ansi@5.1.0",
          "strip-ansi@5.0.0",
          "ansi-regex@4.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "2.1.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\wrap-ansi\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ANSIREGEX-1583908",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            ">=2.1.1 <3.0.1",
            ">=4.0.0 <4.1.1",
            ">=5.0.0 <5.0.1",
            ">=6.0.0 <6.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1",
          "4.1.1",
          "5.0.1",
          "6.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "ansi-regex",
        "references": [
          {
            "url": "https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/chalk/ansi-regex/pull/37",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-05-18T11:04:40.935720Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-25T16:45:11.225574Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-08T01:10:38.334810Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3807"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "ansi-regex",
        "proprietary": false,
        "creationTime": "2021-09-09T14:28:31.617043Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-09T14:27:43Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:52:37Z",
        "modificationTime": "2022-11-08T01:10:38.334810Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "cliui@4.1.0",
          "wrap-ansi@2.1.0",
          "string-width@1.0.2",
          "strip-ansi@3.0.1",
          "ansi-regex@2.1.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.1",
          "yargs-unparser@1.6.0",
          "yargs@13.3.0",
          "cliui@5.0.0",
          "wrap-ansi@5.1.0",
          "string-width@3.0.0",
          "strip-ansi@5.0.0",
          "ansi-regex@4.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ansi-regex",
        "version": "2.1.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\wrap-ansi\\node_modules\\ansi-regex\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-AXIOS-1038255",
        "title": "Server-Side Request Forgery (SSRF)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "Dima Ryskin"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/axios/axios/issues/3369",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99",
            "title": "GitHub Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1594",
            "title": "NPM Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-14T01:10:48.215421Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28168"
          ],
          "CWE": [
            "CWE-918"
          ],
          "NSP": [
            "NSP-1594"
          ],
          "GHSA": [
            "GHSA-4w2v-q235-vp99"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2020-11-08T09:37:44.217120Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-06T09:16:00Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-08T15:07:03Z",
        "modificationTime": "2022-09-14T01:10:48.215421Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "axios@0.19.0"
        ],
        "upgradePath": [
          false,
          "axios@0.21.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-AXIOS-1579269",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-07T13:10:40.624416Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3749"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2021-09-01T10:21:55.102099Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-01T10:17:45Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-01T16:08:42.935317Z",
        "modificationTime": "2022-10-07T13:10:40.624416Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "axios@0.19.0"
        ],
        "upgradePath": [
          false,
          "axios@0.21.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-AXIOS-1038255",
        "title": "Server-Side Request Forgery (SSRF)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "Dima Ryskin"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/axios/axios/issues/3369",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99",
            "title": "GitHub Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1594",
            "title": "NPM Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-14T01:10:48.215421Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28168"
          ],
          "CWE": [
            "CWE-918"
          ],
          "NSP": [
            "NSP-1594"
          ],
          "GHSA": [
            "GHSA-4w2v-q235-vp99"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2020-11-08T09:37:44.217120Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-06T09:16:00Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-08T15:07:03Z",
        "modificationTime": "2022-09-14T01:10:48.215421Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-AXIOS-1579269",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-07T13:10:40.624416Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3749"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2021-09-01T10:21:55.102099Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-01T10:17:45Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-01T16:08:42.935317Z",
        "modificationTime": "2022-10-07T13:10:40.624416Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-DECODEURICOMPONENT-3149970",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "KatsuragiCSL"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "decode-uri-component",
        "references": [
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/issues/5",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/sindresorhus/query-string/issues/345",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-02T01:11:11.714842Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to improper input validation, when the hash string `# kun%ea%ba%5a%ba` is being parsed by `decodeUriComponent`.\r\n\r\n## PoC\r\n```js\r\nconst decodeUriComponent = require('decode-uri-component');\r\n\r\nvar x = decodeUriComponent('%ea%ba%5a%ba');\r\n\r\nconsole.log(x);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `decode-uri-component` to version 0.2.2 or higher.\n## References\n- [GitHub Commit](https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152)\n- [GitHub Issue](https://github.com/SamVerschueren/decode-uri-component/issues/5)\n- [GitHub Issue](https://github.com/sindresorhus/query-string/issues/345)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-38900"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "decode-uri-component",
        "proprietary": false,
        "creationTime": "2022-11-28T14:24:36.010219Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-28T14:06:23Z",
        "packageManager": "npm",
        "publicationTime": "2022-11-28T16:12:34.614831Z",
        "modificationTime": "2022-12-02T09:02:03.162272Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "decode-uri-component",
        "version": "0.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\decode-uri-component\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-DECODEURICOMPONENT-3149970",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "KatsuragiCSL"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "decode-uri-component",
        "references": [
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/issues/5",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/sindresorhus/query-string/issues/345",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-02T01:11:11.714842Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to improper input validation, when the hash string `# kun%ea%ba%5a%ba` is being parsed by `decodeUriComponent`.\r\n\r\n## PoC\r\n```js\r\nconst decodeUriComponent = require('decode-uri-component');\r\n\r\nvar x = decodeUriComponent('%ea%ba%5a%ba');\r\n\r\nconsole.log(x);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `decode-uri-component` to version 0.2.2 or higher.\n## References\n- [GitHub Commit](https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152)\n- [GitHub Issue](https://github.com/SamVerschueren/decode-uri-component/issues/5)\n- [GitHub Issue](https://github.com/sindresorhus/query-string/issues/345)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-38900"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "decode-uri-component",
        "proprietary": false,
        "creationTime": "2022-11-28T14:24:36.010219Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-28T14:06:23Z",
        "packageManager": "npm",
        "publicationTime": "2022-11-28T16:12:34.614831Z",
        "modificationTime": "2022-12-02T09:02:03.162272Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "decode-uri-component",
        "version": "0.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\decode-uri-component\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-DECODEURICOMPONENT-3149970",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "KatsuragiCSL"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "decode-uri-component",
        "references": [
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/issues/5",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/sindresorhus/query-string/issues/345",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-02T01:11:11.714842Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to improper input validation, when the hash string `# kun%ea%ba%5a%ba` is being parsed by `decodeUriComponent`.\r\n\r\n## PoC\r\n```js\r\nconst decodeUriComponent = require('decode-uri-component');\r\n\r\nvar x = decodeUriComponent('%ea%ba%5a%ba');\r\n\r\nconsole.log(x);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `decode-uri-component` to version 0.2.2 or higher.\n## References\n- [GitHub Commit](https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152)\n- [GitHub Issue](https://github.com/SamVerschueren/decode-uri-component/issues/5)\n- [GitHub Issue](https://github.com/sindresorhus/query-string/issues/345)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-38900"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "decode-uri-component",
        "proprietary": false,
        "creationTime": "2022-11-28T14:24:36.010219Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-28T14:06:23Z",
        "packageManager": "npm",
        "publicationTime": "2022-11-28T16:12:34.614831Z",
        "modificationTime": "2022-12-02T09:02:03.162272Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "decode-uri-component",
        "version": "0.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\decode-uri-component\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-DECODEURICOMPONENT-3149970",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "KatsuragiCSL"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "decode-uri-component",
        "references": [
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/issues/5",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/sindresorhus/query-string/issues/345",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-02T01:11:11.714842Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to improper input validation, when the hash string `# kun%ea%ba%5a%ba` is being parsed by `decodeUriComponent`.\r\n\r\n## PoC\r\n```js\r\nconst decodeUriComponent = require('decode-uri-component');\r\n\r\nvar x = decodeUriComponent('%ea%ba%5a%ba');\r\n\r\nconsole.log(x);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `decode-uri-component` to version 0.2.2 or higher.\n## References\n- [GitHub Commit](https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152)\n- [GitHub Issue](https://github.com/SamVerschueren/decode-uri-component/issues/5)\n- [GitHub Issue](https://github.com/sindresorhus/query-string/issues/345)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-38900"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "decode-uri-component",
        "proprietary": false,
        "creationTime": "2022-11-28T14:24:36.010219Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-28T14:06:23Z",
        "packageManager": "npm",
        "publicationTime": "2022-11-28T16:12:34.614831Z",
        "modificationTime": "2022-12-02T09:02:03.162272Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "decode-uri-component",
        "version": "0.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\decode-uri-component\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-DECODEURICOMPONENT-3149970",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "KatsuragiCSL"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "decode-uri-component",
        "references": [
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/SamVerschueren/decode-uri-component/issues/5",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/sindresorhus/query-string/issues/345",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-02T01:11:11.714842Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to improper input validation, when the hash string `# kun%ea%ba%5a%ba` is being parsed by `decodeUriComponent`.\r\n\r\n## PoC\r\n```js\r\nconst decodeUriComponent = require('decode-uri-component');\r\n\r\nvar x = decodeUriComponent('%ea%ba%5a%ba');\r\n\r\nconsole.log(x);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `decode-uri-component` to version 0.2.2 or higher.\n## References\n- [GitHub Commit](https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152)\n- [GitHub Issue](https://github.com/SamVerschueren/decode-uri-component/issues/5)\n- [GitHub Issue](https://github.com/sindresorhus/query-string/issues/345)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-38900"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "decode-uri-component",
        "proprietary": false,
        "creationTime": "2022-11-28T14:24:36.010219Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-28T14:06:23Z",
        "packageManager": "npm",
        "publicationTime": "2022-11-28T16:12:34.614831Z",
        "modificationTime": "2022-12-02T09:02:03.162272Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "source-map-resolve@0.5.2",
          "decode-uri-component@0.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "decode-uri-component",
        "version": "0.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\decode-uri-component\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-FLAT-596927",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:H/E:P",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            ">=5.0.0 <5.0.2",
            ">=4.0.0 <4.1.1",
            ">=3.0.0 <3.0.1",
            ">=2.0.0 <2.0.2",
            "<1.6.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "5.0.2",
          "4.1.1",
          "3.0.1",
          "2.0.2",
          "1.6.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6,
        "functions": [],
        "malicious": false,
        "moduleName": "flat",
        "references": [
          {
            "url": "https://github.com/hughsk/flat/issues/105",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/hughsk/flat/pull/106",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[flat](https://www.npmjs.com/package/flat) is a Take a nested Javascript object and flatten it, or unflatten an object with delimited keys\n\nAffected versions of this package are vulnerable to Prototype Pollution.\n\n### PoC\r\n\r\n```\r\nvar unflatten = require('flat').unflatten;\r\n\r\nunflatten({\r\n'__proto__.polluted': true\r\n});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `flat` to version 5.0.2, 4.1.1, 3.0.1, 2.0.2, 1.6.2 or higher.\n## References\n- [GitHub Issue](https://github.com/hughsk/flat/issues/105)\n- [GitHub PR](https://github.com/hughsk/flat/pull/106)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-36632"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "flat",
        "proprietary": true,
        "creationTime": "2020-07-30T14:38:40.227520Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-07-30T14:03:07Z",
        "packageManager": "npm",
        "publicationTime": "2020-07-30T15:28:15Z",
        "modificationTime": "2022-12-26T08:25:57.851605Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "flat@4.1.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "flat@4.1.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "flat",
        "version": "4.1.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\flat\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "ranjit-git"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.14.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-10-29T01:10:37.731334Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0155"
          ],
          "CWE": [
            "CWE-359"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:06:36Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "modificationTime": "2022-10-29T01:10:37.731334Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [
          false,
          "axios@0.20.0",
          "follow-redirects@1.14.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.14.8"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.6,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-02-12T04:10:26.549451Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-10-27T02:41:54.426377Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0536"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-09T12:43:30Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "modificationTime": "2022-10-27T02:41:54.426377Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [
          false,
          "axios@0.20.0",
          "follow-redirects@1.14.8"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "ranjit-git"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.14.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-10-29T01:10:37.731334Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0155"
          ],
          "CWE": [
            "CWE-359"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:06:36Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "modificationTime": "2022-10-29T01:10:37.731334Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.14.8"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.6,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-02-12T04:10:26.549451Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-10-27T02:41:54.426377Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0536"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-09T12:43:30Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "modificationTime": "2022-10-27T02:41:54.426377Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ini@1.3.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ini\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "resolve-dir@1.0.1",
          "global-modules@1.0.0",
          "global-prefix@1.0.2",
          "ini@1.3.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ini\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-JSYAML-173999",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/RL:O",
        "credit": [
          "Shawn Rasheed",
          "Jens DIetrich"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <3.13.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.13.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.13.0"
            ],
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "className": null,
              "functionName": "storeMappingPair"
            }
          }
        ],
        "malicious": false,
        "moduleName": "js-yaml",
        "references": [
          {
            "url": "https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/nodeca/js-yaml/issues/475",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The parsing of a specially crafted YAML file may exhaust the system resources.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `js-yaml` to version 3.13.0 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/commit/a567ef3c6e61eb319f0bfc2671d91061afb01235)\n- [GitHub Issue](https://github.com/nodeca/js-yaml/issues/475)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "788"
          ],
          "GHSA": [
            "GHSA-2pr6-76vf-7546"
          ]
        },
        "packageName": "js-yaml",
        "proprietary": false,
        "creationTime": "2019-03-24T09:59:28.172265Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.13.0"
            ],
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "functionName": "storeMappingPair"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-03-18T21:29:08Z",
        "packageManager": "npm",
        "publicationTime": "2019-03-24T10:00:08Z",
        "modificationTime": "2020-12-14T14:41:10.940959Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "js-yaml@3.12.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.1.0",
          "js-yaml@3.13.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "js-yaml",
        "version": "3.12.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\js-yaml\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-JSYAML-174129",
        "title": "Arbitrary Code Execution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
        "credit": [
          "Alex Kocharin"
        ],
        "semver": {
          "vulnerable": [
            "<3.13.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.13.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.1,
        "functions": [
          {
            "version": [
              ">2.1.3 <3.13.1"
            ],
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "className": null,
              "functionName": "storeMappingPair"
            }
          },
          {
            "version": [
              ">1.0.3 <=2.1.3"
            ],
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "className": null,
              "functionName": "loadAll.storeMappingPair"
            }
          }
        ],
        "malicious": false,
        "moduleName": "js-yaml",
        "references": [
          {
            "url": "https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/nodeca/js-yaml/pull/480",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/813",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[js-yaml](https://www.npmjs.com/package/js-yaml) is a human-friendly data serialization language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. When an object with an executable `toString()` property used as a map key, it will execute that function. This happens only for `load()`, which should not be used with untrusted data anyway. `safeLoad()` is not affected because it can't parse functions.\n## Remediation\nUpgrade `js-yaml` to version 3.13.1 or higher.\n## References\n- [GitHub Commit](https://github.com/nodeca/js-yaml/pull/480/commits/e18afbf1edcafb7add2c4c7b22abc8d6ebc2fa61)\n- [GitHub PR](https://github.com/nodeca/js-yaml/pull/480)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/813)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-94"
          ],
          "NSP": [
            "813"
          ],
          "GHSA": [
            "GHSA-8j8c-7jfh-h6hx"
          ]
        },
        "packageName": "js-yaml",
        "proprietary": false,
        "creationTime": "2019-04-07T11:15:19.826828Z",
        "functions_new": [
          {
            "version": [
              ">2.1.3 <3.13.1"
            ],
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "functionName": "storeMappingPair"
            }
          },
          {
            "version": [
              ">1.0.3 <=2.1.3"
            ],
            "functionId": {
              "filePath": "lib/js-yaml/loader.js",
              "functionName": "loadAll.storeMappingPair"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-04-05T15:54:43Z",
        "packageManager": "npm",
        "publicationTime": "2019-04-07T15:54:43Z",
        "modificationTime": "2020-12-14T14:41:35.880966Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "js-yaml@3.12.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.1.4",
          "js-yaml@3.13.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "js-yaml",
        "version": "3.12.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\js-yaml\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon-node@2.1.1",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon-node@2.1.1",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon-node@2.1.1",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon-node@2.1.1",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "to-regex@3.0.2",
          "define-property@2.0.2",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "kind-of@6.0.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-accessor-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-KINDOF-537849",
        "title": "Validation Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
        "credit": [
          "Feng Xiao"
        ],
        "semver": {
          "vulnerable": [
            ">=6.0.0 <6.0.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "ctorName"
            }
          }
        ],
        "malicious": false,
        "moduleName": "kind-of",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/kind-of/issues/30",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/kind-of/pull/31",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T17:58:16.269822Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-13T18:26:44.905560Z"
          }
        ],
        "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-20149"
          ],
          "CWE": [
            "CWE-20"
          ],
          "NSP": [
            "1490"
          ],
          "GHSA": [
            "GHSA-6c8f-qphg-qjgp"
          ]
        },
        "packageName": "kind-of",
        "proprietary": false,
        "creationTime": "2019-12-16T14:21:14.675101Z",
        "functions_new": [
          {
            "version": [
              ">=6.0.0 <6.0.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "ctorName"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-12-16T14:31:14Z",
        "packageManager": "npm",
        "publicationTime": "2020-01-19T14:31:13Z",
        "modificationTime": "2022-09-13T18:26:44.905560Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "define-property@1.0.0",
          "is-descriptor@1.0.2",
          "is-data-descriptor@1.0.0",
          "kind-of@6.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "kind-of",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\kind-of\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\ip-address\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-450202",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.719849Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/issues/4348",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4336",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4355",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/sailshq/lodash/pull/1",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1065",
            "title": "Node Security Advisory"
          },
          {
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 9.1,
            "modificationTime": "2022-01-03T17:53:52.560412Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1065"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T11:45:02Z",
        "packageManager": "npm",
        "publicationTime": "2019-07-02T11:45:01Z",
        "modificationTime": "2022-08-25T12:14:41.065285Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.12"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.11",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.11"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.11",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-task-lib@3.3.1",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "mocha@9.2.2",
          "minimatch@4.2.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@1.0.1",
          "azure-pipelines-task-lib@3.3.1",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "glob@7.1.3",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "glob@7.1.3",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/substack/minimist/issues/164",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-11-25T14:17:13.977821Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "modificationTime": "2022-11-25T14:17:13.977821Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.3",
          "mkdirp@0.5.4",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-03T23:19:09.248741Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-09-01T16:53:55.159376Z"
          },
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-04-23T01:11:18.536458Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "modificationTime": "2022-09-01T16:53:55.159376Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.3",
          "mkdirp@0.5.4",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MIXINDEEP-450212",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            ">=2.0.0 <2.0.1",
            "<1.3.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "1.3.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.copy"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mixin-deep",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-29T13:11:02.200470Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
            "cvssV3BaseScore": 7,
            "modificationTime": "2022-09-01T20:33:44.166974Z"
          }
        ],
        "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10746"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1013"
          ],
          "GHSA": [
            "GHSA-fhjf-83wg-r2j9"
          ]
        },
        "packageName": "mixin-deep",
        "proprietary": true,
        "creationTime": "2019-06-20T09:34:56.241544Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.copy"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:34:10Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:34:08Z",
        "modificationTime": "2022-10-29T13:11:02.200470Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "mixin-deep",
        "version": "1.3.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\mixin-deep\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MIXINDEEP-450212",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            ">=2.0.0 <2.0.1",
            "<1.3.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "1.3.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.copy"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mixin-deep",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-29T13:11:02.200470Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
            "cvssV3BaseScore": 7,
            "modificationTime": "2022-09-01T20:33:44.166974Z"
          }
        ],
        "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10746"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1013"
          ],
          "GHSA": [
            "GHSA-fhjf-83wg-r2j9"
          ]
        },
        "packageName": "mixin-deep",
        "proprietary": true,
        "creationTime": "2019-06-20T09:34:56.241544Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.copy"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:34:10Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:34:08Z",
        "modificationTime": "2022-10-29T13:11:02.200470Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "mixin-deep",
        "version": "1.3.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\mixin-deep\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MIXINDEEP-450212",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            ">=2.0.0 <2.0.1",
            "<1.3.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "1.3.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.copy"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mixin-deep",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-29T13:11:02.200470Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
            "cvssV3BaseScore": 7,
            "modificationTime": "2022-09-01T20:33:44.166974Z"
          }
        ],
        "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10746"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1013"
          ],
          "GHSA": [
            "GHSA-fhjf-83wg-r2j9"
          ]
        },
        "packageName": "mixin-deep",
        "proprietary": true,
        "creationTime": "2019-06-20T09:34:56.241544Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.copy"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:34:10Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:34:08Z",
        "modificationTime": "2022-10-29T13:11:02.200470Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "mixin-deep",
        "version": "1.3.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\mixin-deep\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MIXINDEEP-450212",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            ">=2.0.0 <2.0.1",
            "<1.3.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "1.3.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.copy"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mixin-deep",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-29T13:11:02.200470Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
            "cvssV3BaseScore": 7,
            "modificationTime": "2022-09-01T20:33:44.166974Z"
          }
        ],
        "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10746"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1013"
          ],
          "GHSA": [
            "GHSA-fhjf-83wg-r2j9"
          ]
        },
        "packageName": "mixin-deep",
        "proprietary": true,
        "creationTime": "2019-06-20T09:34:56.241544Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.copy"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:34:10Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:34:08Z",
        "modificationTime": "2022-10-29T13:11:02.200470Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "mixin-deep",
        "version": "1.3.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\mixin-deep\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MIXINDEEP-450212",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            ">=2.0.0 <2.0.1",
            "<1.3.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "1.3.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.copy"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mixin-deep",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-29T13:11:02.200470Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
            "cvssV3BaseScore": 7,
            "modificationTime": "2022-09-01T20:33:44.166974Z"
          }
        ],
        "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10746"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1013"
          ],
          "GHSA": [
            "GHSA-fhjf-83wg-r2j9"
          ]
        },
        "packageName": "mixin-deep",
        "proprietary": true,
        "creationTime": "2019-06-20T09:34:56.241544Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "mixinDeep"
            }
          },
          {
            "version": [
              ">=1.1.1 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "copy"
            }
          },
          {
            "version": [
              "<1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.copy"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:34:10Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:34:08Z",
        "modificationTime": "2022-10-29T13:11:02.200470Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "mixin-deep@1.3.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "mixin-deep",
        "version": "1.3.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\mixin-deep\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MOCHA-2863123",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            "<10.1.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "10.1.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "mocha",
        "references": [
          {
            "url": "https://github.com/mochajs/mocha/pull/4770",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/mochajs/mocha/releases/tag/v10.1.0",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[mocha](https://github.com/mochajs/mocha) is a javascript test framework for node.js & the browser.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `clean` function in `utils.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mocha` to version 10.1.0 or higher.\n## References\n- [GitHub PR](https://github.com/mochajs/mocha/pull/4770)\n- [GitHub Release](https://github.com/mochajs/mocha/releases/tag/v10.1.0)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "mocha",
        "proprietary": false,
        "creationTime": "2022-06-08T10:48:32.976009Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-06-08T10:19:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-06-08T12:02:25.605796Z",
        "modificationTime": "2022-10-16T12:13:06.412916Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2"
        ],
        "upgradePath": [
          false,
          "mocha@10.1.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "mocha",
        "version": "6.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\mocha\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PATHPARSE-1077067",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.0.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "path-parse",
        "references": [
          {
            "url": "https://github.com/jbgutierrez/path-parse/issues/8",
            "title": "GitHub Issue 1"
          },
          {
            "url": "https://github.com/jbgutierrez/path-parse/pull/10",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-05-18T11:02:40.203327Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T18:10:59.641332Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:36:10.774253Z"
          }
        ],
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23343"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "path-parse",
        "proprietary": true,
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-02-19T15:54:01Z",
        "packageManager": "npm",
        "publicationTime": "2021-05-04T08:38:49Z",
        "modificationTime": "2022-09-01T18:10:59.641332Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "path-parse",
        "version": "1.0.6",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\path-parse\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PATHPARSE-1077067",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.0.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "path-parse",
        "references": [
          {
            "url": "https://github.com/jbgutierrez/path-parse/issues/8",
            "title": "GitHub Issue 1"
          },
          {
            "url": "https://github.com/jbgutierrez/path-parse/pull/10",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-05-18T11:02:40.203327Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T18:10:59.641332Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:36:10.774253Z"
          }
        ],
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23343"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "path-parse",
        "proprietary": true,
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-02-19T15:54:01Z",
        "packageManager": "npm",
        "publicationTime": "2021-05-04T08:38:49Z",
        "modificationTime": "2022-09-01T18:10:59.641332Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "path-parse",
        "version": "1.0.6",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\path-parse\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "set-value@2.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "set-value",
        "version": "2.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-1540541",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Alessio Della Libera",
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            ">=3.0.0 <4.0.1",
            "<2.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.0.1",
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/set-value/pull/33",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
            "title": "Huntr Bounty Report"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-03-30T01:11:03.186163Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23440"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2021-08-12T16:49:06.015288Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-12T16:49:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-12T12:24:31Z",
        "modificationTime": "2022-06-09T15:14:12.207129Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SETVALUE-450213",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jon Schlinkert"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1",
            ">=3.0.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.0.1",
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "create"
            }
          }
        ],
        "malicious": false,
        "moduleName": "set-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://nodesecurity.io/advisories/1012",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T17:53:51.359210Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-13T18:15:44.140078Z"
          }
        ],
        "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10747"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1012"
          ],
          "GHSA": [
            "GHSA-4g88-fppr-53pp"
          ]
        },
        "packageName": "set-value",
        "proprietary": true,
        "creationTime": "2019-06-20T09:40:41.272349Z",
        "functions_new": [
          {
            "version": [
              ">=3.0.0 <3.0.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "set"
            }
          },
          {
            "version": [
              ">=0.3.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.3.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "create"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T09:38:54Z",
        "packageManager": "npm",
        "publicationTime": "2019-06-20T09:38:53Z",
        "modificationTime": "2022-09-13T18:15:44.140078Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "union-value@1.0.0",
          "set-value@0.4.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "set-value",
        "version": "0.4.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\union-value\\node_modules\\set-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-task-lib@3.1.0",
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@1.0.1",
          "azure-pipelines-task-lib@3.1.0",
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "shelljs@0.8.3"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "azure-devops-node-api@7.0.0",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-devops-node-api@10.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "azure-devops-node-api@7.0.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-devops-node-api@10.1.1",
          "typed-rest-client@1.8.4",
          "underscore@1.12.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@0.13.2",
          "typed-rest-client@1.8.4",
          "underscore@1.12.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-devops-node-api@6.6.3",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "typed-rest-client@0.12.0",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-devops-node-api@6.6.3",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNSETVALUE-2400660",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "khizar"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "unset-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/issues/11",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/releases",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "unset-value",
        "proprietary": false,
        "creationTime": "2022-02-13T14:46:07.185334Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-13T14:44:04Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-13T15:26:38.063549Z",
        "modificationTime": "2022-02-13T15:26:38.065734Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "unset-value@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "unset-value",
        "version": "1.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\unset-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNSETVALUE-2400660",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "khizar"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "unset-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/issues/11",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/releases",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "unset-value",
        "proprietary": false,
        "creationTime": "2022-02-13T14:46:07.185334Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-13T14:44:04Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-13T15:26:38.063549Z",
        "modificationTime": "2022-02-13T15:26:38.065734Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "braces@2.3.2",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "unset-value@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "unset-value",
        "version": "1.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\unset-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNSETVALUE-2400660",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "khizar"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "unset-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/issues/11",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/releases",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "unset-value",
        "proprietary": false,
        "creationTime": "2022-02-13T14:46:07.185334Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-13T14:44:04Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-13T15:26:38.063549Z",
        "modificationTime": "2022-02-13T15:26:38.065734Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "unset-value@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "unset-value",
        "version": "1.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\unset-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNSETVALUE-2400660",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "khizar"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "unset-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/issues/11",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/releases",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "unset-value",
        "proprietary": false,
        "creationTime": "2022-02-13T14:46:07.185334Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-13T14:44:04Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-13T15:26:38.063549Z",
        "modificationTime": "2022-02-13T15:26:38.065734Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "nanomatch@1.2.13",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "unset-value@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "unset-value",
        "version": "1.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\unset-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNSETVALUE-2400660",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "khizar"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "unset-value",
        "references": [
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/issues/11",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/pull/12",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/jonschlinkert/unset-value/releases",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "unset-value",
        "proprietary": false,
        "creationTime": "2022-02-13T14:46:07.185334Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-13T14:44:04Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-13T15:26:38.063549Z",
        "modificationTime": "2022-02-13T15:26:38.065734Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "findup-sync@2.0.0",
          "micromatch@3.1.10",
          "extglob@2.0.4",
          "expand-brackets@2.1.4",
          "snapdragon@0.8.2",
          "base@0.11.2",
          "cache-base@1.0.1",
          "unset-value@1.0.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "unset-value",
        "version": "1.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\unset-value\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-Y18N-1021887",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Beomjin Lee"
        ],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.0.1",
            ">=5.0.0 <5.0.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.2.2",
          "4.0.1",
          "5.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "y18n",
        "references": [
          {
            "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/yargs/y18n/issues/96",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/yargs/y18n/pull/108",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-15T01:10:30.866399Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-09-01T17:35:19.289005Z"
          },
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-05-03T21:55:35.206553Z"
          }
        ],
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper sanitization.\r\n## PoC by po6ix:\r\n```js\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7774"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-c4w7-xm78-47vh"
          ]
        },
        "packageName": "y18n",
        "proprietary": true,
        "creationTime": "2020-10-25T14:27:16.715665Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-25T14:24:22Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-10T15:27:28Z",
        "modificationTime": "2022-10-15T01:10:30.866399Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs@12.0.5",
          "y18n@4.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs@12.0.5",
          "y18n@4.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "y18n",
        "version": "4.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\y18n\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-Y18N-1021887",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Beomjin Lee"
        ],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.0.1",
            ">=5.0.0 <5.0.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.2.2",
          "4.0.1",
          "5.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "y18n",
        "references": [
          {
            "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/yargs/y18n/issues/96",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/yargs/y18n/pull/108",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-15T01:10:30.866399Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-09-01T17:35:19.289005Z"
          },
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-05-03T21:55:35.206553Z"
          }
        ],
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper sanitization.\r\n## PoC by po6ix:\r\n```js\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7774"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-c4w7-xm78-47vh"
          ]
        },
        "packageName": "y18n",
        "proprietary": true,
        "creationTime": "2020-10-25T14:27:16.715665Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-25T14:24:22Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-10T15:27:28Z",
        "modificationTime": "2022-10-15T01:10:30.866399Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "y18n@4.0.0"
        ],
        "upgradePath": [
          false,
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "y18n@4.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "y18n",
        "version": "4.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\y18n\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-YARGSPARSER-560381",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<5.0.1",
            ">=6.0.0 <13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "5.0.1",
          "13.1.2",
          "15.0.1",
          "18.1.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse.setKey"
            }
          },
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "yargs-parser",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2",
            "title": "GitHub Fix Commit"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-11-16T01:10:20.904373Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T17:35:12.683024Z"
          }
        ],
        "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7608"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1500"
          ]
        },
        "packageName": "yargs-parser",
        "proprietary": true,
        "creationTime": "2020-03-16T16:41:36.590728Z",
        "functions_new": [
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            }
          },
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-16T16:35:35Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-16T16:35:33Z",
        "modificationTime": "2022-11-16T01:10:20.904373Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-parser@11.1.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.3",
          "yargs-parser@13.1.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "yargs-parser",
        "version": "11.1.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\yargs-parser\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-YARGSPARSER-560381",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<5.0.1",
            ">=6.0.0 <13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "5.0.1",
          "13.1.2",
          "15.0.1",
          "18.1.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse.setKey"
            }
          },
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "yargs-parser",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2",
            "title": "GitHub Fix Commit"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-11-16T01:10:20.904373Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T17:35:12.683024Z"
          }
        ],
        "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7608"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1500"
          ]
        },
        "packageName": "yargs-parser",
        "proprietary": true,
        "creationTime": "2020-03-16T16:41:36.590728Z",
        "functions_new": [
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            }
          },
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-16T16:35:35Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-16T16:35:33Z",
        "modificationTime": "2022-11-16T01:10:20.904373Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs@12.0.5",
          "yargs-parser@11.1.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.1.0",
          "yargs@13.2.2",
          "yargs-parser@13.1.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "yargs-parser",
        "version": "11.1.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\yargs-parser\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-YARGSPARSER-560381",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<5.0.1",
            ">=6.0.0 <13.1.2",
            ">=14.0.0 <15.0.1",
            ">=16.0.0 <18.1.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "5.0.1",
          "13.1.2",
          "15.0.1",
          "18.1.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse.setKey"
            }
          },
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "yargs-parser",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2",
            "title": "GitHub Fix Commit"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-11-16T01:10:20.904373Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T17:35:12.683024Z"
          }
        ],
        "description": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7608"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1500"
          ]
        },
        "packageName": "yargs-parser",
        "proprietary": true,
        "creationTime": "2020-03-16T16:41:36.590728Z",
        "functions_new": [
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            }
          },
          {
            "version": [
              "<13.1.2",
              ">=14.0.0 <15.0.1",
              ">=16.0.0 <18.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-16T16:35:35Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-16T16:35:33Z",
        "modificationTime": "2022-11-16T01:10:20.904373Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-save-cache-task@1.0.0",
          "mocha@6.0.2",
          "yargs-unparser@1.5.0",
          "yargs@12.0.5",
          "yargs-parser@11.1.1"
        ],
        "upgradePath": [
          false,
          "mocha@6.2.1",
          "yargs-unparser@1.6.0",
          "yargs@13.3.0",
          "yargs-parser@13.1.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "yargs-parser",
        "version": "11.1.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreAndSaveCacheV1\\node_modules\\yargs-parser\\package.json",
        "parentDepType": "prod"
      }
    ],
    "ok": false,
    "dependencyCount": 252,
    "org": "global-devops-bootcamp",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1+": {
          "licenseType": "LGPL-2.1+",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0+": {
          "licenseType": "LGPL-3.0+",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "149 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-DECODEURICOMPONENT-3149970",
          "title": "Denial of Service (DoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
          "credit": [
            "KatsuragiCSL"
          ],
          "semver": {
            "vulnerable": [
              "<0.2.2"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "0.2.2"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.5,
          "functions": [],
          "malicious": false,
          "moduleName": "decode-uri-component",
          "references": [
            {
              "url": "https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/SamVerschueren/decode-uri-component/issues/5",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/sindresorhus/query-string/issues/345",
              "title": "GitHub Issue"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-12-02T01:11:11.714842Z"
            }
          ],
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to improper input validation, when the hash string `# kun%ea%ba%5a%ba` is being parsed by `decodeUriComponent`.\r\n\r\n## PoC\r\n```js\r\nconst decodeUriComponent = require('decode-uri-component');\r\n\r\nvar x = decodeUriComponent('%ea%ba%5a%ba');\r\n\r\nconsole.log(x);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `decode-uri-component` to version 0.2.2 or higher.\n## References\n- [GitHub Commit](https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152)\n- [GitHub Issue](https://github.com/SamVerschueren/decode-uri-component/issues/5)\n- [GitHub Issue](https://github.com/sindresorhus/query-string/issues/345)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-38900"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "packageName": "decode-uri-component",
          "proprietary": false,
          "creationTime": "2022-11-28T14:24:36.010219Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-11-28T14:06:23Z",
          "packageManager": "npm",
          "publicationTime": "2022-11-28T16:12:34.614831Z",
          "modificationTime": "2022-12-02T09:02:03.162272Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "source-map-resolve@0.5.2",
            "decode-uri-component@0.2.0"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "source-map-resolve@0.5.2",
            "decode-uri-component@0.2.2"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "decode-uri-component",
          "version": "0.2.0",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-FLAT-596927",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:H/E:P",
          "credit": [
            "posix"
          ],
          "semver": {
            "vulnerable": [
              ">=5.0.0 <5.0.2",
              ">=4.0.0 <4.1.1",
              ">=3.0.0 <3.0.1",
              ">=2.0.0 <2.0.2",
              "<1.6.2"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "5.0.2",
            "4.1.1",
            "3.0.1",
            "2.0.2",
            "1.6.2"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 6,
          "functions": [],
          "malicious": false,
          "moduleName": "flat",
          "references": [
            {
              "url": "https://github.com/hughsk/flat/issues/105",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/hughsk/flat/pull/106",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [],
          "description": "## Overview\n[flat](https://www.npmjs.com/package/flat) is a Take a nested Javascript object and flatten it, or unflatten an object with delimited keys\n\nAffected versions of this package are vulnerable to Prototype Pollution.\n\n### PoC\r\n\r\n```\r\nvar unflatten = require('flat').unflatten;\r\n\r\nunflatten({\r\n'__proto__.polluted': true\r\n});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `flat` to version 5.0.2, 4.1.1, 3.0.1, 2.0.2, 1.6.2 or higher.\n## References\n- [GitHub Issue](https://github.com/hughsk/flat/issues/105)\n- [GitHub PR](https://github.com/hughsk/flat/pull/106)\n",
          "identifiers": {
            "CVE": [
              "CVE-2020-36632"
            ],
            "CWE": [
              "CWE-1321"
            ]
          },
          "packageName": "flat",
          "proprietary": true,
          "creationTime": "2020-07-30T14:38:40.227520Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-07-30T14:03:07Z",
          "packageManager": "npm",
          "publicationTime": "2020-07-30T15:28:15Z",
          "modificationTime": "2022-12-26T08:25:57.851605Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "flat@4.1.0"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "flat@4.1.1"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "flat",
          "version": "4.1.0",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-INI-1048974",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
          "credit": [
            "Eugene Lim",
            "Government Technology Agency Cyber Security Group"
          ],
          "semver": {
            "vulnerable": [
              "<1.3.6"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "1.3.6"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [],
          "malicious": false,
          "moduleName": "ini",
          "references": [
            {
              "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
              "title": "Eugene Lim - Research Blog Post"
            },
            {
              "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
              "title": "GitHub Commit"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-12-03T01:11:01.035564Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "cvssV3BaseScore": 7.3,
              "modificationTime": "2022-10-27T14:23:39.509078Z"
            }
          ],
          "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
          "identifiers": {
            "CVE": [
              "CVE-2020-7788"
            ],
            "CWE": [
              "CWE-1321"
            ],
            "GHSA": [
              "GHSA-qqgx-2p2h-9c37"
            ]
          },
          "packageName": "ini",
          "proprietary": true,
          "creationTime": "2020-12-08T15:34:07.743781Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-12-08T13:02:04Z",
          "packageManager": "npm",
          "publicationTime": "2020-12-10T18:08:38Z",
          "modificationTime": "2022-12-03T01:11:01.035564Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "resolve-dir@1.0.1",
            "global-modules@1.0.0",
            "global-prefix@1.0.2",
            "ini@1.3.5"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "ini",
          "version": "1.3.5",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-KINDOF-537849",
          "title": "Validation Bypass",
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
          "credit": [
            "Feng Xiao"
          ],
          "semver": {
            "vulnerable": [
              ">=6.0.0 <6.0.3"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "6.0.3"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "low",
          "cvssScore": 3.7,
          "functions": [
            {
              "version": [
                ">=6.0.0 <6.0.3"
              ],
              "functionId": {
                "filePath": "index.js",
                "className": null,
                "functionName": "ctorName"
              }
            }
          ],
          "malicious": false,
          "moduleName": "kind-of",
          "references": [
            {
              "url": "https://github.com/jonschlinkert/kind-of/issues/30",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/jonschlinkert/kind-of/pull/31",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-01-03T17:58:16.269822Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
              "cvssV3BaseScore": 5.9,
              "modificationTime": "2022-09-13T18:26:44.905560Z"
            }
          ],
          "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
          "identifiers": {
            "CVE": [
              "CVE-2019-20149"
            ],
            "CWE": [
              "CWE-20"
            ],
            "NSP": [
              "1490"
            ],
            "GHSA": [
              "GHSA-6c8f-qphg-qjgp"
            ]
          },
          "packageName": "kind-of",
          "proprietary": false,
          "creationTime": "2019-12-16T14:21:14.675101Z",
          "functions_new": [
            {
              "version": [
                ">=6.0.0 <6.0.3"
              ],
              "functionId": {
                "filePath": "index.js",
                "functionName": "ctorName"
              }
            }
          ],
          "alternativeIds": [],
          "disclosureTime": "2019-12-16T14:31:14Z",
          "packageManager": "npm",
          "publicationTime": "2020-01-19T14:31:13Z",
          "modificationTime": "2022-09-13T18:26:44.905560Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "base@0.11.2",
            "define-property@1.0.0",
            "is-descriptor@1.0.2",
            "is-data-descriptor@1.0.0",
            "kind-of@6.0.2"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "kind-of",
          "version": "6.0.2",
          "severityWithCritical": "low"
        },
        {
          "id": "SNYK-JS-LODASH-1018905",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "credit": [
            "Liyuan Chen"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/lodash/lodash/pull/5065",
              "title": "GitHub Fix PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-09-14T01:10:48.134557Z"
            }
          ],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
          "identifiers": {
            "CVE": [
              "CVE-2020-28500"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "packageName": "lodash",
          "proprietary": true,
          "creationTime": "2020-10-16T16:48:40.985673Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-10-16T16:47:34Z",
          "packageManager": "npm",
          "publicationTime": "2021-02-15T11:50:49Z",
          "modificationTime": "2022-09-14T01:10:48.134557Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.21"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.11",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-LODASH-1040724",
          "title": "Command Injection",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
          "credit": [
            "Marc Hassan"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.2,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
              "title": "Vulnerable Code"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 7.2,
              "modificationTime": "2022-09-14T01:10:48.257735Z"
            }
          ],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-23337"
            ],
            "CWE": [
              "CWE-78"
            ],
            "GHSA": [
              "GHSA-35jh-r3h4-6jhm"
            ]
          },
          "packageName": "lodash",
          "proprietary": true,
          "creationTime": "2020-11-17T14:07:17.048472Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-11-17T13:02:10Z",
          "packageManager": "npm",
          "publicationTime": "2021-02-15T11:50:50Z",
          "modificationTime": "2022-09-14T01:10:48.257735Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.21"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.11",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-LODASH-608086",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "credit": [
            "awarau"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.17"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.17"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://hackerone.com/reports/864701",
              "title": "HackerOne Report"
            }
          ],
          "cvssDetails": [],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-1321"
            ]
          },
          "packageName": "lodash",
          "proprietary": false,
          "creationTime": "2020-08-21T12:52:58.443440Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-08-21T10:34:29Z",
          "packageManager": "npm",
          "publicationTime": "2020-08-21T12:53:03Z",
          "modificationTime": "2022-08-25T12:14:41.622393Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.17"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.11",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-LODASH-450202",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "credit": [
            "Snyk Security Team"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.12"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.12"
          ],
          "patches": [
            {
              "id": "patch:SNYK-JS-LODASH-450202:0",
              "urls": [
                "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
              ],
              "version": "=4.17.11",
              "comments": [],
              "modificationTime": "2019-12-03T11:40:45.719849Z"
            }
          ],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [
            {
              "version": [
                ">=4.17.3 <4.17.12"
              ],
              "functionId": {
                "filePath": "lodash.js",
                "className": null,
                "functionName": "runInContext.customDefaultsMerge"
              }
            }
          ],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://github.com/lodash/lodash/issues/4348",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/lodash/lodash/pull/4336",
              "title": "GitHub PR"
            },
            {
              "url": "https://github.com/lodash/lodash/pull/4355",
              "title": "GitHub PR"
            },
            {
              "url": "https://github.com/sailshq/lodash/pull/1",
              "title": "GitHub PR"
            },
            {
              "url": "https://www.npmjs.com/advisories/1065",
              "title": "Node Security Advisory"
            },
            {
              "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/",
              "title": "Snyk Blog"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
              "cvssV3BaseScore": 9.1,
              "modificationTime": "2022-01-03T17:53:52.560412Z"
            }
          ],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
          "identifiers": {
            "CVE": [
              "CVE-2019-10744"
            ],
            "CWE": [
              "CWE-1321"
            ],
            "NSP": [
              "1065"
            ],
            "GHSA": [
              "GHSA-jf85-cpcp-j695"
            ]
          },
          "packageName": "lodash",
          "proprietary": true,
          "creationTime": "2019-06-19T12:04:21.040000Z",
          "functions_new": [
            {
              "version": [
                ">=4.17.3 <4.17.12"
              ],
              "functionId": {
                "filePath": "lodash.js",
                "functionName": "runInContext.customDefaultsMerge"
              }
            }
          ],
          "alternativeIds": [],
          "disclosureTime": "2019-06-19T11:45:02Z",
          "packageManager": "npm",
          "publicationTime": "2019-07-02T11:45:01Z",
          "modificationTime": "2022-08-25T12:14:41.065285Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.11"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "lodash@4.17.12"
          ],
          "isUpgradable": true,
          "isPatchable": true,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.11",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-MIXINDEEP-450212",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "credit": [
            "Snyk Security Team"
          ],
          "semver": {
            "vulnerable": [
              ">=2.0.0 <2.0.1",
              "<1.3.2"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "2.0.1",
            "1.3.2"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [
            {
              "version": [
                ">=2.0.0 <2.0.1"
              ],
              "functionId": {
                "filePath": "index.js",
                "className": null,
                "functionName": "mixinDeep"
              }
            },
            {
              "version": [
                ">=1.1.1 <2.0.0"
              ],
              "functionId": {
                "filePath": "index.js",
                "className": null,
                "functionName": "copy"
              }
            },
            {
              "version": [
                "<1.1.1"
              ],
              "functionId": {
                "filePath": "index.js",
                "className": null,
                "functionName": "module.exports.copy"
              }
            }
          ],
          "malicious": false,
          "moduleName": "mixin-deep",
          "references": [
            {
              "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9",
              "title": "GitHub Commit"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-10-29T13:11:02.200470Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H",
              "cvssV3BaseScore": 7,
              "modificationTime": "2022-09-01T20:33:44.166974Z"
            }
          ],
          "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
          "identifiers": {
            "CVE": [
              "CVE-2019-10746"
            ],
            "CWE": [
              "CWE-1321"
            ],
            "NSP": [
              "1013"
            ],
            "GHSA": [
              "GHSA-fhjf-83wg-r2j9"
            ]
          },
          "packageName": "mixin-deep",
          "proprietary": true,
          "creationTime": "2019-06-20T09:34:56.241544Z",
          "functions_new": [
            {
              "version": [
                ">=2.0.0 <2.0.1"
              ],
              "functionId": {
                "filePath": "index.js",
                "functionName": "mixinDeep"
              }
            },
            {
              "version": [
                ">=1.1.1 <2.0.0"
              ],
              "functionId": {
                "filePath": "index.js",
                "functionName": "copy"
              }
            },
            {
              "version": [
                "<1.1.1"
              ],
              "functionId": {
                "filePath": "index.js",
                "functionName": "module.exports.copy"
              }
            }
          ],
          "alternativeIds": [],
          "disclosureTime": "2019-06-19T09:34:10Z",
          "packageManager": "npm",
          "publicationTime": "2019-06-20T09:34:08Z",
          "modificationTime": "2022-10-29T13:11:02.200470Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "base@0.11.2",
            "mixin-deep@1.3.1"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "base@0.11.2",
            "mixin-deep@1.3.2"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "mixin-deep",
          "version": "1.3.1",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-PATHPARSE-1077067",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "credit": [
            "Yeting Li"
          ],
          "semver": {
            "vulnerable": [
              "<1.0.7"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "1.0.7"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "path-parse",
          "references": [
            {
              "url": "https://github.com/jbgutierrez/path-parse/issues/8",
              "title": "GitHub Issue 1"
            },
            {
              "url": "https://github.com/jbgutierrez/path-parse/pull/10",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "SUSE",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-05-18T11:02:40.203327Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-09-01T18:10:59.641332Z"
            },
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-01-03T16:36:10.774253Z"
            }
          ],
          "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-23343"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "packageName": "path-parse",
          "proprietary": true,
          "creationTime": "2021-02-19T16:00:22.449519Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2021-02-19T15:54:01Z",
          "packageManager": "npm",
          "publicationTime": "2021-05-04T08:38:49Z",
          "modificationTime": "2022-09-01T18:10:59.641332Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "shelljs@0.8.3",
            "rechoir@0.6.2",
            "resolve@1.9.0",
            "path-parse@1.0.6"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "path-parse",
          "version": "1.0.6",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-SETVALUE-1540541",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
          "credit": [
            "Alessio Della Libera",
            "ready-research"
          ],
          "semver": {
            "vulnerable": [
              ">=3.0.0 <4.0.1",
              "<2.0.1"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.0.1",
            "2.0.1"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [],
          "malicious": false,
          "moduleName": "set-value",
          "references": [
            {
              "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/jonschlinkert/set-value/pull/33",
              "title": "GitHub PR"
            },
            {
              "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/",
              "title": "Huntr Bounty Report"
            },
            {
              "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
              "title": "Snyk Blog"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-03-30T01:11:03.186163Z"
            }
          ],
          "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-23440"
            ],
            "CWE": [
              "CWE-1321"
            ]
          },
          "packageName": "set-value",
          "proprietary": true,
          "creationTime": "2021-08-12T16:49:06.015288Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2021-08-12T16:49:03Z",
          "packageManager": "npm",
          "publicationTime": "2021-09-12T12:24:31Z",
          "modificationTime": "2022-06-09T15:14:12.207129Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "base@0.11.2",
            "cache-base@1.0.1",
            "union-value@1.0.0",
            "set-value@0.4.3"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "set-value",
          "version": "0.4.3",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-SETVALUE-450213",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "credit": [
            "Jon Schlinkert"
          ],
          "semver": {
            "vulnerable": [
              "<2.0.1",
              ">=3.0.0 <3.0.1"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "2.0.1",
            "3.0.1"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [
            {
              "version": [
                ">=3.0.0 <3.0.1"
              ],
              "functionId": {
                "filePath": "index.js",
                "className": null,
                "functionName": "set"
              }
            },
            {
              "version": [
                ">=0.3.0 <3.0.0"
              ],
              "functionId": {
                "filePath": "index.js",
                "className": null,
                "functionName": "module.exports"
              }
            },
            {
              "version": [
                "<0.3.0"
              ],
              "functionId": {
                "filePath": "index.js",
                "className": null,
                "functionName": "create"
              }
            }
          ],
          "malicious": false,
          "moduleName": "set-value",
          "references": [
            {
              "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f",
              "title": "GitHub Commit"
            },
            {
              "url": "https://nodesecurity.io/advisories/1012",
              "title": "NPM Security Advisory"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-01-03T17:53:51.359210Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:N",
              "cvssV3BaseScore": 4.2,
              "modificationTime": "2022-09-13T18:15:44.140078Z"
            }
          ],
          "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
          "identifiers": {
            "CVE": [
              "CVE-2019-10747"
            ],
            "CWE": [
              "CWE-1321"
            ],
            "NSP": [
              "1012"
            ],
            "GHSA": [
              "GHSA-4g88-fppr-53pp"
            ]
          },
          "packageName": "set-value",
          "proprietary": true,
          "creationTime": "2019-06-20T09:40:41.272349Z",
          "functions_new": [
            {
              "version": [
                ">=3.0.0 <3.0.1"
              ],
              "functionId": {
                "filePath": "index.js",
                "functionName": "set"
              }
            },
            {
              "version": [
                ">=0.3.0 <3.0.0"
              ],
              "functionId": {
                "filePath": "index.js",
                "functionName": "module.exports"
              }
            },
            {
              "version": [
                "<0.3.0"
              ],
              "functionId": {
                "filePath": "index.js",
                "functionName": "create"
              }
            }
          ],
          "alternativeIds": [],
          "disclosureTime": "2019-06-19T09:38:54Z",
          "packageManager": "npm",
          "publicationTime": "2019-06-20T09:38:53Z",
          "modificationTime": "2022-09-13T18:15:44.140078Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "base@0.11.2",
            "cache-base@1.0.1",
            "union-value@1.0.0",
            "set-value@0.4.3"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "set-value",
          "version": "0.4.3",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-UNSETVALUE-2400660",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "credit": [
            "khizar"
          ],
          "semver": {
            "vulnerable": [
              "<2.0.1"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [
            "2.0.1"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.5,
          "functions": [],
          "malicious": false,
          "moduleName": "unset-value",
          "references": [
            {
              "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/jonschlinkert/unset-value/issues/11",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/jonschlinkert/unset-value/pull/12",
              "title": "GitHub PR"
            },
            {
              "url": "https://github.com/jonschlinkert/unset-value/releases",
              "title": "GitHub Release"
            }
          ],
          "cvssDetails": [],
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-1321"
            ]
          },
          "packageName": "unset-value",
          "proprietary": false,
          "creationTime": "2022-02-13T14:46:07.185334Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-02-13T14:44:04Z",
          "packageManager": "npm",
          "publicationTime": "2022-02-13T15:26:38.063549Z",
          "modificationTime": "2022-02-13T15:26:38.065734Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "findup-sync@2.0.0",
            "micromatch@3.1.10",
            "extglob@2.0.4",
            "expand-brackets@2.1.4",
            "snapdragon@0.8.2",
            "base@0.11.2",
            "cache-base@1.0.1",
            "unset-value@1.0.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "unset-value",
          "version": "1.0.0",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-Y18N-1021887",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
          "credit": [
            "Beomjin Lee"
          ],
          "semver": {
            "vulnerable": [
              "<3.2.2",
              ">=4.0.0 <4.0.1",
              ">=5.0.0 <5.0.5"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "3.2.2",
            "4.0.1",
            "5.0.5"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [],
          "malicious": false,
          "moduleName": "y18n",
          "references": [
            {
              "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/yargs/y18n/issues/96",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/yargs/y18n/pull/108",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-10-15T01:10:30.866399Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "cvssV3BaseScore": 7.3,
              "modificationTime": "2022-09-01T17:35:19.289005Z"
            },
            {
              "assigner": "SUSE",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "cvssV3BaseScore": 7.3,
              "modificationTime": "2022-05-03T21:55:35.206553Z"
            }
          ],
          "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper sanitization.\r\n## PoC by po6ix:\r\n```js\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
          "identifiers": {
            "CVE": [
              "CVE-2020-7774"
            ],
            "CWE": [
              "CWE-1321"
            ],
            "GHSA": [
              "GHSA-c4w7-xm78-47vh"
            ]
          },
          "packageName": "y18n",
          "proprietary": true,
          "creationTime": "2020-10-25T14:27:16.715665Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-10-25T14:24:22Z",
          "packageManager": "npm",
          "publicationTime": "2020-11-10T15:27:28Z",
          "modificationTime": "2022-10-15T01:10:30.866399Z",
          "socialTrendAlert": false,
          "from": [
            "restore-save-cache-task@1.0.0",
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "yargs@12.0.5",
            "y18n@4.0.0"
          ],
          "upgradePath": [
            false,
            "mocha@6.0.2",
            "yargs-unparser@1.5.0",
            "yargs@12.0.5",
            "y18n@4.0.1"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "y18n",
          "version": "4.0.0",
          "severityWithCritical": "high"
        }
      ],
      "upgrade": {
        "adm-zip@0.4.13": {
          "upgradeTo": "adm-zip@0.5.2",
          "upgrades": [
            "adm-zip@0.4.13"
          ],
          "vulns": [
            "SNYK-JS-ADMZIP-1065796"
          ]
        },
        "axios@0.19.0": {
          "upgradeTo": "axios@0.21.3",
          "upgrades": [
            "axios@0.19.0",
            "axios@0.19.0",
            "follow-redirects@1.5.10",
            "follow-redirects@1.5.10"
          ],
          "vulns": [
            "SNYK-JS-AXIOS-1579269",
            "SNYK-JS-AXIOS-1038255",
            "SNYK-JS-FOLLOWREDIRECTS-2332181",
            "SNYK-JS-FOLLOWREDIRECTS-2396346"
          ]
        },
        "azure-devops-node-api@7.0.0": {
          "upgradeTo": "azure-devops-node-api@10.2.2",
          "upgrades": [
            "underscore@1.8.3"
          ],
          "vulns": [
            "SNYK-JS-UNDERSCORE-1080984"
          ]
        },
        "azure-pipelines-task-lib@2.8.0": {
          "upgradeTo": "azure-pipelines-task-lib@3.3.1",
          "upgrades": [
            "minimatch@3.0.4",
            "shelljs@0.3.0"
          ],
          "vulns": [
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-SHELLJS-2332187"
          ]
        },
        "azure-pipelines-tool-lib@0.12.0": {
          "upgradeTo": "azure-pipelines-tool-lib@1.0.1",
          "upgrades": [
            "minimatch@3.0.4",
            "shelljs@0.3.0",
            "underscore@1.8.3"
          ],
          "vulns": [
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-SHELLJS-2332187",
            "SNYK-JS-UNDERSCORE-1080984"
          ]
        },
        "mocha@6.0.2": {
          "upgradeTo": "mocha@10.1.0",
          "upgrades": [
            "mocha@6.0.2",
            "minimatch@3.0.4",
            "minimist@0.0.8",
            "minimist@0.0.8",
            "yargs-parser@11.1.1",
            "ansi-regex@2.1.1",
            "js-yaml@3.12.0",
            "js-yaml@3.12.0"
          ],
          "vulns": [
            "SNYK-JS-MOCHA-2863123",
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-MINIMIST-2429795",
            "SNYK-JS-MINIMIST-559764",
            "SNYK-JS-YARGSPARSER-560381",
            "SNYK-JS-ANSIREGEX-1583908",
            "SNYK-JS-JSYAML-174129",
            "SNYK-JS-JSYAML-173999"
          ]
        },
        "shelljs@0.8.3": {
          "upgradeTo": "shelljs@0.8.5",
          "upgrades": [
            "shelljs@0.8.3"
          ],
          "vulns": [
            "SNYK-JS-SHELLJS-2332187"
          ]
        }
      },
      "patch": {
        "SNYK-JS-LODASH-567746": {
          "paths": [
            {
              "ip-address > lodash": {
                "patched": "2023-01-04T17:48:50.666Z"
              }
            },
            {
              "packaging-common > ip-address > lodash": {
                "patched": "2023-01-04T17:48:50.666Z"
              }
            },
            {
              "mocha > yargs-unparser > lodash": {
                "patched": "2023-01-04T17:48:50.666Z"
              }
            }
          ]
        }
      },
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 30,
    "projectName": "restore-save-cache-task",
    "foundProjectCount": 2,
    "displayTargetFile": "_build\\Tasks\\RestoreAndSaveCacheV1\\package.json",
    "hasUnknownVersions": false,
    "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-ADMZIP-1065796",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "credit": [
          "cthackers"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.4,
        "functions": [],
        "malicious": false,
        "moduleName": "adm-zip",
        "references": [
          {
            "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-22"
          ]
        },
        "packageName": "adm-zip",
        "proprietary": false,
        "creationTime": "2021-01-28T07:59:50.454879Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-01-28T07:59:22Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T17:04:18.109270Z",
        "modificationTime": "2021-02-15T17:04:18.111270Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "adm-zip@0.4.13"
        ],
        "upgradePath": [
          false,
          "adm-zip@0.5.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "adm-zip",
        "version": "0.4.13",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\adm-zip\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ADMZIP-1065796",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "credit": [
          "cthackers"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.4,
        "functions": [],
        "malicious": false,
        "moduleName": "adm-zip",
        "references": [
          {
            "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-22"
          ]
        },
        "packageName": "adm-zip",
        "proprietary": false,
        "creationTime": "2021-01-28T07:59:50.454879Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-01-28T07:59:22Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T17:04:18.109270Z",
        "modificationTime": "2021-02-15T17:04:18.111270Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "adm-zip@0.4.13"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "adm-zip",
        "version": "0.4.13",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\adm-zip\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-AXIOS-1038255",
        "title": "Server-Side Request Forgery (SSRF)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "Dima Ryskin"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/axios/axios/issues/3369",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99",
            "title": "GitHub Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1594",
            "title": "NPM Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-14T01:10:48.215421Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28168"
          ],
          "CWE": [
            "CWE-918"
          ],
          "NSP": [
            "NSP-1594"
          ],
          "GHSA": [
            "GHSA-4w2v-q235-vp99"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2020-11-08T09:37:44.217120Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-06T09:16:00Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-08T15:07:03Z",
        "modificationTime": "2022-09-14T01:10:48.215421Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "axios@0.19.0"
        ],
        "upgradePath": [
          false,
          "axios@0.21.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-AXIOS-1579269",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-07T13:10:40.624416Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3749"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2021-09-01T10:21:55.102099Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-01T10:17:45Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-01T16:08:42.935317Z",
        "modificationTime": "2022-10-07T13:10:40.624416Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "axios@0.19.0"
        ],
        "upgradePath": [
          false,
          "axios@0.21.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-AXIOS-1038255",
        "title": "Server-Side Request Forgery (SSRF)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "Dima Ryskin"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/axios/axios/issues/3369",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99",
            "title": "GitHub Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1594",
            "title": "NPM Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-14T01:10:48.215421Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28168"
          ],
          "CWE": [
            "CWE-918"
          ],
          "NSP": [
            "NSP-1594"
          ],
          "GHSA": [
            "GHSA-4w2v-q235-vp99"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2020-11-08T09:37:44.217120Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-06T09:16:00Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-08T15:07:03Z",
        "modificationTime": "2022-09-14T01:10:48.215421Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-AXIOS-1579269",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-07T13:10:40.624416Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3749"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2021-09-01T10:21:55.102099Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-01T10:17:45Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-01T16:08:42.935317Z",
        "modificationTime": "2022-10-07T13:10:40.624416Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "ranjit-git"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.14.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-10-29T01:10:37.731334Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0155"
          ],
          "CWE": [
            "CWE-359"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:06:36Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "modificationTime": "2022-10-29T01:10:37.731334Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [
          false,
          "axios@0.20.0",
          "follow-redirects@1.14.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.14.8"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.6,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-02-12T04:10:26.549451Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-10-27T02:41:54.426377Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0536"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-09T12:43:30Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "modificationTime": "2022-10-27T02:41:54.426377Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-cache-task@1.0.0",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [
          false,
          "axios@0.20.0",
          "follow-redirects@1.14.8"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "ranjit-git"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.14.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-10-29T01:10:37.731334Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0155"
          ],
          "CWE": [
            "CWE-359"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:06:36Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "modificationTime": "2022-10-29T01:10:37.731334Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.14.8"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.6,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-02-12T04:10:26.549451Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-10-27T02:41:54.426377Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0536"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-09T12:43:30Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "modificationTime": "2022-10-27T02:41:54.426377Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "ini@1.3.5"
        ],
        "upgradePath": [
          false,
          "ini@1.3.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\ini\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ini@1.3.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\ini\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-task-lib@3.3.1",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@1.0.1",
          "azure-pipelines-task-lib@3.3.1",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PATHPARSE-1077067",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.0.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "path-parse",
        "references": [
          {
            "url": "https://github.com/jbgutierrez/path-parse/issues/8",
            "title": "GitHub Issue 1"
          },
          {
            "url": "https://github.com/jbgutierrez/path-parse/pull/10",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-05-18T11:02:40.203327Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T18:10:59.641332Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:36:10.774253Z"
          }
        ],
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23343"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "path-parse",
        "proprietary": true,
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-02-19T15:54:01Z",
        "packageManager": "npm",
        "publicationTime": "2021-05-04T08:38:49Z",
        "modificationTime": "2022-09-01T18:10:59.641332Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "path-parse",
        "version": "1.0.6",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\path-parse\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PATHPARSE-1077067",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.0.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "path-parse",
        "references": [
          {
            "url": "https://github.com/jbgutierrez/path-parse/issues/8",
            "title": "GitHub Issue 1"
          },
          {
            "url": "https://github.com/jbgutierrez/path-parse/pull/10",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-05-18T11:02:40.203327Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T18:10:59.641332Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:36:10.774253Z"
          }
        ],
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23343"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "path-parse",
        "proprietary": true,
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-02-19T15:54:01Z",
        "packageManager": "npm",
        "publicationTime": "2021-05-04T08:38:49Z",
        "modificationTime": "2022-09-01T18:10:59.641332Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "path-parse",
        "version": "1.0.6",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\path-parse\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-task-lib@3.1.0",
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@1.0.1",
          "azure-pipelines-task-lib@3.1.0",
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "shelljs@0.8.3"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "azure-devops-node-api@7.0.0",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-devops-node-api@10.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "azure-devops-node-api@7.0.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-devops-node-api@10.1.1",
          "typed-rest-client@1.8.4",
          "underscore@1.12.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@0.13.2",
          "typed-rest-client@1.8.4",
          "underscore@1.12.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-devops-node-api@6.6.3",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "typed-rest-client@0.12.0",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "restore-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-devops-node-api@6.6.3",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\RestoreCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      }
    ],
    "ok": false,
    "dependencyCount": 71,
    "org": "global-devops-bootcamp",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1+": {
          "licenseType": "LGPL-2.1+",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0+": {
          "licenseType": "LGPL-3.0+",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "41 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-LODASH-1018905",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "credit": [
            "Liyuan Chen"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/lodash/lodash/pull/5065",
              "title": "GitHub Fix PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-09-14T01:10:48.134557Z"
            }
          ],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
          "identifiers": {
            "CVE": [
              "CVE-2020-28500"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "packageName": "lodash",
          "proprietary": true,
          "creationTime": "2020-10-16T16:48:40.985673Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-10-16T16:47:34Z",
          "packageManager": "npm",
          "publicationTime": "2021-02-15T11:50:49Z",
          "modificationTime": "2022-09-14T01:10:48.134557Z",
          "socialTrendAlert": false,
          "from": [
            "restore-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "ip-address@5.9.4",
            "lodash@4.17.15"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.15",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-LODASH-1040724",
          "title": "Command Injection",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
          "credit": [
            "Marc Hassan"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.2,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
              "title": "Vulnerable Code"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 7.2,
              "modificationTime": "2022-09-14T01:10:48.257735Z"
            }
          ],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-23337"
            ],
            "CWE": [
              "CWE-78"
            ],
            "GHSA": [
              "GHSA-35jh-r3h4-6jhm"
            ]
          },
          "packageName": "lodash",
          "proprietary": true,
          "creationTime": "2020-11-17T14:07:17.048472Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-11-17T13:02:10Z",
          "packageManager": "npm",
          "publicationTime": "2021-02-15T11:50:50Z",
          "modificationTime": "2022-09-14T01:10:48.257735Z",
          "socialTrendAlert": false,
          "from": [
            "restore-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "ip-address@5.9.4",
            "lodash@4.17.15"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.15",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-LODASH-608086",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "credit": [
            "awarau"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.17"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.17"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://hackerone.com/reports/864701",
              "title": "HackerOne Report"
            }
          ],
          "cvssDetails": [],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-1321"
            ]
          },
          "packageName": "lodash",
          "proprietary": false,
          "creationTime": "2020-08-21T12:52:58.443440Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-08-21T10:34:29Z",
          "packageManager": "npm",
          "publicationTime": "2020-08-21T12:53:03Z",
          "modificationTime": "2022-08-25T12:14:41.622393Z",
          "socialTrendAlert": false,
          "from": [
            "restore-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "ip-address@5.9.4",
            "lodash@4.17.15"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.15",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-PATHPARSE-1077067",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "credit": [
            "Yeting Li"
          ],
          "semver": {
            "vulnerable": [
              "<1.0.7"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "1.0.7"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "path-parse",
          "references": [
            {
              "url": "https://github.com/jbgutierrez/path-parse/issues/8",
              "title": "GitHub Issue 1"
            },
            {
              "url": "https://github.com/jbgutierrez/path-parse/pull/10",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "SUSE",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-05-18T11:02:40.203327Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-09-01T18:10:59.641332Z"
            },
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-01-03T16:36:10.774253Z"
            }
          ],
          "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-23343"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "packageName": "path-parse",
          "proprietary": true,
          "creationTime": "2021-02-19T16:00:22.449519Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2021-02-19T15:54:01Z",
          "packageManager": "npm",
          "publicationTime": "2021-05-04T08:38:49Z",
          "modificationTime": "2022-09-01T18:10:59.641332Z",
          "socialTrendAlert": false,
          "from": [
            "restore-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "shelljs@0.8.3",
            "rechoir@0.6.2",
            "resolve@1.9.0",
            "path-parse@1.0.6"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "path-parse",
          "version": "1.0.6",
          "severityWithCritical": "medium"
        }
      ],
      "upgrade": {
        "adm-zip@0.4.13": {
          "upgradeTo": "adm-zip@0.5.2",
          "upgrades": [
            "adm-zip@0.4.13"
          ],
          "vulns": [
            "SNYK-JS-ADMZIP-1065796"
          ]
        },
        "axios@0.19.0": {
          "upgradeTo": "axios@0.21.3",
          "upgrades": [
            "axios@0.19.0",
            "axios@0.19.0",
            "follow-redirects@1.5.10",
            "follow-redirects@1.5.10"
          ],
          "vulns": [
            "SNYK-JS-AXIOS-1579269",
            "SNYK-JS-AXIOS-1038255",
            "SNYK-JS-FOLLOWREDIRECTS-2332181",
            "SNYK-JS-FOLLOWREDIRECTS-2396346"
          ]
        },
        "azure-devops-node-api@7.0.0": {
          "upgradeTo": "azure-devops-node-api@10.2.2",
          "upgrades": [
            "underscore@1.8.3"
          ],
          "vulns": [
            "SNYK-JS-UNDERSCORE-1080984"
          ]
        },
        "azure-pipelines-task-lib@2.8.0": {
          "upgradeTo": "azure-pipelines-task-lib@3.3.1",
          "upgrades": [
            "minimatch@3.0.4",
            "shelljs@0.3.0"
          ],
          "vulns": [
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-SHELLJS-2332187"
          ]
        },
        "azure-pipelines-tool-lib@0.12.0": {
          "upgradeTo": "azure-pipelines-tool-lib@1.0.1",
          "upgrades": [
            "minimatch@3.0.4",
            "shelljs@0.3.0",
            "underscore@1.8.3"
          ],
          "vulns": [
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-SHELLJS-2332187",
            "SNYK-JS-UNDERSCORE-1080984"
          ]
        },
        "ini@1.3.5": {
          "upgradeTo": "ini@1.3.6",
          "upgrades": [
            "ini@1.3.5"
          ],
          "vulns": [
            "SNYK-JS-INI-1048974"
          ]
        },
        "shelljs@0.8.3": {
          "upgradeTo": "shelljs@0.8.5",
          "upgrades": [
            "shelljs@0.8.3"
          ],
          "vulns": [
            "SNYK-JS-SHELLJS-2332187"
          ]
        }
      },
      "patch": {
        "SNYK-JS-LODASH-567746": {
          "paths": [
            {
              "ip-address > lodash": {
                "patched": "2023-01-04T17:48:52.672Z"
              }
            },
            {
              "packaging-common > ip-address > lodash": {
                "patched": "2023-01-04T17:48:52.672Z"
              }
            }
          ]
        }
      },
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 14,
    "projectName": "restore-cache-task",
    "foundProjectCount": 2,
    "displayTargetFile": "_build\\Tasks\\RestoreCacheV1\\package.json",
    "hasUnknownVersions": false,
    "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-ADMZIP-1065796",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "credit": [
          "cthackers"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.4,
        "functions": [],
        "malicious": false,
        "moduleName": "adm-zip",
        "references": [
          {
            "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-22"
          ]
        },
        "packageName": "adm-zip",
        "proprietary": false,
        "creationTime": "2021-01-28T07:59:50.454879Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-01-28T07:59:22Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T17:04:18.109270Z",
        "modificationTime": "2021-02-15T17:04:18.111270Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "adm-zip@0.4.13"
        ],
        "upgradePath": [
          false,
          "adm-zip@0.5.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "adm-zip",
        "version": "0.4.13",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\adm-zip\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-ADMZIP-1065796",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "credit": [
          "cthackers"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.4,
        "functions": [],
        "malicious": false,
        "moduleName": "adm-zip",
        "references": [
          {
            "url": "https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-22"
          ]
        },
        "packageName": "adm-zip",
        "proprietary": false,
        "creationTime": "2021-01-28T07:59:50.454879Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-01-28T07:59:22Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T17:04:18.109270Z",
        "modificationTime": "2021-02-15T17:04:18.111270Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "adm-zip@0.4.13"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "adm-zip",
        "version": "0.4.13",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\adm-zip\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-AXIOS-1038255",
        "title": "Server-Side Request Forgery (SSRF)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "Dima Ryskin"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/axios/axios/issues/3369",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99",
            "title": "GitHub Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1594",
            "title": "NPM Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-14T01:10:48.215421Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28168"
          ],
          "CWE": [
            "CWE-918"
          ],
          "NSP": [
            "NSP-1594"
          ],
          "GHSA": [
            "GHSA-4w2v-q235-vp99"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2020-11-08T09:37:44.217120Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-06T09:16:00Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-08T15:07:03Z",
        "modificationTime": "2022-09-14T01:10:48.215421Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "axios@0.19.0"
        ],
        "upgradePath": [
          false,
          "axios@0.21.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-AXIOS-1579269",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-07T13:10:40.624416Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3749"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2021-09-01T10:21:55.102099Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-01T10:17:45Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-01T16:08:42.935317Z",
        "modificationTime": "2022-10-07T13:10:40.624416Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "axios@0.19.0"
        ],
        "upgradePath": [
          false,
          "axios@0.21.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-AXIOS-1038255",
        "title": "Server-Side Request Forgery (SSRF)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "Dima Ryskin"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/axios/axios/issues/3369",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/advisories/GHSA-4w2v-q235-vp99",
            "title": "GitHub Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1594",
            "title": "NPM Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-09-14T01:10:48.215421Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Server-Side Request Forgery (SSRF). An attacker is able to bypass a proxy by providing a URL that responds with a redirect to a restricted host or IP address.\n## Remediation\nUpgrade `axios` to version 0.21.1 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/c7329fefc890050edd51e40e469a154d0117fc55)\n- [GitHub Issue](https://github.com/axios/axios/issues/3369)\n- [GitHub Security Advisory](https://github.com/advisories/GHSA-4w2v-q235-vp99)\n- [NPM Advisory](https://www.npmjs.com/advisories/1594)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28168"
          ],
          "CWE": [
            "CWE-918"
          ],
          "NSP": [
            "NSP-1594"
          ],
          "GHSA": [
            "GHSA-4w2v-q235-vp99"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2020-11-08T09:37:44.217120Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-06T09:16:00Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-08T15:07:03Z",
        "modificationTime": "2022-09-14T01:10:48.215421Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-AXIOS-1579269",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "ready-research"
        ],
        "semver": {
          "vulnerable": [
            "<0.21.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.21.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "axios",
        "references": [
          {
            "url": "https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-07T13:10:40.624416Z"
          }
        ],
        "description": "## Overview\n[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `trim` function.\r\n\r\n## PoC\r\n```\r\n// poc.js\r\n\r\nvar {trim} = require(\"axios/lib/utils\");\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar time = Date.now();\r\ntrim(build_blank(50000))\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"time_cost: \" + time_cost)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `axios` to version 0.21.3 or higher.\n## References\n- [GitHub Commit](https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3749"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "axios",
        "proprietary": false,
        "creationTime": "2021-09-01T10:21:55.102099Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-01T10:17:45Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-01T16:08:42.935317Z",
        "modificationTime": "2022-10-07T13:10:40.624416Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "axios",
        "version": "0.19.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\axios\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "ranjit-git"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.14.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-10-29T01:10:37.731334Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0155"
          ],
          "CWE": [
            "CWE-359"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:06:36Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "modificationTime": "2022-10-29T01:10:37.731334Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [
          false,
          "axios@0.20.0",
          "follow-redirects@1.14.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.14.8"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.6,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-02-12T04:10:26.549451Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-10-27T02:41:54.426377Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0536"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-09T12:43:30Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "modificationTime": "2022-10-27T02:41:54.426377Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "save-cache-task@1.0.0",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [
          false,
          "axios@0.20.0",
          "follow-redirects@1.14.8"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2332181",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P",
        "credit": [
          "ranjit-git"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.14.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-10-29T01:10:37.731334Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking the cookie header to a third party site in the process of fetching a remote URL with the cookie in the request body. If the response contains a `location` header, it will follow the redirect to another URL of a potentially malicious actor, to which the cookie would be exposed.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.7 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/8b347cbcef7c7b72a6e9be20f5710c17d6163c22)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0155"
          ],
          "CWE": [
            "CWE-359"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-01-11T12:27:16.635235Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:06:36Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:36.149349Z",
        "modificationTime": "2022-10-29T01:10:37.731334Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:A/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.8"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.14.8"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.6,
        "functions": [],
        "malicious": false,
        "moduleName": "follow-redirects",
        "references": [
          {
            "url": "https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-02-12T04:10:26.549451Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-10-27T02:41:54.426377Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n## Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n## References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0536"
          ],
          "CWE": [
            "CWE-200"
          ]
        },
        "packageName": "follow-redirects",
        "proprietary": false,
        "creationTime": "2022-02-09T13:37:15.331538Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-09T12:43:30Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-09T17:20:22.054220Z",
        "modificationTime": "2022-10-27T02:41:54.426377Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "axios@0.19.0",
          "follow-redirects@1.5.10"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "follow-redirects",
        "version": "1.5.10",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\follow-redirects\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "ini@1.3.5"
        ],
        "upgradePath": [
          false,
          "ini@1.3.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\ini\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ini@1.3.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\ini\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [
          false,
          "ip-address@5.9.4",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "extraneous"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "ip-address@5.9.4",
          "lodash@4.17.15"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.17.15",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-task-lib@3.3.1",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@1.0.1",
          "azure-pipelines-task-lib@3.3.1",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.4"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3",
          "glob@7.1.3",
          "minimatch@3.0.4"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PATHPARSE-1077067",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.0.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "path-parse",
        "references": [
          {
            "url": "https://github.com/jbgutierrez/path-parse/issues/8",
            "title": "GitHub Issue 1"
          },
          {
            "url": "https://github.com/jbgutierrez/path-parse/pull/10",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-05-18T11:02:40.203327Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T18:10:59.641332Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:36:10.774253Z"
          }
        ],
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23343"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "path-parse",
        "proprietary": true,
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-02-19T15:54:01Z",
        "packageManager": "npm",
        "publicationTime": "2021-05-04T08:38:49Z",
        "modificationTime": "2022-09-01T18:10:59.641332Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "path-parse",
        "version": "1.0.6",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\path-parse\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PATHPARSE-1077067",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Yeting Li"
        ],
        "semver": {
          "vulnerable": [
            "<1.0.7"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.0.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "path-parse",
        "references": [
          {
            "url": "https://github.com/jbgutierrez/path-parse/issues/8",
            "title": "GitHub Issue 1"
          },
          {
            "url": "https://github.com/jbgutierrez/path-parse/pull/10",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-05-18T11:02:40.203327Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T18:10:59.641332Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:36:10.774253Z"
          }
        ],
        "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23343"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "path-parse",
        "proprietary": true,
        "creationTime": "2021-02-19T16:00:22.449519Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-02-19T15:54:01Z",
        "packageManager": "npm",
        "publicationTime": "2021-05-04T08:38:49Z",
        "modificationTime": "2022-09-01T18:10:59.641332Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3",
          "rechoir@0.6.2",
          "resolve@1.9.0",
          "path-parse@1.0.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "path-parse",
        "version": "1.0.6",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\path-parse\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-task-lib@3.1.0",
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@1.0.1",
          "azure-pipelines-task-lib@3.1.0",
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "azure-pipelines-task-lib@2.8.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\azure-pipelines-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "shelljs@0.8.3"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "shelljs@0.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "azure-devops-node-api@7.0.0",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-devops-node-api@10.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "azure-devops-node-api@7.0.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-devops-node-api@10.1.1",
          "typed-rest-client@1.8.4",
          "underscore@1.12.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "azure-pipelines-tool-lib@0.12.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [
          false,
          "azure-pipelines-tool-lib@0.13.2",
          "typed-rest-client@1.8.4",
          "underscore@1.12.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-devops-node-api@6.6.3",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "typed-rest-client@0.12.0",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-pipelines-tool-lib@0.12.0",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-UNDERSCORE-1080984",
        "title": "Arbitrary Code Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera (@d3lla)"
        ],
        "semver": {
          "vulnerable": [
            ">=1.13.0-0 <1.13.0-2",
            ">=1.3.2 <1.12.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.13.0-2",
          "1.12.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.5,
        "functions": [],
        "malicious": false,
        "moduleName": "underscore",
        "references": [
          {
            "url": "https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71",
            "title": "GitHub Additional Information"
          },
          {
            "url": "https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-01-03T16:36:04.101845Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-10-25T21:48:12.836942Z"
          }
        ],
        "description": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23358"
          ],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-cf4h-3jhx-xvhq"
          ]
        },
        "packageName": "underscore",
        "proprietary": true,
        "creationTime": "2021-03-02T19:52:38.855110Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-02T19:51:03Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-29T14:54:59Z",
        "modificationTime": "2022-11-09T15:25:01.208322Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "save-cache-task@1.0.0",
          "packaging-common@1.0.1",
          "azure-devops-node-api@6.6.3",
          "typed-rest-client@1.0.9",
          "underscore@1.8.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "underscore",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72\\_build\\Tasks\\SaveCacheV1\\node_modules\\underscore\\package.json",
        "parentDepType": "prod"
      }
    ],
    "ok": false,
    "dependencyCount": 71,
    "org": "global-devops-bootcamp",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1+": {
          "licenseType": "LGPL-2.1+",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0+": {
          "licenseType": "LGPL-3.0+",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "41 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-LODASH-1018905",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "credit": [
            "Liyuan Chen"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/lodash/lodash/pull/5065",
              "title": "GitHub Fix PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-09-14T01:10:48.134557Z"
            }
          ],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
          "identifiers": {
            "CVE": [
              "CVE-2020-28500"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "packageName": "lodash",
          "proprietary": true,
          "creationTime": "2020-10-16T16:48:40.985673Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-10-16T16:47:34Z",
          "packageManager": "npm",
          "publicationTime": "2021-02-15T11:50:49Z",
          "modificationTime": "2022-09-14T01:10:48.134557Z",
          "socialTrendAlert": false,
          "from": [
            "save-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "ip-address@5.9.4",
            "lodash@4.17.15"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.15",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-LODASH-1040724",
          "title": "Command Injection",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
          "credit": [
            "Marc Hassan"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.21"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.21"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.2,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
              "title": "Vulnerable Code"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 7.2,
              "modificationTime": "2022-09-14T01:10:48.257735Z"
            }
          ],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-23337"
            ],
            "CWE": [
              "CWE-78"
            ],
            "GHSA": [
              "GHSA-35jh-r3h4-6jhm"
            ]
          },
          "packageName": "lodash",
          "proprietary": true,
          "creationTime": "2020-11-17T14:07:17.048472Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-11-17T13:02:10Z",
          "packageManager": "npm",
          "publicationTime": "2021-02-15T11:50:50Z",
          "modificationTime": "2022-09-14T01:10:48.257735Z",
          "socialTrendAlert": false,
          "from": [
            "save-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "ip-address@5.9.4",
            "lodash@4.17.15"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.15",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-LODASH-608086",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
          "credit": [
            "awarau"
          ],
          "semver": {
            "vulnerable": [
              "<4.17.17"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "4.17.17"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.3,
          "functions": [],
          "malicious": false,
          "moduleName": "lodash",
          "references": [
            {
              "url": "https://hackerone.com/reports/864701",
              "title": "HackerOne Report"
            }
          ],
          "cvssDetails": [],
          "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-1321"
            ]
          },
          "packageName": "lodash",
          "proprietary": false,
          "creationTime": "2020-08-21T12:52:58.443440Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2020-08-21T10:34:29Z",
          "packageManager": "npm",
          "publicationTime": "2020-08-21T12:53:03Z",
          "modificationTime": "2022-08-25T12:14:41.622393Z",
          "socialTrendAlert": false,
          "from": [
            "save-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "ip-address@5.9.4",
            "lodash@4.17.15"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "lodash",
          "version": "4.17.15",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-PATHPARSE-1077067",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
          "credit": [
            "Yeting Li"
          ],
          "semver": {
            "vulnerable": [
              "<1.0.7"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "1.0.7"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "path-parse",
          "references": [
            {
              "url": "https://github.com/jbgutierrez/path-parse/issues/8",
              "title": "GitHub Issue 1"
            },
            {
              "url": "https://github.com/jbgutierrez/path-parse/pull/10",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "SUSE",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-05-18T11:02:40.203327Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-09-01T18:10:59.641332Z"
            },
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-01-03T16:36:10.774253Z"
            }
          ],
          "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-23343"
            ],
            "CWE": [
              "CWE-400"
            ]
          },
          "packageName": "path-parse",
          "proprietary": true,
          "creationTime": "2021-02-19T16:00:22.449519Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2021-02-19T15:54:01Z",
          "packageManager": "npm",
          "publicationTime": "2021-05-04T08:38:49Z",
          "modificationTime": "2022-09-01T18:10:59.641332Z",
          "socialTrendAlert": false,
          "from": [
            "save-cache-task@1.0.0",
            "packaging-common@1.0.1",
            "shelljs@0.8.3",
            "rechoir@0.6.2",
            "resolve@1.9.0",
            "path-parse@1.0.6"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "path-parse",
          "version": "1.0.6",
          "severityWithCritical": "medium"
        }
      ],
      "upgrade": {
        "adm-zip@0.4.13": {
          "upgradeTo": "adm-zip@0.5.2",
          "upgrades": [
            "adm-zip@0.4.13"
          ],
          "vulns": [
            "SNYK-JS-ADMZIP-1065796"
          ]
        },
        "axios@0.19.0": {
          "upgradeTo": "axios@0.21.3",
          "upgrades": [
            "axios@0.19.0",
            "axios@0.19.0",
            "follow-redirects@1.5.10",
            "follow-redirects@1.5.10"
          ],
          "vulns": [
            "SNYK-JS-AXIOS-1579269",
            "SNYK-JS-AXIOS-1038255",
            "SNYK-JS-FOLLOWREDIRECTS-2332181",
            "SNYK-JS-FOLLOWREDIRECTS-2396346"
          ]
        },
        "azure-devops-node-api@7.0.0": {
          "upgradeTo": "azure-devops-node-api@10.2.2",
          "upgrades": [
            "underscore@1.8.3"
          ],
          "vulns": [
            "SNYK-JS-UNDERSCORE-1080984"
          ]
        },
        "azure-pipelines-task-lib@2.8.0": {
          "upgradeTo": "azure-pipelines-task-lib@3.3.1",
          "upgrades": [
            "minimatch@3.0.4",
            "shelljs@0.3.0"
          ],
          "vulns": [
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-SHELLJS-2332187"
          ]
        },
        "azure-pipelines-tool-lib@0.12.0": {
          "upgradeTo": "azure-pipelines-tool-lib@1.0.1",
          "upgrades": [
            "minimatch@3.0.4",
            "shelljs@0.3.0",
            "underscore@1.8.3"
          ],
          "vulns": [
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-SHELLJS-2332187",
            "SNYK-JS-UNDERSCORE-1080984"
          ]
        },
        "ini@1.3.5": {
          "upgradeTo": "ini@1.3.6",
          "upgrades": [
            "ini@1.3.5"
          ],
          "vulns": [
            "SNYK-JS-INI-1048974"
          ]
        },
        "shelljs@0.8.3": {
          "upgradeTo": "shelljs@0.8.5",
          "upgrades": [
            "shelljs@0.8.3"
          ],
          "vulns": [
            "SNYK-JS-SHELLJS-2332187"
          ]
        }
      },
      "patch": {
        "SNYK-JS-LODASH-567746": {
          "paths": [
            {
              "ip-address > lodash": {
                "patched": "2023-01-04T17:48:53.333Z"
              }
            },
            {
              "packaging-common > ip-address > lodash": {
                "patched": "2023-01-04T17:48:53.333Z"
              }
            }
          ]
        }
      },
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 14,
    "projectName": "save-cache-task",
    "foundProjectCount": 2,
    "displayTargetFile": "_build\\Tasks\\SaveCacheV1\\package.json",
    "hasUnknownVersions": false,
    "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\1ESLighthouseEng\\PipelineArtifactCaching\\1.0.72"
  }
]
