{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "javascript/InsufficientPostmessageValidation",
              "name": "InsufficientPostmessageValidation",
              "shortDescription": {
                "text": "Insufficient postMessage Validation"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "markdown": "\n## Details\n\npostMessage is a feature to perform cross-origin communication between JavaScript Window objects. This can be done by:\n\n* The sender using the `targetWindow.postMessage(message, targetOrigin)` to send a message to the `targetWindow` but only if the origin in that window matches `targetOrigin` (or if targetOrigin is set to the special value `*`);\n\n* The receiver listening for the message event in the window object.\n\nHowever, if no validation is done by the receiver, this could allow any window to send arbitrary data to the handler. This vulnerability could be leveraged by an attacker to disclose sensitive data to a malicious origin, or perform actions on a vicitim's behalf.\n\nExample:\n\n```\n\nwindow.addEventListener(\"message\", (event) => {\n    // DANGEROUS: No validation of origin\n    doStuff(event.data);\n});\n\n```\n\n### Best practices for prevention\n* Adopt a zero-trust model in which all input is considered potentially suspect.\n* Specify the targetOrigin instead of designating a wildcard `*`.\n\nExample:\n\n```\nwindow.addEventListener(\"message\", (event) => {\n    if (event.origin !== \"http://example.org\") // SAFE: origin checked\n        return;\n\n    console.log(event.data)\n});\n```\n\n### References\n\n* [Introduction to postMessage() Vulnerabilities](https://blog.yeswehack.com/yeswerhackers/introduction-postmessage-vulnerabilities/)",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [],
                "exampleCommitDescriptions": [],
                "precision": "very-high",
                "repoDatasetSize": 0,
                "cwe": [
                  "CWE-20"
                ]
              }
            },
            {
              "id": "javascript/NoHardcodedPasswords",
              "name": "NoHardcodedPasswords",
              "shortDescription": {
                "text": "Use of Hardcoded Credentials"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "help": {
                "markdown": "\n## Details\n\nDevelopers may use hardcoded credentials for convenience when coding in order to simplify their workflow. While they are responsible for removing these before production, occasionally this task may fall through the cracks. This also becomes a maintenance challenge when credentials are re-used across multiple applications.\n\nOnce attackers gain access, they may take advantage of privilege level to remove or alter data, take down a site or app, or hold any of the above for ransom. The risk across multiple similar projects is even greater. If code containing the credentials is reused across multiple projects, they will all be compromised.\n\n### Best practices for prevention\n* Plan software architecture such that keys and passwords are always stored outside the code, wherever possible.\n* Plan encryption into software architecture for all credential information and ensure proper handling of keys, credentials, and passwords.\n* Prompt for a secure password on first login rather than hard-code a default password.\n* If a hardcoded password or credential must be used, limit its use, for example, to system console users rather than via the network.\n* Use strong hashes for inbound password authentication, ideally with randomly assigned salts to increase the difficulty level in case of brute-force attack.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "javascript"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/csprance/MisRCON/commit/72964f54abde81f9f40d88ebe16b583ebfec8904?diff=split#diff-3733a6fa6d50cc4d78c76e60f128404eL11",
                    "lines": [
                      {
                        "line": "ip: 'loading',",
                        "lineNumber": 8,
                        "lineChange": "removed"
                      },
                      {
                        "line": "ip: '',",
                        "lineNumber": 8,
                        "lineChange": "added"
                      },
                      {
                        "line": "port: 0,",
                        "lineNumber": 9,
                        "lineChange": "none"
                      },
                      {
                        "line": "password: 'THisIsCool324HashMan',",
                        "lineNumber": 10,
                        "lineChange": "removed"
                      },
                      {
                        "line": "password: '',",
                        "lineNumber": 10,
                        "lineChange": "added"
                      },
                      {
                        "line": "active: true,",
                        "lineNumber": 11,
                        "lineChange": "none"
                      },
                      {
                        "line": "selfHosted: false,",
                        "lineNumber": 12,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/bradwestfall/house-rules/commit/f96c3465d59030b2d853574e01f58d2d8fef4556?diff=split#diff-c90d23fc26d6eeec89e1d77807b6bbbbL21",
                    "lines": [
                      {
                        "line": " ",
                        "lineNumber": 17,
                        "lineChange": "none"
                      },
                      {
                        "line": "let errors = loginFormSchema.validate({",
                        "lineNumber": 18,
                        "lineChange": "none"
                      },
                      {
                        "line": "  email: 'test@test.com',",
                        "lineNumber": 19,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  password: 'somepassword'",
                        "lineNumber": 20,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  password: undefined",
                        "lineNumber": 19,
                        "lineChange": "added"
                      },
                      {
                        "line": "})",
                        "lineNumber": 21,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/Madmous/madClones/commit/31843ab238a5d3d988c360bc3b01b719cc588c9f?diff=split#diff-374c156c3cd1b9952bee7d8064382f69L26",
                    "lines": [
                      {
                        "line": "  email: 'testEmail@email.com',",
                        "lineNumber": 23,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  email: 'test@email.com',",
                        "lineNumber": 23,
                        "lineChange": "added"
                      },
                      {
                        "line": "  application: 'test application',",
                        "lineNumber": 24,
                        "lineChange": "none"
                      },
                      {
                        "line": "  password: 'testPassword'",
                        "lineNumber": 25,
                        "lineChange": "removed"
                      },
                      {
                        "line": "  password: 'test'",
                        "lineNumber": 25,
                        "lineChange": "added"
                      },
                      {
                        "line": "});",
                        "lineNumber": 26,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "Fixing type errors in tests",
                  "This commit disables the password change tests.",
                  "Mock api() tests"
                ],
                "precision": "very-high",
                "repoDatasetSize": 522,
                "cwe": [
                  "CWE-798",
                  "CWE-259"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "javascript/InsufficientPostmessageValidation",
          "ruleIndex": 0,
          "level": "note",
          "message": {
            "text": "The origin of the received message is not checked. This means any site (even malicious) can send message to this window. If you don't expect this, consider checking the origin of sender.",
            "markdown": "The origin of the received message is not checked. This means any site (even malicious) can send message to this window. If you don't expect this, consider checking the origin of sender.",
            "arguments": []
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/VSS.SDK.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 655,
                  "endLine": 655,
                  "startColumn": 65,
                  "endColumn": 70
                }
              }
            }
          ],
          "fingerprints": {
            "0": "9c99c033f97d57235420d334c8f492d95ee6e1540265e53c629490b7d4c82b81",
            "1": "cbabde2c.4773f344.607187b5.c559ebce.d9bf5fbd.f681b7b7.83265159.3cee0341.9194119a.4773f344.607187b5.c559ebce.d9bf5fbd.f681b7b7.83265159.1db0a836"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/VSS.SDK.js",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 655,
                            "endLine": 655,
                            "startColumn": 65,
                            "endColumn": 70
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 215,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              }
            ]
          }
        },
        {
          "ruleId": "javascript/NoHardcodedPasswords",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Do not hardcode passwords in code. Found hardcoded password used in v_SIGNKEY_PASSPHRASE.",
            "markdown": "Do not hardcode passwords in code. Found hardcoded password used in {0}.",
            "arguments": [
              "[v_SIGNKEY_PASSPHRASE](0)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/create-project/create-project.tsx",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 69,
                  "endLine": 69,
                  "startColumn": 5,
                  "endColumn": 25
                }
              }
            }
          ],
          "fingerprints": {
            "0": "0f117b100f86edc535be457afb3f737f222751d9518f006ae444cc9df82bf7a3",
            "1": "4cc48959.3f481afb.21371afe.e052b9a9.79a7d027.fcf3002d.738dc165.1757260f.4cc48959.3f481afb.21371afe.e052b9a9.79a7d027.fcf3002d.738dc165.1757260f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/create-project/create-project.tsx",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 69,
                            "endLine": 69,
                            "startColumn": 5,
                            "endColumn": 25
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 565,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 1,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 2,
            "isSupported": true,
            "lang": "HTML"
          },
          {
            "files": 3,
            "isSupported": true,
            "lang": "JavaScript"
          },
          {
            "files": 4,
            "isSupported": true,
            "lang": "TypeScript"
          }
        ]
      }
    }
  ]
}
