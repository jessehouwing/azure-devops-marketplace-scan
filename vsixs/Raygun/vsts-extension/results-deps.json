{
  "vulnerabilities": [
    {
      "id": "SNYK-JS-HAWK-2808852",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:N/A:H",
      "credit": [
        "JFrog"
      ],
      "semver": {
        "vulnerable": [
          "<9.0.1"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "9.0.1"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.4,
      "functions": [],
      "malicious": false,
      "moduleName": "hawk",
      "references": [
        {
          "url": "https://github.com/mozilla/hawk/pull/286/commits/ade134119bf1fdc4909d00f5a952c966f0075ad3",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/mozilla/hawk/pull/286",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-05-17T01:11:11.251089Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-10-27T05:00:53.712336Z"
        }
      ],
      "description": "## Overview\n[hawk](https://github.com/hueniverse/hawk) is a library for the HTTP Hawk Authentication Scheme.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in header parsing where each added character in the attacker's input increases the computation time exponentially.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hawk` to version 9.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/mozilla/hawk/pull/286/commits/ade134119bf1fdc4909d00f5a952c966f0075ad3)\n- [GitHub PR](https://github.com/mozilla/hawk/pull/286)\n",
      "identifiers": {
        "CVE": [
          "CVE-2022-29167"
        ],
        "CWE": [
          "CWE-1333"
        ],
        "GHSA": [
          "GHSA-44pw-h2cw-w3vq"
        ]
      },
      "packageName": "hawk",
      "proprietary": false,
      "creationTime": "2022-05-06T06:28:14.300336Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-05-06T06:18:15Z",
      "packageManager": "npm",
      "publicationTime": "2022-05-06T14:22:54Z",
      "modificationTime": "2022-10-27T05:00:53.712336Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "hawk@3.1.3"
      ],
      "upgradePath": [
        false,
        "request@2.87.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "hawk",
      "version": "3.1.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\hawk\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-ISMYJSONVALID-597165",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "credit": [
        "chalker"
      ],
      "semver": {
        "vulnerable": [
          "<2.20.2"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.20.2"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "moduleName": "is-my-json-valid",
      "references": [
        {
          "url": "https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb",
          "title": "GitHub Commit"
        },
        {
          "url": "https://hackerone.com/reports/909757",
          "title": "HackerOne Report"
        }
      ],
      "cvssDetails": [],
      "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `style` format. \r\n\r\n##PoC\r\n```\r\nconst imjv = require('is-my-json-valid')\r\nconst validate = imjv({ maxLength: 100, format: 'style' })\r\nconsole.log(validate(' '.repeat(1e4)))\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb)\n- [HackerOne Report](https://hackerone.com/reports/909757)\n",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "packageName": "is-my-json-valid",
      "proprietary": false,
      "creationTime": "2020-08-02T12:09:52.577067Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-07-31T17:13:38Z",
      "packageManager": "npm",
      "publicationTime": "2020-08-02T15:04:47.405171Z",
      "modificationTime": "2020-08-02T15:04:47.420926Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.15.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.20.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "is-my-json-valid",
      "version": "2.15.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\is-my-json-valid\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-ISMYJSONVALID-597167",
      "title": "Arbitrary Code Execution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "credit": [
        "chalker"
      ],
      "semver": {
        "vulnerable": [
          "<2.20.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "2.20.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.3,
      "functions": [],
      "malicious": false,
      "moduleName": "is-my-json-valid",
      "references": [
        {
          "url": "https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d",
          "title": "GitHub Commit"
        },
        {
          "url": "https://hackerone.com/reports/894308",
          "title": "HackerOne Report"
        }
      ],
      "cvssDetails": [],
      "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution via the `formatName` function.\r\n\r\n##PoC\r\n```const validator = require('is-my-json-valid')\r\nconst schema = {\r\n  type: 'object',\r\n  properties: {\r\n    'x[console.log(process.mainModule.require(`child_process`).execSync(`cat /etc/passwd`).toString(`utf-8`))]': {\r\n      required: true,\r\n      type:'string'\r\n    }\r\n  },\r\n}\r\nvar validate = validator(schema);\r\nvalidate({})\r\n```\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d)\n- [HackerOne Report](https://hackerone.com/reports/894308)\n",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-94"
        ]
      },
      "packageName": "is-my-json-valid",
      "proprietary": false,
      "creationTime": "2020-08-02T12:14:47.006233Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-07-31T17:14:47Z",
      "packageManager": "npm",
      "publicationTime": "2020-08-02T15:04:45.880122Z",
      "modificationTime": "2020-08-02T15:04:45.893491Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.15.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.20.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "is-my-json-valid",
      "version": "2.15.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\is-my-json-valid\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:is-my-json-valid:20180214",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
      "credit": [
        "Jamie Davis"
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.17.2"
        ]
      },
      "exploit": "Functional",
      "fixedIn": [
        "1.4.1",
        "2.17.2"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "low",
      "cvssScore": 3.7,
      "functions": [],
      "malicious": false,
      "moduleName": "is-my-json-valid",
      "references": [
        {
          "url": "https://github.com/mafintosh/is-my-json-valid/commit/b3051b277f7caa08cd2edc6f74f50aeda65d2976",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/mafintosh/is-my-json-valid/pull/159",
          "title": "GitHub PR"
        },
        {
          "url": "https://hackerone.com/reports/317548",
          "title": "Hackerone Report"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-01-03T16:14:16.533769Z"
        }
      ],
      "description": "## Overview\r\n[`is-my-json-valid`](https://www.npmjs.com/package/is-my-json-valid) is a universal validation plugin.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`/^\\S+@\\S+$/`) in order to validate emails. This can cause an impact of about 10 seconds matching time for data 90K characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 13th, 2018 - Initial Disclosure to package owner\r\n* Feb 14th, 2018 - Initial Response from package owner\r\n* Feb 14th, 2018 - Fix issued\r\n* Feb 15th, 2018 - Vulnerability published\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `is-my-json-valid` to version 2.17.2, 1.4.1 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/mafintosh/is-my-json-valid/pull/159)\r\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/b3051b277f7caa08cd2edc6f74f50aeda65d2976)",
      "identifiers": {
        "CVE": [
          "CVE-2018-1107"
        ],
        "CWE": [
          "CWE-185",
          "CWE-400"
        ],
        "NSP": [
          "572"
        ],
        "GHSA": [
          "GHSA-4x7c-cx64-49w8"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-ISMYJSONVALID-10887"
        ]
      },
      "packageName": "is-my-json-valid",
      "proprietary": true,
      "creationTime": "2018-02-15T14:36:50Z",
      "functions_new": [],
      "alternativeIds": [
        "SNYK-JS-ISMYJSONVALID-10887"
      ],
      "disclosureTime": "2018-02-13T20:39:06Z",
      "packageManager": "npm",
      "publicationTime": "2018-02-15T19:52:28Z",
      "modificationTime": "2022-01-03T16:14:16.533769Z",
      "socialTrendAlert": false,
      "severityWithCritical": "low",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.15.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.17.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "is-my-json-valid",
      "version": "2.15.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\is-my-json-valid\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-JSONPOINTER-1577288",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "credit": [
        "Alessio Della Libera of Snyk Research Team"
      ],
      "semver": {
        "vulnerable": [
          "<5.0.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "5.0.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.6,
      "functions": [],
      "malicious": false,
      "moduleName": "jsonpointer",
      "references": [
        {
          "url": "https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/janl/node-jsonpointer/pull/51",
          "title": "GitHub PR"
        },
        {
          "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
          "title": "Snyk Blog"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "critical",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "modificationTime": "2022-01-03T16:36:17.235470Z"
        }
      ],
      "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\r\n\r\n### PoC\r\n\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\n\r\n// jsonpointer.set({}, ['__proto__', '__proto__', 'polluted'], 'yes');\r\n// console.log(polluted); // ReferenceError: polluted is not defined\r\n\r\njsonpointer.set({}, [['__proto__'], ['__proto__'], 'polluted'], 'yes');\r\nconsole.log(polluted); // yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 5.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4)\n- [GitHub PR](https://github.com/janl/node-jsonpointer/pull/51)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
      "identifiers": {
        "CVE": [
          "CVE-2021-23807"
        ],
        "CWE": [
          "CWE-1321"
        ]
      },
      "packageName": "jsonpointer",
      "proprietary": true,
      "creationTime": "2021-08-31T17:20:26.792975Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-08-31T17:19:51Z",
      "packageManager": "npm",
      "publicationTime": "2021-11-03T16:34:28Z",
      "modificationTime": "2022-01-03T16:36:17.235470Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.15.0",
        "jsonpointer@4.0.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.20.6",
        "jsonpointer@5.0.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "jsonpointer",
      "version": "4.0.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\jsonpointer\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-JSONPOINTER-598804",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<4.1.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.1.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "critical",
      "cvssScore": 9.8,
      "functions": [],
      "malicious": false,
      "moduleName": "jsonpointer",
      "references": [
        {
          "url": "https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [],
      "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `set` function.\r\n\r\n### POC by NerdJS\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\njsonpointer.set({}, '/__proto__/polluted', true);\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 4.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34)\n",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-1321"
        ]
      },
      "packageName": "jsonpointer",
      "proprietary": true,
      "creationTime": "2020-08-17T15:07:51.732390Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2020-08-17T15:06:59Z",
      "packageManager": "npm",
      "publicationTime": "2020-08-17T15:17:02.764391Z",
      "modificationTime": "2022-08-25T12:14:41.031057Z",
      "socialTrendAlert": false,
      "severityWithCritical": "critical",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.15.0",
        "jsonpointer@4.0.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "har-validator@2.0.6",
        "is-my-json-valid@2.15.0",
        "jsonpointer@4.1.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "jsonpointer",
      "version": "4.0.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\jsonpointer\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-JSONSCHEMA-1920922",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
      "credit": [
        "Yoshino-s"
      ],
      "semver": {
        "vulnerable": [
          "<0.4.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "0.4.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 8.6,
      "functions": [],
      "malicious": false,
      "moduleName": "json-schema",
      "references": [
        {
          "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "SUSE",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.1,
          "modificationTime": "2022-05-18T11:05:15.342749Z"
        },
        {
          "assigner": "NVD",
          "severity": "critical",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "modificationTime": "2022-07-30T01:10:54.774449Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "critical",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "modificationTime": "2022-10-25T14:09:53.767903Z"
        }
      ],
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
      "identifiers": {
        "CVE": [
          "CVE-2021-3918"
        ],
        "CWE": [
          "CWE-1321"
        ]
      },
      "packageName": "json-schema",
      "proprietary": false,
      "creationTime": "2021-11-14T15:11:37.579980Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-11-14T15:05:57Z",
      "packageManager": "npm",
      "publicationTime": "2021-11-14T16:49:43.070251Z",
      "modificationTime": "2022-10-25T14:09:53.767903Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "http-signature@1.1.1",
        "jsprim@1.3.1",
        "json-schema@0.2.3"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "http-signature@1.1.1",
        "jsprim@1.4.2",
        "json-schema@0.4.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "json-schema",
      "version": "0.2.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\json-schema\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-JSZIP-1251497",
      "title": "Denial of Service (DoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
      "credit": [
        "Dave Holoway"
      ],
      "semver": {
        "vulnerable": [
          "<3.7.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "3.7.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.3,
      "functions": [],
      "malicious": false,
      "moduleName": "jszip",
      "references": [
        {
          "url": "https://github.com/Stuk/jszip/commit/22357494f424178cb416cdb7d93b26dd4f824b36",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/Stuk/jszip/issues/762",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/Stuk/jszip/pull/766",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-01-03T16:36:06.078969Z"
        }
      ],
      "description": "## Overview\n[jszip](https://www.npmjs.org/package/jszip) is a Create, read and edit .zip files with JavaScript http://stuartk.com/jszip\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). Crafting a new zip file with filenames set to Object prototype values (e.g `__proto__,` `toString`, etc) results in a returned object with a modified prototype instance.\r\n\r\n### PoC\r\n```\r\nconst jszip = require('jszip');\r\n\r\nasync function loadZip() {\r\n// this is a raw buffer of demo.zip containing 2 empty files:\r\n// - \"file.txt\"\r\n// - \"toString\"\r\nconst demoZip = Buffer.from('UEsDBBQACAAIANS8kVIAAAAAAAAAAAAAAAAIACAAdG9TdHJpbmdVVA0AB3Bje2BmY3tgcGN7YHV4CwABBPUBAAAEFAAAAAMAUEsHCAAAAAACAAAAAAAAAFBLAwQUAAgACADDvJFSAAAAAAAAAAAAAAAACAAgAGZpbGUudHh0VVQNAAdPY3tg4FJ7YE9je2B1eAsAAQT1AQAABBQAAAADAFBLBwgAAAAAAgAAAAAAAABQSwECFAMUAAgACADUvJFSAAAAAAIAAAAAAAAACAAgAAAAAAAAAAAApIEAAAAAdG9TdHJpbmdVVA0AB3Bje2BmY3tgcGN7YHV4CwABBPUBAAAEFAAAAFBLAQIUAxQACAAIAMO8kVIAAAAAAgAAAAAAAAAIACAAAAAAAAAAAACkgVgAAABmaWxlLnR4dFVUDQAHT2N7YOBSe2BPY3tgdXgLAAEE9QEAAAQUAAAAUEsFBgAAAAACAAIArAAAALAAAAAAAA==', 'base64');\r\n\r\nconst zip = await jszip.loadAsync(demoZip);\r\nzip.files.toString(); // this will throw\r\nreturn zip;\r\n}\r\nloadZip();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `jszip` to version 3.7.0 or higher.\n## References\n- [GitHub Commit](https://github.com/Stuk/jszip/commit/22357494f424178cb416cdb7d93b26dd4f824b36)\n- [GitHub Issue](https://github.com/Stuk/jszip/issues/762)\n- [GitHub PR](https://github.com/Stuk/jszip/pull/766)\n",
      "identifiers": {
        "CVE": [
          "CVE-2021-23413"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "packageName": "jszip",
      "proprietary": true,
      "creationTime": "2021-04-18T13:13:34.385552Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2021-04-18T13:04:52Z",
      "packageManager": "npm",
      "publicationTime": "2021-07-25T14:10:32Z",
      "modificationTime": "2022-01-03T16:36:06.078969Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "jszip@3.1.3"
      ],
      "upgradePath": [
        false,
        "jszip@3.7.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "jszip",
      "version": "3.1.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\jszip\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-JSZIP-3188562",
      "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L",
      "credit": [
        "McCaulay Hudson"
      ],
      "semver": {
        "vulnerable": [
          "<3.8.0"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "3.8.0"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.3,
      "functions": [],
      "malicious": false,
      "moduleName": "jszip",
      "references": [
        {
          "url": "https://stuk.github.io/jszip/CHANGES.html",
          "title": "Changelog"
        },
        {
          "url": "https://github.com/Stuk/jszip/commit/2edab366119c9ee948357c02f1206c28566cdf15",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [],
      "description": "## Overview\n[jszip](https://www.npmjs.org/package/jszip) is a Create, read and edit .zip files with JavaScript http://stuartk.com/jszip\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) due to improper sanitization of filenames when files are loaded with the `loadAsync` method.\n\n## Details\n\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n\n+2018-04-15 22:04:29 ..... 19 19 good.txt\n\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\n\n```\n\n## Remediation\nUpgrade `jszip` to version 3.8.0 or higher.\n## References\n- [Changelog](https://stuk.github.io/jszip/CHANGES.html)\n- [GitHub Commit](https://github.com/Stuk/jszip/commit/2edab366119c9ee948357c02f1206c28566cdf15)\n",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-29"
        ]
      },
      "packageName": "jszip",
      "proprietary": false,
      "creationTime": "2023-01-04T12:22:20.959980Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2023-01-04T12:08:19Z",
      "packageManager": "npm",
      "publicationTime": "2023-01-04T13:41:05.971929Z",
      "modificationTime": "2023-01-04T13:41:05.973875Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "jszip@3.1.3"
      ],
      "upgradePath": [
        false,
        "jszip@3.8.0"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "jszip",
      "version": "3.1.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\jszip\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-MINIMATCH-3050818",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<3.0.5"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "3.0.5"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.3,
      "functions": [],
      "malicious": false,
      "moduleName": "minimatch",
      "references": [
        {
          "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-11-27T21:40:17.490683Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-10-20T01:10:31.056597Z"
        }
      ],
      "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
      "identifiers": {
        "CVE": [
          "CVE-2022-3517"
        ],
        "CWE": [
          "CWE-1333"
        ]
      },
      "packageName": "minimatch",
      "proprietary": false,
      "creationTime": "2022-10-18T06:10:47.980262Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-10-18T06:00:25Z",
      "packageManager": "npm",
      "publicationTime": "2022-10-18T06:29:18.078950Z",
      "modificationTime": "2022-11-27T21:40:17.490683Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "vsts-task-lib@1.1.0",
        "minimatch@3.0.3"
      ],
      "upgradePath": [
        false,
        "vsts-task-lib@1.1.0",
        "minimatch@3.0.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimatch",
      "version": "3.0.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\minimatch\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-MINIMATCH-3050818",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<3.0.5"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "3.0.5"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.3,
      "functions": [],
      "malicious": false,
      "moduleName": "minimatch",
      "references": [
        {
          "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
          "title": "GitHub Commit"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-11-27T21:40:17.490683Z"
        },
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-10-20T01:10:31.056597Z"
        }
      ],
      "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
      "identifiers": {
        "CVE": [
          "CVE-2022-3517"
        ],
        "CWE": [
          "CWE-1333"
        ]
      },
      "packageName": "minimatch",
      "proprietary": false,
      "creationTime": "2022-10-18T06:10:47.980262Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-10-18T06:00:25Z",
      "packageManager": "npm",
      "publicationTime": "2022-10-18T06:29:18.078950Z",
      "modificationTime": "2022-11-27T21:40:17.490683Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "vsts-task-lib@1.1.0",
        "glob@6.0.4",
        "minimatch@3.0.3"
      ],
      "upgradePath": [
        false,
        "vsts-task-lib@1.1.0",
        "glob@6.0.4",
        "minimatch@3.0.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "minimatch",
      "version": "3.0.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\minimatch\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-QS-3153490",
      "title": "Prototype Poisoning",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
      "credit": [
        "BRAUN Nathanael",
        "BRISSAUD Johan"
      ],
      "semver": {
        "vulnerable": [
          "<6.2.4",
          ">=6.3.0 <6.3.3",
          ">=6.4.0 <6.4.1",
          ">=6.5.0 <6.5.3",
          ">=6.6.0 <6.6.1",
          ">=6.7.0 <6.7.3",
          ">=6.8.0 <6.8.3",
          ">=6.9.0 <6.9.7",
          ">=6.10.0 <6.10.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.2.4",
        "6.3.3",
        "6.4.1",
        "6.5.3",
        "6.6.1",
        "6.7.3",
        "6.8.3",
        "6.9.7",
        "6.10.3"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [],
      "malicious": false,
      "moduleName": "qs",
      "references": [
        {
          "url": "https://github.com/ljharb/qs/pull/428",
          "title": "GitHub PR"
        },
        {
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2150323",
          "title": "RedHat Bugzilla Bug"
        },
        {
          "url": "https://github.com/n8tz/CVE-2022-24999",
          "title": "Researcher Advisory"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-11-29T01:11:13.913238Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-12-03T13:46:25.900727Z"
        }
      ],
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n## References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n",
      "identifiers": {
        "CVE": [
          "CVE-2022-24999"
        ],
        "CWE": [
          "CWE-1321"
        ]
      },
      "packageName": "qs",
      "proprietary": false,
      "creationTime": "2022-12-04T11:01:47.782869Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-11-26T00:00:00Z",
      "packageManager": "npm",
      "publicationTime": "2022-12-04T12:24:32.307833Z",
      "modificationTime": "2022-12-06T09:33:17.364321Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "qs@6.3.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "qs@6.3.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "qs",
      "version": "6.3.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\qs\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:qs:20170213",
      "title": "Prototype Override Protection Bypass",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "credit": [
        "Snyk Security Research Team"
      ],
      "semver": {
        "vulnerable": [
          "<6.0.4",
          ">=6.1.0 <6.1.2",
          ">=6.2.0 <6.2.3",
          ">=6.3.0 <6.3.2"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.4",
        "6.1.2",
        "6.2.3",
        "6.3.2"
      ],
      "patches": [
        {
          "id": "patch:npm:qs:20170213:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
          ],
          "version": "=6.3.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.855245Z"
        },
        {
          "id": "patch:npm:qs:20170213:1",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
          ],
          "version": "=6.3.1",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.856271Z"
        },
        {
          "id": "patch:npm:qs:20170213:2",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
          ],
          "version": "=6.2.1",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.857318Z"
        },
        {
          "id": "patch:npm:qs:20170213:3",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
          ],
          "version": "=6.2.2",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.858334Z"
        },
        {
          "id": "patch:npm:qs:20170213:4",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
          ],
          "version": "=6.1.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.859411Z"
        },
        {
          "id": "patch:npm:qs:20170213:5",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
          ],
          "version": "=6.1.1",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.860523Z"
        },
        {
          "id": "patch:npm:qs:20170213:6",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
          ],
          "version": "=6.0.2",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.861504Z"
        },
        {
          "id": "patch:npm:qs:20170213:7",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
          ],
          "version": "=6.0.3",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.862615Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [
        {
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ],
          "functionId": {
            "filePath": "lib/parse.js",
            "className": null,
            "functionName": "parseObject"
          }
        },
        {
          "version": [
            ">=6.3.1 <6.3.2"
          ],
          "functionId": {
            "filePath": "lib/parse.js",
            "className": null,
            "functionName": "parseObjectRecursive"
          }
        },
        {
          "version": [
            "<6.0.4"
          ],
          "functionId": {
            "filePath": "lib/parse.js",
            "className": null,
            "functionName": "internals.parseObject"
          }
        }
      ],
      "malicious": false,
      "moduleName": "qs",
      "references": [
        {
          "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/ljharb/qs/issues/200",
          "title": "GitHub Issue"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-01-03T16:11:34.280653Z"
        }
      ],
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
      "identifiers": {
        "CVE": [
          "CVE-2017-1000048"
        ],
        "CWE": [
          "CWE-20"
        ],
        "GHSA": [
          "GHSA-gqgv-6jq5-jjj9"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-QS-10407"
        ]
      },
      "packageName": "qs",
      "proprietary": true,
      "creationTime": "2017-02-14T11:44:54.163000Z",
      "functions_new": [
        {
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ],
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          }
        },
        {
          "version": [
            ">=6.3.1 <6.3.2"
          ],
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          }
        },
        {
          "version": [
            "<6.0.4"
          ],
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-QS-10407"
      ],
      "disclosureTime": "2017-02-13T00:00:00Z",
      "packageManager": "npm",
      "publicationTime": "2017-03-01T10:00:54Z",
      "modificationTime": "2022-01-03T16:11:34.280653Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "qs@6.3.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "qs@6.3.2"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "qs",
      "version": "6.3.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\qs\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "SNYK-JS-SHELLJS-2332187",
      "title": "Improper Privilege Management",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
      "credit": [
        "haxatron"
      ],
      "semver": {
        "vulnerable": [
          "<0.8.5"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.8.5"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.1,
      "functions": [],
      "malicious": false,
      "moduleName": "shelljs",
      "references": [
        {
          "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/shelljs/shelljs/issues/1058",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/shelljs/shelljs/pull/1060",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
          "cvssV3BaseScore": 7.1,
          "modificationTime": "2022-02-09T16:10:36.984666Z"
        }
      ],
      "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
      "identifiers": {
        "CVE": [
          "CVE-2022-0144"
        ],
        "CWE": [
          "CWE-269"
        ]
      },
      "packageName": "shelljs",
      "proprietary": false,
      "creationTime": "2022-01-11T12:52:23.829882Z",
      "functions_new": [],
      "alternativeIds": [],
      "disclosureTime": "2022-01-11T12:39:08Z",
      "packageManager": "npm",
      "publicationTime": "2022-01-12T12:49:35.008405Z",
      "modificationTime": "2022-02-09T16:10:36.984666Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "vsts-task-lib@1.1.0",
        "shelljs@0.3.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "shelljs",
      "version": "0.3.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\shelljs\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:brace-expansion:20170302",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "credit": [
        "kamael"
      ],
      "semver": {
        "vulnerable": [
          "<1.1.7"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "1.1.7"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.2,
      "functions": [],
      "malicious": false,
      "moduleName": "brace-expansion",
      "references": [
        {
          "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/juliangruber/brace-expansion/issues/33",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/juliangruber/brace-expansion/pull/35",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-01-03T16:23:57.810747Z"
        }
      ],
      "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
      "identifiers": {
        "CVE": [
          "CVE-2017-18077"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "338"
        ],
        "GHSA": [
          "GHSA-832h-xg76-4gv6"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ]
      },
      "packageName": "brace-expansion",
      "proprietary": false,
      "creationTime": "2017-04-26T09:19:21.663000Z",
      "functions_new": [],
      "alternativeIds": [
        "SNYK-JS-BRACEEXPANSION-10483"
      ],
      "disclosureTime": "2017-03-01T22:00:00Z",
      "packageManager": "npm",
      "publicationTime": "2017-04-26T09:19:21Z",
      "modificationTime": "2022-01-03T16:23:57.810747Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "vsts-task-lib@1.1.0",
        "minimatch@3.0.3",
        "brace-expansion@1.1.6"
      ],
      "upgradePath": [
        false,
        "vsts-task-lib@1.1.0",
        "minimatch@3.0.3",
        "brace-expansion@1.1.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "brace-expansion",
      "version": "1.1.6",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\brace-expansion\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:brace-expansion:20170302",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "credit": [
        "kamael"
      ],
      "semver": {
        "vulnerable": [
          "<1.1.7"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "1.1.7"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.2,
      "functions": [],
      "malicious": false,
      "moduleName": "brace-expansion",
      "references": [
        {
          "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/juliangruber/brace-expansion/issues/33",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/juliangruber/brace-expansion/pull/35",
          "title": "GitHub PR"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-01-03T16:23:57.810747Z"
        }
      ],
      "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
      "identifiers": {
        "CVE": [
          "CVE-2017-18077"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "338"
        ],
        "GHSA": [
          "GHSA-832h-xg76-4gv6"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ]
      },
      "packageName": "brace-expansion",
      "proprietary": false,
      "creationTime": "2017-04-26T09:19:21.663000Z",
      "functions_new": [],
      "alternativeIds": [
        "SNYK-JS-BRACEEXPANSION-10483"
      ],
      "disclosureTime": "2017-03-01T22:00:00Z",
      "packageManager": "npm",
      "publicationTime": "2017-04-26T09:19:21Z",
      "modificationTime": "2022-01-03T16:23:57.810747Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "vsts-task-lib@1.1.0",
        "glob@6.0.4",
        "minimatch@3.0.3",
        "brace-expansion@1.1.6"
      ],
      "upgradePath": [
        false,
        "vsts-task-lib@1.1.0",
        "glob@6.0.4",
        "minimatch@3.0.3",
        "brace-expansion@1.1.7"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "brace-expansion",
      "version": "1.1.6",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\brace-expansion\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:extend:20180424",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "credit": [
        "Unknown"
      ],
      "semver": {
        "vulnerable": [
          "<2.0.2",
          ">=3.0.0 <3.0.2"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.2",
        "3.0.2"
      ],
      "patches": [
        {
          "id": "patch:npm:extend:20180424:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/extend/20180424/extend_20180424_0_0_0e68e71d93507fcc391e398bc84abd0666b28190.patch"
          ],
          "version": ">=3.0.0 <3.0.2",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.727650Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.3,
      "functions": [
        {
          "version": [
            "<2.0.2",
            ">=3.0.0 <3.0.2"
          ],
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "module.exports"
          }
        }
      ],
      "malicious": false,
      "moduleName": "extend",
      "references": [
        {
          "url": "https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/justmoon/node-extend/pull/48%23issuecomment-398261612",
          "title": "GitHub PR"
        },
        {
          "url": "https://hackerone.com/reports/381185",
          "title": "HackerOne Report"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "critical",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 9.8,
          "modificationTime": "2022-01-03T16:22:51.770343Z"
        }
      ],
      "description": "## Overview\n[extend](https://www.npmjs.com/package/extend) is a port of the classic extend() method from jQuery.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Utilities function can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `extend` to version 2.0.2, 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190)\n- [GitHub PR](https://github.com/justmoon/node-extend/pull/48#issuecomment-398261612)\n- [HackerOne Report](https://hackerone.com/reports/381185)\n",
      "identifiers": {
        "CVE": [
          "CVE-2018-16492"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "996"
        ],
        "GHSA": [
          "GHSA-qrmc-fj45-qfc2"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-EXTEND-12179"
        ]
      },
      "packageName": "extend",
      "proprietary": false,
      "creationTime": "2018-07-23T17:51:10.908000Z",
      "functions_new": [
        {
          "version": [
            "<2.0.2",
            ">=3.0.0 <3.0.2"
          ],
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-EXTEND-12179"
      ],
      "disclosureTime": "2018-04-24T17:51:10Z",
      "packageManager": "npm",
      "publicationTime": "2018-07-23T13:46:08Z",
      "modificationTime": "2022-01-03T16:22:51.770343Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "extend@3.0.0"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "extend@3.0.2"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "extend",
      "version": "3.0.0",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\extend\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:hoek:20180212",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
      "credit": [
        "Olivier Arteau (HoLyVieR)"
      ],
      "semver": {
        "vulnerable": [
          "<4.2.1",
          ">=5.0.0 <5.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.2.1",
        "5.0.3"
      ],
      "patches": [
        {
          "id": "patch:npm:hoek:20180212:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
          ],
          "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.879582Z"
        },
        {
          "id": "patch:npm:hoek:20180212:1",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
          ],
          "version": ">=2.0.0 <3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.880722Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.3,
      "functions": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "className": null,
            "functionName": "exports.merge"
          }
        }
      ],
      "malicious": false,
      "moduleName": "hoek",
      "references": [
        {
          "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/issues/230",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/hapijs/hoek/pull/227",
          "title": "GitHub PR"
        },
        {
          "url": "https://hackerone.com/reports/310439",
          "title": "HackerOne Report"
        },
        {
          "url": "http://npmjs.com/advisories/566",
          "title": "NPM Security Advisory"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2022-01-03T16:28:04.444162Z"
        }
      ],
      "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
      "identifiers": {
        "CVE": [
          "CVE-2018-3728"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "566"
        ],
        "GHSA": [
          "GHSA-jp4x-w63m-7wgm"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-HOEK-12061"
        ]
      },
      "packageName": "hoek",
      "proprietary": false,
      "creationTime": "2018-02-12T22:28:27.612000Z",
      "functions_new": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "functionName": "exports.merge"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-HOEK-12061"
      ],
      "disclosureTime": "2018-02-12T22:28:27Z",
      "packageManager": "npm",
      "publicationTime": "2018-02-14T13:22:50Z",
      "modificationTime": "2022-08-25T12:14:40.511863Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "hawk@3.1.3",
        "hoek@2.16.3"
      ],
      "upgradePath": [
        false,
        "request@2.82.0",
        "hawk@6.0.2",
        "hoek@4.2.1"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "hoek",
      "version": "2.16.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\hoek\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:hoek:20180212",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
      "credit": [
        "Olivier Arteau (HoLyVieR)"
      ],
      "semver": {
        "vulnerable": [
          "<4.2.1",
          ">=5.0.0 <5.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.2.1",
        "5.0.3"
      ],
      "patches": [
        {
          "id": "patch:npm:hoek:20180212:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
          ],
          "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.879582Z"
        },
        {
          "id": "patch:npm:hoek:20180212:1",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
          ],
          "version": ">=2.0.0 <3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.880722Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.3,
      "functions": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "className": null,
            "functionName": "exports.merge"
          }
        }
      ],
      "malicious": false,
      "moduleName": "hoek",
      "references": [
        {
          "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/issues/230",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/hapijs/hoek/pull/227",
          "title": "GitHub PR"
        },
        {
          "url": "https://hackerone.com/reports/310439",
          "title": "HackerOne Report"
        },
        {
          "url": "http://npmjs.com/advisories/566",
          "title": "NPM Security Advisory"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2022-01-03T16:28:04.444162Z"
        }
      ],
      "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
      "identifiers": {
        "CVE": [
          "CVE-2018-3728"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "566"
        ],
        "GHSA": [
          "GHSA-jp4x-w63m-7wgm"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-HOEK-12061"
        ]
      },
      "packageName": "hoek",
      "proprietary": false,
      "creationTime": "2018-02-12T22:28:27.612000Z",
      "functions_new": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "functionName": "exports.merge"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-HOEK-12061"
      ],
      "disclosureTime": "2018-02-12T22:28:27Z",
      "packageManager": "npm",
      "publicationTime": "2018-02-14T13:22:50Z",
      "modificationTime": "2022-08-25T12:14:40.511863Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "hawk@3.1.3",
        "boom@2.10.1",
        "hoek@2.16.3"
      ],
      "upgradePath": [
        false,
        "request@2.82.0",
        "hawk@6.0.2",
        "boom@4.0.0",
        "hoek@4.2.1"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "hoek",
      "version": "2.16.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\hoek\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:hoek:20180212",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
      "credit": [
        "Olivier Arteau (HoLyVieR)"
      ],
      "semver": {
        "vulnerable": [
          "<4.2.1",
          ">=5.0.0 <5.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.2.1",
        "5.0.3"
      ],
      "patches": [
        {
          "id": "patch:npm:hoek:20180212:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
          ],
          "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.879582Z"
        },
        {
          "id": "patch:npm:hoek:20180212:1",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
          ],
          "version": ">=2.0.0 <3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.880722Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.3,
      "functions": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "className": null,
            "functionName": "exports.merge"
          }
        }
      ],
      "malicious": false,
      "moduleName": "hoek",
      "references": [
        {
          "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/issues/230",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/hapijs/hoek/pull/227",
          "title": "GitHub PR"
        },
        {
          "url": "https://hackerone.com/reports/310439",
          "title": "HackerOne Report"
        },
        {
          "url": "http://npmjs.com/advisories/566",
          "title": "NPM Security Advisory"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2022-01-03T16:28:04.444162Z"
        }
      ],
      "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
      "identifiers": {
        "CVE": [
          "CVE-2018-3728"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "566"
        ],
        "GHSA": [
          "GHSA-jp4x-w63m-7wgm"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-HOEK-12061"
        ]
      },
      "packageName": "hoek",
      "proprietary": false,
      "creationTime": "2018-02-12T22:28:27.612000Z",
      "functions_new": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "functionName": "exports.merge"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-HOEK-12061"
      ],
      "disclosureTime": "2018-02-12T22:28:27Z",
      "packageManager": "npm",
      "publicationTime": "2018-02-14T13:22:50Z",
      "modificationTime": "2022-08-25T12:14:40.511863Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "hawk@3.1.3",
        "sntp@1.0.9",
        "hoek@2.16.3"
      ],
      "upgradePath": [
        false,
        "request@2.82.0",
        "hawk@6.0.2",
        "sntp@2.0.1",
        "hoek@4.2.1"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "hoek",
      "version": "2.16.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\hoek\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:hoek:20180212",
      "title": "Prototype Pollution",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
      "credit": [
        "Olivier Arteau (HoLyVieR)"
      ],
      "semver": {
        "vulnerable": [
          "<4.2.1",
          ">=5.0.0 <5.0.3"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.2.1",
        "5.0.3"
      ],
      "patches": [
        {
          "id": "patch:npm:hoek:20180212:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_0_hoek_5aed1a8c4a3d55722d1c799f2368857bf418d6df.patch"
          ],
          "version": "<4.2.1 >=4.1.0 || <3.0.4 >=3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.879582Z"
        },
        {
          "id": "patch:npm:hoek:20180212:1",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/hoek/20180212/20180212_0_1_hoek_32ed5c9413321fbc37da5ca81a7cbab693786dee.patch"
          ],
          "version": ">=2.0.0 <3.0.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.880722Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 6.3,
      "functions": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "className": null,
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "className": null,
            "functionName": "exports.merge"
          }
        }
      ],
      "malicious": false,
      "moduleName": "hoek",
      "references": [
        {
          "url": "https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/hapijs/hoek/issues/230",
          "title": "GitHub Issue"
        },
        {
          "url": "https://github.com/hapijs/hoek/pull/227",
          "title": "GitHub PR"
        },
        {
          "url": "https://hackerone.com/reports/310439",
          "title": "HackerOne Report"
        },
        {
          "url": "http://npmjs.com/advisories/566",
          "title": "NPM Security Advisory"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
          "cvssV3BaseScore": 8.8,
          "modificationTime": "2022-01-03T16:28:04.444162Z"
        }
      ],
      "description": "## Overview\n[hoek](https://github.com/hapijs/hoek) is an Utility methods for the hapi ecosystem.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar Hoek = require('hoek');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nHoek.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hoek` to version 4.2.1, 5.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/32ed5c9413321fbc37da5ca81a7cbab693786dee)\n- [GitHub Commit](https://github.com/hapijs/hoek/commit/5aed1a8c4a3d55722d1c799f2368857bf418d6df)\n- [GitHub Issue](https://github.com/hapijs/hoek/issues/230)\n- [GitHub PR](https://github.com/hapijs/hoek/pull/227)\n- [HackerOne Report](https://hackerone.com/reports/310439)\n- [NPM Security Advisory](http://npmjs.com/advisories/566)\n",
      "identifiers": {
        "CVE": [
          "CVE-2018-3728"
        ],
        "CWE": [
          "CWE-1321"
        ],
        "NSP": [
          "566"
        ],
        "GHSA": [
          "GHSA-jp4x-w63m-7wgm"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-HOEK-12061"
        ]
      },
      "packageName": "hoek",
      "proprietary": false,
      "creationTime": "2018-02-12T22:28:27.612000Z",
      "functions_new": [
        {
          "version": [
            ">=5.0.0 <5.0.3"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            ">0.0.18 <4.2.1"
          ],
          "functionId": {
            "filePath": "lib/index.js",
            "functionName": "exports.merge"
          }
        },
        {
          "version": [
            "<0.0.19"
          ],
          "functionId": {
            "filePath": "lib/hoek.js",
            "functionName": "exports.merge"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-HOEK-12061"
      ],
      "disclosureTime": "2018-02-12T22:28:27Z",
      "packageManager": "npm",
      "publicationTime": "2018-02-14T13:22:50Z",
      "modificationTime": "2022-08-25T12:14:40.511863Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "hawk@3.1.3",
        "cryptiles@2.0.5",
        "boom@2.10.1",
        "hoek@2.16.3"
      ],
      "upgradePath": [
        false,
        "request@2.82.0",
        "hawk@6.0.2",
        "cryptiles@3.0.0",
        "boom@3.1.3",
        "hoek@4.2.1"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "hoek",
      "version": "2.16.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\hoek\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:sshpk:20180409",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
      "credit": [
        "ChALkeR"
      ],
      "semver": {
        "vulnerable": [
          "<1.14.1"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.14.1"
      ],
      "patches": [],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "high",
      "cvssScore": 7.5,
      "functions": [
        {
          "version": [
            "<1.14.1"
          ],
          "functionId": {
            "filePath": "lib/key.js",
            "className": null,
            "functionName": "Key.parse"
          }
        }
      ],
      "malicious": false,
      "moduleName": "sshpk",
      "references": [
        {
          "url": "https://github.com/joyent/node-sshpk/commit/46065d38a5e6d1bccf86d3efb2fb83c14e3f9957",
          "title": "GitHub Commit"
        },
        {
          "url": "https://hackerone.com/reports/319593",
          "title": "HackerOne Report"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-01-03T16:28:05.546573Z"
        },
        {
          "assigner": "Red Hat",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "cvssV3BaseScore": 5.3,
          "modificationTime": "2022-09-01T20:26:03.693192Z"
        }
      ],
      "description": "## Overview\r\n[sshpk](https://www.npmjs.com/package/sshpk) is Parse, convert, fingerprint and use SSH keys in pure node.js.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks when parsing crafted invalid public keys.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `sshpk` to version 1.13.2 or higher.\r\n\r\n## References\r\n- [HackerOne Report](https://hackerone.com/reports/319593)",
      "identifiers": {
        "CVE": [
          "CVE-2018-3737"
        ],
        "CWE": [
          "CWE-185"
        ],
        "NSP": [
          "606"
        ],
        "GHSA": [
          "GHSA-2m39-62fm-q8r3"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-SSHPK-12114"
        ]
      },
      "packageName": "sshpk",
      "proprietary": false,
      "creationTime": "2018-02-25T08:09:56.427000Z",
      "functions_new": [
        {
          "version": [
            "<1.14.1"
          ],
          "functionId": {
            "filePath": "lib/key.js",
            "functionName": "Key.parse"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-SSHPK-12114"
      ],
      "disclosureTime": "2018-04-09T08:09:56Z",
      "packageManager": "npm",
      "publicationTime": "2018-04-09T15:17:27Z",
      "modificationTime": "2022-09-01T20:26:03.693192Z",
      "socialTrendAlert": false,
      "severityWithCritical": "high",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "http-signature@1.1.1",
        "sshpk@1.10.1"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "http-signature@1.1.1",
        "sshpk@1.14.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "sshpk",
      "version": "1.10.1",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\sshpk\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:stringstream:20180511",
      "title": "Uninitialized Memory Exposure",
      "CVSSv3": "CVSS:3.1/AV:P/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H/E:F/RL:O/RC:C",
      "credit": [
        "ChALkeR"
      ],
      "semver": {
        "vulnerable": [
          "<0.0.6"
        ]
      },
      "exploit": "Functional",
      "fixedIn": [
        "0.0.6"
      ],
      "patches": [
        {
          "id": "patch:npm:stringstream:20180511:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/stringstream/20180511/20180511_0_0_stringstream_afbc7442220358419e330618e47f3a65fc265b1b.patch"
          ],
          "version": "<0.0.6 >=0.0.4",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.881859Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.2,
      "functions": [
        {
          "version": [
            ">0.0.0 <0.0.6"
          ],
          "functionId": {
            "filePath": "stringstream.js",
            "className": null,
            "functionName": "StringStream.prototype.write"
          }
        }
      ],
      "malicious": false,
      "moduleName": "stringstream",
      "references": [
        {
          "url": "https://github.com/mhart/StringStream/commit/afbc7442220358419e330618e47f3a65fc265b1b",
          "title": "GitHub Commit"
        },
        {
          "url": "https://github.com/mhart/StringStream/issues/7",
          "title": "GitHub Issue"
        },
        {
          "url": "https://hackerone.com/reports/321670",
          "title": "HAckerOne Report"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "medium",
          "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:H",
          "cvssV3BaseScore": 6.5,
          "modificationTime": "2022-01-03T16:26:42.381460Z"
        }
      ],
      "description": "## Overview\r\n[stringstream](https://www.npmjs.com/package/stringstream) Encode and decode streams into string streams in node.js.\r\n\r\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. An attacker could extract sensitive data from uninitialized memory or to cause a DoS by passing in a large number, in setups where typed user input can be passed to the stream (e.g. from JSON).\r\n\r\n## Details\r\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\r\n\r\n\r\n**Note** This is vulnerable only for Node <=4\r\n\r\n## Remediation\r\nUpgrade `stringstream` to version 0.0.6 or higher.\n\n## References\n- [GitHub Commit](https://github.com/mhart/StringStream/commit/afbc7442220358419e330618e47f3a65fc265b1b)\n- [GitHub Issue](https://github.com/mhart/StringStream/issues/7)\n- [HAckerOne Report](https://hackerone.com/reports/321670)\n",
      "identifiers": {
        "CVE": [
          "CVE-2018-21270"
        ],
        "CWE": [
          "CWE-201",
          "CWE-215"
        ],
        "NSP": [
          "664"
        ],
        "GHSA": [
          "GHSA-mf6x-7mm4-x2g7"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-STRINGSTREAM-12147"
        ]
      },
      "packageName": "stringstream",
      "proprietary": false,
      "creationTime": "2018-03-03T11:54:41.571000Z",
      "functions_new": [
        {
          "version": [
            ">0.0.0 <0.0.6"
          ],
          "functionId": {
            "filePath": "stringstream.js",
            "functionName": "StringStream.prototype.write"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-STRINGSTREAM-12147"
      ],
      "disclosureTime": "2018-05-11T11:54:41Z",
      "packageManager": "npm",
      "publicationTime": "2018-05-13T14:26:27Z",
      "modificationTime": "2022-01-03T16:26:42.381460Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "stringstream@0.0.5"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "stringstream@0.0.6"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "stringstream",
      "version": "0.0.5",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\stringstream\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:tough-cookie:20170905",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "semver": {
        "vulnerable": [
          "<2.3.3"
        ]
      },
      "exploit": "Not Defined",
      "fixedIn": [
        "2.3.3"
      ],
      "patches": [
        {
          "id": "patch:npm:tough-cookie:20170905:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/tough-cookie/20170905/220_221.patch"
          ],
          "version": "=2.2.0 || =2.2.1",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.869349Z"
        },
        {
          "id": "patch:npm:tough-cookie:20170905:1",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/tough-cookie/20170905/222.patch"
          ],
          "version": "=2.2.2",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.870315Z"
        },
        {
          "id": "patch:npm:tough-cookie:20170905:2",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/tough-cookie/20170905/230_232.patch"
          ],
          "version": "=2.3.0 || =2.3.1 || =2.3.2",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.871421Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.9,
      "functions": [
        {
          "version": [
            "<2.3.3"
          ],
          "functionId": {
            "filePath": "lib/cookie.js",
            "className": null,
            "functionName": "parse"
          }
        }
      ],
      "malicious": false,
      "moduleName": "tough-cookie",
      "references": [
        {
          "url": "https://github.com/salesforce/tough-cookie/issues/92",
          "title": "GitHub Issue"
        }
      ],
      "cvssDetails": [
        {
          "assigner": "NVD",
          "severity": "high",
          "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "cvssV3BaseScore": 7.5,
          "modificationTime": "2022-01-03T16:19:33.070373Z"
        }
      ],
      "description": "## Overview\r\n[`tough-cookie`](https://www.npmjs.com/package/tough-cookie) is RFC6265 Cookies and Cookie Jar for node.js.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. An attacker may pass a specially crafted cookie, causing the server to hang.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade to version `2.3.3` or newer.\r\n\r\n## References\r\n- [Github Issue](https://github.com/salesforce/tough-cookie/issues/92)",
      "identifiers": {
        "CVE": [
          "CVE-2017-15010"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          "525"
        ],
        "GHSA": [
          "GHSA-g7q5-pjjr-gqvp"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-TOUGHCOOKIE-10760"
        ]
      },
      "packageName": "tough-cookie",
      "proprietary": false,
      "creationTime": "2017-09-21T08:07:51.834000Z",
      "functions_new": [
        {
          "version": [
            "<2.3.3"
          ],
          "functionId": {
            "filePath": "lib/cookie.js",
            "functionName": "parse"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-TOUGHCOOKIE-10760"
      ],
      "disclosureTime": "2017-09-07T21:00:00Z",
      "packageManager": "npm",
      "publicationTime": "2017-09-21T08:07:51Z",
      "modificationTime": "2022-01-03T16:19:33.070373Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "tough-cookie@2.3.2"
      ],
      "upgradePath": [
        false,
        "request@2.79.0",
        "tough-cookie@2.3.3"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "tough-cookie",
      "version": "2.3.2",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\tough-cookie\\package.json",
      "parentDepType": "prod"
    },
    {
      "id": "npm:tunnel-agent:20170305",
      "title": "Uninitialized Memory Exposure",
      "CVSSv3": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:P/RL:O/RC:C",
      "credit": [
        "ChALkeR"
      ],
      "semver": {
        "vulnerable": [
          "<0.6.0"
        ]
      },
      "exploit": "Proof of Concept",
      "fixedIn": [
        "0.6.0"
      ],
      "patches": [
        {
          "id": "patch:npm:tunnel-agent:20170305:0",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/tunnel-agent/20170305/tunnel-agent_20170305_0_0_9ca95ec7219daface8a6fc2674000653de0922c0.patch"
          ],
          "version": "=0.4.3 || =0.5.0",
          "comments": [],
          "modificationTime": "2019-12-03T11:40:45.868281Z"
        }
      ],
      "insights": {
        "triageAdvice": null
      },
      "language": "js",
      "severity": "medium",
      "cvssScore": 5.1,
      "functions": [
        {
          "version": [
            "<0.6.0"
          ],
          "functionId": {
            "filePath": "index.js",
            "className": null,
            "functionName": "TunnelingAgent.prototype.createSocket"
          }
        }
      ],
      "malicious": false,
      "moduleName": "tunnel-agent",
      "references": [
        {
          "url": "https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0",
          "title": "GitHub Commit"
        },
        {
          "url": "https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4",
          "title": "PoC by ChALkeR"
        }
      ],
      "cvssDetails": [],
      "description": "## Overview\r\n[`tunnel-agent`](https://www.npmjs.com/package/tunnel-agent) is HTTP proxy tunneling agent. Affected versions of the package are vulnerable to Uninitialized Memory Exposure. \r\n\r\nA possible memory disclosure vulnerability exists when a value of type `number` is used to set the _proxy.auth_ option of a request `request` and results in a possible uninitialized memory exposures in the request body.\r\n\r\nThis is a result of unobstructed use of the `Buffer` constructor, whose [insecure default constructor increases the odds of memory leakage](https://snyk.io/blog/exploiting-buffer/).\r\n\r\n## Details\r\nConstructing a `Buffer` class with integer `N` creates a `Buffer` of length `N` with raw (not \"zero-ed\") memory.\r\n\r\nIn the following example, the first call would allocate 100 bytes of memory, while the second example will allocate the memory needed for the string \"100\":\r\n```js\r\n// uninitialized Buffer of length 100\r\nx = new Buffer(100);\r\n// initialized Buffer with value of '100'\r\nx = new Buffer('100');\r\n```\r\n\r\n`tunnel-agent`'s `request` construction uses the default `Buffer` constructor as-is, making it easy to append uninitialized memory to an existing list. If the value of the buffer list is exposed to users, it may expose raw server side memory, potentially holding secrets, private data and code. This is a similar vulnerability to the infamous [`Heartbleed`](http://heartbleed.com/) flaw in OpenSSL.\r\n\r\n#### Proof of concept by ChALkeR\r\n```js\r\nrequire('request')({\r\n  method: 'GET',\r\n  uri: 'http://www.example.com',\r\n  tunnel: true,\r\n  proxy:{\r\n      protocol: 'http:',\r\n      host:\"127.0.0.1\",\r\n      port:8080,\r\n      auth:80\r\n  }\r\n});\r\n```\r\n\r\nYou can read more about the insecure `Buffer` behavior [on our blog](https://snyk.io/blog/exploiting-buffer/).\r\n\r\nSimilar vulnerabilities were discovered in [request](https://snyk.io/vuln/npm:request:20160119), [mongoose](https://snyk.io/vuln/npm:mongoose:20160116), [ws](https://snyk.io/vuln/npm:ws:20160104) and [sequelize](https://snyk.io/vuln/npm:sequelize:20160115).\r\n\r\n## Remediation\r\nUpgrade `tunnel-agent` to version 0.6.0 or higher.\r\n**Note** This is vulnerable only for Node <=4\n\n## References\n- [GitHub Commit](https://github.com/request/tunnel-agent/commit/9ca95ec7219daface8a6fc2674000653de0922c0)\n- [PoC by ChALkeR](https://gist.github.com/ChALkeR/fd6b2c445834244e7d440a043f9d2ff4)\n",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-201"
        ],
        "NSP": [
          "598"
        ],
        "GHSA": [
          "GHSA-xc7v-wxcw-j472"
        ],
        "ALTERNATIVE": [
          "SNYK-JS-TUNNELAGENT-10672"
        ]
      },
      "packageName": "tunnel-agent",
      "proprietary": false,
      "creationTime": "2017-07-05T07:23:57.738000Z",
      "functions_new": [
        {
          "version": [
            "<0.6.0"
          ],
          "functionId": {
            "filePath": "index.js",
            "functionName": "TunnelingAgent.prototype.createSocket"
          }
        }
      ],
      "alternativeIds": [
        "SNYK-JS-TUNNELAGENT-10672"
      ],
      "disclosureTime": "2017-03-04T22:00:00Z",
      "packageManager": "npm",
      "publicationTime": "2017-07-05T14:05:50Z",
      "modificationTime": "2020-12-14T14:41:09.129940Z",
      "socialTrendAlert": false,
      "severityWithCritical": "medium",
      "from": [
        "vsts-raygun-extension@*",
        "request@2.79.0",
        "tunnel-agent@0.4.3"
      ],
      "upgradePath": [
        false,
        "request@2.81.0",
        "tunnel-agent@0.6.0"
      ],
      "isUpgradable": true,
      "isPatchable": true,
      "name": "tunnel-agent",
      "version": "0.4.3",
      "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1\\_build\\Tasks\\UploadSymbols\\node_modules\\tunnel-agent\\package.json",
      "parentDepType": "prod"
    }
  ],
  "ok": false,
  "dependencyCount": 90,
  "org": "global-devops-bootcamp",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1+": {
        "licenseType": "LGPL-2.1+",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0+": {
        "licenseType": "LGPL-3.0+",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": {
    "adminOnly": false,
    "reasonRequired": false,
    "disregardFilesystemIgnores": false
  },
  "summary": "25 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "id": "SNYK-JS-ISMYJSONVALID-597165",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "chalker"
        ],
        "semver": {
          "vulnerable": [
            "<2.20.2"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.20.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "is-my-json-valid",
        "references": [
          {
            "url": "https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb",
            "title": "GitHub Commit"
          },
          {
            "url": "https://hackerone.com/reports/909757",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `style` format. \r\n\r\n##PoC\r\n```\r\nconst imjv = require('is-my-json-valid')\r\nconst validate = imjv({ maxLength: 100, format: 'style' })\r\nconsole.log(validate(' '.repeat(1e4)))\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.2 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/c3fc04fc455d40e9b29537f8e2c73a28ce106edb)\n- [HackerOne Report](https://hackerone.com/reports/909757)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "is-my-json-valid",
        "proprietary": false,
        "creationTime": "2020-08-02T12:09:52.577067Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-07-31T17:13:38Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-02T15:04:47.405171Z",
        "modificationTime": "2020-08-02T15:04:47.420926Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.15.0"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "is-my-json-valid",
        "version": "2.15.0",
        "severityWithCritical": "high"
      },
      {
        "id": "SNYK-JS-ISMYJSONVALID-597167",
        "title": "Arbitrary Code Execution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "chalker"
        ],
        "semver": {
          "vulnerable": [
            "<2.20.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "2.20.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "is-my-json-valid",
        "references": [
          {
            "url": "https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://hackerone.com/reports/894308",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) is a JSONSchema / orderly validator that uses code generation to be extremely fast.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution via the `formatName` function.\r\n\r\n##PoC\r\n```const validator = require('is-my-json-valid')\r\nconst schema = {\r\n  type: 'object',\r\n  properties: {\r\n    'x[console.log(process.mainModule.require(`child_process`).execSync(`cat /etc/passwd`).toString(`utf-8`))]': {\r\n      required: true,\r\n      type:'string'\r\n    }\r\n  },\r\n}\r\nvar validate = validator(schema);\r\nvalidate({})\r\n```\n## Remediation\nUpgrade `is-my-json-valid` to version 2.20.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/3419563687df463b4ca709a2b46be8e15d6a2b3d)\n- [HackerOne Report](https://hackerone.com/reports/894308)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-94"
          ]
        },
        "packageName": "is-my-json-valid",
        "proprietary": false,
        "creationTime": "2020-08-02T12:14:47.006233Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-07-31T17:14:47Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-02T15:04:45.880122Z",
        "modificationTime": "2020-08-02T15:04:45.893491Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.15.0"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "is-my-json-valid",
        "version": "2.15.0",
        "severityWithCritical": "high"
      },
      {
        "id": "npm:is-my-json-valid:20180214",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:F/RL:O/RC:C",
        "credit": [
          "Jamie Davis"
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1",
            ">=2.0.0 <2.17.2"
          ]
        },
        "exploit": "Functional",
        "fixedIn": [
          "1.4.1",
          "2.17.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "is-my-json-valid",
        "references": [
          {
            "url": "https://github.com/mafintosh/is-my-json-valid/commit/b3051b277f7caa08cd2edc6f74f50aeda65d2976",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/mafintosh/is-my-json-valid/pull/159",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/317548",
            "title": "Hackerone Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-01-03T16:14:16.533769Z"
          }
        ],
        "description": "## Overview\r\n[`is-my-json-valid`](https://www.npmjs.com/package/is-my-json-valid) is a universal validation plugin.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks. It used a regular expression (`/^\\S+@\\S+$/`) in order to validate emails. This can cause an impact of about 10 seconds matching time for data 90K characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 13th, 2018 - Initial Disclosure to package owner\r\n* Feb 14th, 2018 - Initial Response from package owner\r\n* Feb 14th, 2018 - Fix issued\r\n* Feb 15th, 2018 - Vulnerability published\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `is-my-json-valid` to version 2.17.2, 1.4.1 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/mafintosh/is-my-json-valid/pull/159)\r\n- [GitHub Commit](https://github.com/mafintosh/is-my-json-valid/commit/b3051b277f7caa08cd2edc6f74f50aeda65d2976)",
        "identifiers": {
          "CVE": [
            "CVE-2018-1107"
          ],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ],
          "NSP": [
            "572"
          ],
          "GHSA": [
            "GHSA-4x7c-cx64-49w8"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-ISMYJSONVALID-10887"
          ]
        },
        "packageName": "is-my-json-valid",
        "proprietary": true,
        "creationTime": "2018-02-15T14:36:50Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-ISMYJSONVALID-10887"
        ],
        "disclosureTime": "2018-02-13T20:39:06Z",
        "packageManager": "npm",
        "publicationTime": "2018-02-15T19:52:28Z",
        "modificationTime": "2022-01-03T16:14:16.533769Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.15.0"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.17.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "is-my-json-valid",
        "version": "2.15.0",
        "severityWithCritical": "low"
      },
      {
        "id": "SNYK-JS-JSONPOINTER-1577288",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Alessio Della Libera of Snyk Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<5.0.0"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "5.0.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [],
        "malicious": false,
        "moduleName": "jsonpointer",
        "references": [
          {
            "url": "https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/janl/node-jsonpointer/pull/51",
            "title": "GitHub PR"
          },
          {
            "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T16:36:17.235470Z"
          }
        ],
        "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of a previous Prototype Pollution fix when the pointer components are arrays.\r\n\r\n### PoC\r\n\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\n\r\n// jsonpointer.set({}, ['__proto__', '__proto__', 'polluted'], 'yes');\r\n// console.log(polluted); // ReferenceError: polluted is not defined\r\n\r\njsonpointer.set({}, [['__proto__'], ['__proto__'], 'polluted'], 'yes');\r\nconsole.log(polluted); // yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 5.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/a0345f3550cd9c4d89f33b126390202b89510ad4)\n- [GitHub PR](https://github.com/janl/node-jsonpointer/pull/51)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23807"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "jsonpointer",
        "proprietary": true,
        "creationTime": "2021-08-31T17:20:26.792975Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-08-31T17:19:51Z",
        "packageManager": "npm",
        "publicationTime": "2021-11-03T16:34:28Z",
        "modificationTime": "2022-01-03T16:36:17.235470Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.15.0",
          "jsonpointer@4.0.0"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.20.6",
          "jsonpointer@5.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "jsonpointer",
        "version": "4.0.0",
        "severityWithCritical": "medium"
      },
      {
        "id": "SNYK-JS-JSONPOINTER-598804",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<4.1.0"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.1.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "critical",
        "cvssScore": 9.8,
        "functions": [],
        "malicious": false,
        "moduleName": "jsonpointer",
        "references": [
          {
            "url": "https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[jsonpointer](https://www.npmjs.com/package/jsonpointer) is a Simple JSON Addressing.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `set` function.\r\n\r\n### POC by NerdJS\r\n```\r\nconst jsonpointer = require('jsonpointer');\r\njsonpointer.set({}, '/__proto__/polluted', true);\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jsonpointer` to version 4.1.0 or higher.\n## References\n- [GitHub Commit](https://github.com/janl/node-jsonpointer/commit/234e3437019c6c07537ed2ad1e03b3e132b85e34)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "jsonpointer",
        "proprietary": true,
        "creationTime": "2020-08-17T15:07:51.732390Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-17T15:06:59Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-17T15:17:02.764391Z",
        "modificationTime": "2022-08-25T12:14:41.031057Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.15.0",
          "jsonpointer@4.0.0"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "har-validator@2.0.6",
          "is-my-json-valid@2.15.0",
          "jsonpointer@4.1.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "jsonpointer",
        "version": "4.0.0",
        "severityWithCritical": "critical"
      },
      {
        "id": "SNYK-JS-JSONSCHEMA-1920922",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
        "credit": [
          "Yoshino-s"
        ],
        "semver": {
          "vulnerable": [
            "<0.4.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.4.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.6,
        "functions": [],
        "malicious": false,
        "moduleName": "json-schema",
        "references": [
          {
            "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-18T11:05:15.342749Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-07-30T01:10:54.774449Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-25T14:09:53.767903Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3918"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "json-schema",
        "proprietary": false,
        "creationTime": "2021-11-14T15:11:37.579980Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-11-14T15:05:57Z",
        "packageManager": "npm",
        "publicationTime": "2021-11-14T16:49:43.070251Z",
        "modificationTime": "2022-10-25T14:09:53.767903Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "http-signature@1.1.1",
          "jsprim@1.3.1",
          "json-schema@0.2.3"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "http-signature@1.1.1",
          "jsprim@1.4.2",
          "json-schema@0.4.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "json-schema",
        "version": "0.2.3",
        "severityWithCritical": "high"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "vsts-task-lib@1.1.0",
          "glob@6.0.4",
          "minimatch@3.0.3"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@1.1.0",
          "glob@6.0.4",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "minimatch",
        "version": "3.0.3",
        "severityWithCritical": "medium"
      },
      {
        "id": "SNYK-JS-QS-3153490",
        "title": "Prototype Poisoning",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "BRAUN Nathanael",
          "BRISSAUD Johan"
        ],
        "semver": {
          "vulnerable": [
            "<6.2.4",
            ">=6.3.0 <6.3.3",
            ">=6.4.0 <6.4.1",
            ">=6.5.0 <6.5.3",
            ">=6.6.0 <6.6.1",
            ">=6.7.0 <6.7.3",
            ">=6.8.0 <6.8.3",
            ">=6.9.0 <6.9.7",
            ">=6.10.0 <6.10.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.2.4",
          "6.3.3",
          "6.4.1",
          "6.5.3",
          "6.6.1",
          "6.7.3",
          "6.8.3",
          "6.9.7",
          "6.10.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/pull/428",
            "title": "GitHub PR"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2150323",
            "title": "RedHat Bugzilla Bug"
          },
          {
            "url": "https://github.com/n8tz/CVE-2022-24999",
            "title": "Researcher Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-29T01:11:13.913238Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-03T13:46:25.900727Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n## References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-24999"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "qs",
        "proprietary": false,
        "creationTime": "2022-12-04T11:01:47.782869Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-26T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2022-12-04T12:24:32.307833Z",
        "modificationTime": "2022-12-06T09:33:17.364321Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "qs@6.3.0"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "qs@6.3.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "qs",
        "version": "6.3.0",
        "severityWithCritical": "high"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "vsts-task-lib@1.1.0",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "shelljs",
        "version": "0.3.0",
        "severityWithCritical": "high"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "vsts-task-lib@1.1.0",
          "glob@6.0.4",
          "minimatch@3.0.3",
          "brace-expansion@1.1.6"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@1.1.0",
          "glob@6.0.4",
          "minimatch@3.0.3",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "brace-expansion",
        "version": "1.1.6",
        "severityWithCritical": "medium"
      },
      {
        "id": "npm:sshpk:20180409",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
        "credit": [
          "ChALkeR"
        ],
        "semver": {
          "vulnerable": [
            "<1.14.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.14.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [
          {
            "version": [
              "<1.14.1"
            ],
            "functionId": {
              "filePath": "lib/key.js",
              "className": null,
              "functionName": "Key.parse"
            }
          }
        ],
        "malicious": false,
        "moduleName": "sshpk",
        "references": [
          {
            "url": "https://github.com/joyent/node-sshpk/commit/46065d38a5e6d1bccf86d3efb2fb83c14e3f9957",
            "title": "GitHub Commit"
          },
          {
            "url": "https://hackerone.com/reports/319593",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:28:05.546573Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-01T20:26:03.693192Z"
          }
        ],
        "description": "## Overview\r\n[sshpk](https://www.npmjs.com/package/sshpk) is Parse, convert, fingerprint and use SSH keys in pure node.js.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks when parsing crafted invalid public keys.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `sshpk` to version 1.13.2 or higher.\r\n\r\n## References\r\n- [HackerOne Report](https://hackerone.com/reports/319593)",
        "identifiers": {
          "CVE": [
            "CVE-2018-3737"
          ],
          "CWE": [
            "CWE-185"
          ],
          "NSP": [
            "606"
          ],
          "GHSA": [
            "GHSA-2m39-62fm-q8r3"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SSHPK-12114"
          ]
        },
        "packageName": "sshpk",
        "proprietary": false,
        "creationTime": "2018-02-25T08:09:56.427000Z",
        "functions_new": [
          {
            "version": [
              "<1.14.1"
            ],
            "functionId": {
              "filePath": "lib/key.js",
              "functionName": "Key.parse"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-SSHPK-12114"
        ],
        "disclosureTime": "2018-04-09T08:09:56Z",
        "packageManager": "npm",
        "publicationTime": "2018-04-09T15:17:27Z",
        "modificationTime": "2022-09-01T20:26:03.693192Z",
        "socialTrendAlert": false,
        "from": [
          "vsts-raygun-extension@*",
          "request@2.79.0",
          "http-signature@1.1.1",
          "sshpk@1.10.1"
        ],
        "upgradePath": [
          false,
          "request@2.79.0",
          "http-signature@1.1.1",
          "sshpk@1.14.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "isRuntime": false,
        "name": "sshpk",
        "version": "1.10.1",
        "severityWithCritical": "high"
      }
    ],
    "upgrade": {
      "jszip@3.1.3": {
        "upgradeTo": "jszip@3.8.0",
        "upgrades": [
          "jszip@3.1.3",
          "jszip@3.1.3"
        ],
        "vulns": [
          "SNYK-JS-JSZIP-3188562",
          "SNYK-JS-JSZIP-1251497"
        ]
      },
      "request@2.79.0": {
        "upgradeTo": "request@2.87.0",
        "upgrades": [
          "hawk@3.1.3",
          "hoek@2.16.3",
          "tunnel-agent@0.4.3"
        ],
        "vulns": [
          "SNYK-JS-HAWK-2808852",
          "npm:hoek:20180212",
          "npm:tunnel-agent:20170305"
        ]
      }
    },
    "patch": {
      "npm:extend:20180424": {
        "paths": [
          {
            "request > extend": {
              "patched": "2023-01-04T18:49:45.358Z"
            }
          }
        ]
      },
      "npm:qs:20170213": {
        "paths": [
          {
            "request > qs": {
              "patched": "2023-01-04T18:49:45.358Z"
            }
          }
        ]
      },
      "npm:stringstream:20180511": {
        "paths": [
          {
            "request > stringstream": {
              "patched": "2023-01-04T18:49:45.358Z"
            }
          }
        ]
      },
      "npm:tough-cookie:20170905": {
        "paths": [
          {
            "request > tough-cookie": {
              "patched": "2023-01-04T18:49:45.358Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 20,
  "projectName": "vsts-raygun-extension",
  "displayTargetFile": "_build\\Tasks\\UploadSymbols\\package.json",
  "hasUnknownVersions": false,
  "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\Raygun\\vsts-extension\\1.0.1"
}
