[
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-QS-3153490",
        "title": "Prototype Poisoning",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "BRAUN Nathanael",
          "BRISSAUD Johan"
        ],
        "semver": {
          "vulnerable": [
            "<6.2.4",
            ">=6.3.0 <6.3.3",
            ">=6.4.0 <6.4.1",
            ">=6.5.0 <6.5.3",
            ">=6.6.0 <6.6.1",
            ">=6.7.0 <6.7.3",
            ">=6.8.0 <6.8.3",
            ">=6.9.0 <6.9.7",
            ">=6.10.0 <6.10.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.2.4",
          "6.3.3",
          "6.4.1",
          "6.5.3",
          "6.6.1",
          "6.7.3",
          "6.8.3",
          "6.9.7",
          "6.10.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/pull/428",
            "title": "GitHub PR"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2150323",
            "title": "RedHat Bugzilla Bug"
          },
          {
            "url": "https://github.com/n8tz/CVE-2022-24999",
            "title": "Researcher Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-29T01:11:13.913238Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-03T13:46:25.900727Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n## References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-24999"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "qs",
        "proprietary": false,
        "creationTime": "2022-12-04T11:01:47.782869Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-26T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2022-12-04T12:24:32.307833Z",
        "modificationTime": "2022-12-06T09:33:17.364321Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:qs:20170213",
        "title": "Prototype Override Protection Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<6.0.4",
            ">=6.1.0 <6.1.2",
            ">=6.2.0 <6.2.3",
            ">=6.3.0 <6.3.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "6.0.4",
          "6.1.2",
          "6.2.3",
          "6.3.2"
        ],
        "patches": [
          {
            "id": "patch:npm:qs:20170213:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.855245Z"
          },
          {
            "id": "patch:npm:qs:20170213:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.856271Z"
          },
          {
            "id": "patch:npm:qs:20170213:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.857318Z"
          },
          {
            "id": "patch:npm:qs:20170213:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.858334Z"
          },
          {
            "id": "patch:npm:qs:20170213:4",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.859411Z"
          },
          {
            "id": "patch:npm:qs:20170213:5",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.860523Z"
          },
          {
            "id": "patch:npm:qs:20170213:6",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.861504Z"
          },
          {
            "id": "patch:npm:qs:20170213:7",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.862615Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "internals.parseObject"
            }
          }
        ],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/ljharb/qs/issues/200",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:11:34.280653Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-1000048"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-gqgv-6jq5-jjj9"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ]
        },
        "packageName": "qs",
        "proprietary": true,
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "functions_new": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "internals.parseObject"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "disclosureTime": "2017-02-13T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-03-01T10:00:54Z",
        "modificationTime": "2022-01-03T16:11:34.280653Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "vsts-task-lib@0.5.13",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:debug:20170905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            ">=1.0.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.6.9",
          "3.1.0"
        ],
        "patches": [
          {
            "id": "patch:npm:debug:20170905:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.872397Z"
          },
          {
            "id": "patch:npm:debug:20170905:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.873422Z"
          },
          {
            "id": "patch:npm:debug:20170905:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.874399Z"
          },
          {
            "id": "patch:npm:debug:20170905:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.875363Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "malicious": false,
        "moduleName": "debug",
        "references": [
          {
            "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/debug/issues/501",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/visionmedia/debug/pull/504",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-01-03T16:21:42.477572Z"
          }
        ],
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "identifiers": {
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "534"
          ],
          "GHSA": [
            "GHSA-gxpj-cx7g-858c"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ]
        },
        "packageName": "debug",
        "proprietary": false,
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "functions_new": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "disclosureTime": "2017-09-05T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-26T03:55:05Z",
        "modificationTime": "2022-01-03T16:21:42.477572Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.9"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "debug",
        "version": "2.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\debug\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:extend:20180424",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.2",
            ">=3.0.0 <3.0.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.2",
          "3.0.2"
        ],
        "patches": [
          {
            "id": "patch:npm:extend:20180424:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/extend/20180424/extend_20180424_0_0_0e68e71d93507fcc391e398bc84abd0666b28190.patch"
            ],
            "version": ">=3.0.0 <3.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.727650Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          }
        ],
        "malicious": false,
        "moduleName": "extend",
        "references": [
          {
            "url": "https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/justmoon/node-extend/pull/48%23issuecomment-398261612",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/381185",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T16:22:51.770343Z"
          }
        ],
        "description": "## Overview\n[extend](https://www.npmjs.com/package/extend) is a port of the classic extend() method from jQuery.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Utilities function can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `extend` to version 2.0.2, 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190)\n- [GitHub PR](https://github.com/justmoon/node-extend/pull/48#issuecomment-398261612)\n- [HackerOne Report](https://hackerone.com/reports/381185)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16492"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "996"
          ],
          "GHSA": [
            "GHSA-qrmc-fj45-qfc2"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-EXTEND-12179"
          ]
        },
        "packageName": "extend",
        "proprietary": false,
        "creationTime": "2018-07-23T17:51:10.908000Z",
        "functions_new": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-EXTEND-12179"
        ],
        "disclosureTime": "2018-04-24T17:51:10Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-23T13:46:08Z",
        "modificationTime": "2022-01-03T16:22:51.770343Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "extend@3.0.0"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "extend@3.0.2"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "extend",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\extend\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:mime:20170907",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1",
            ">=2.0.0 <2.0.3"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.4.1",
          "2.0.3"
        ],
        "patches": [
          {
            "id": "patch:npm:mime:20170907:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.877450Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "className": null,
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mime",
        "references": [
          {
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/issues/167",
            "title": "GitHub Issue"
          },
          {
            "url": "https://www.npmjs.com/advisories/535",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:21:39.161781Z"
          }
        ],
        "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "535"
          ],
          "GHSA": [
            "GHSA-wrvr-8mpx-r7pp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ]
        },
        "packageName": "mime",
        "proprietary": false,
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "disclosureTime": "2017-09-07T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T05:48:40Z",
        "modificationTime": "2022-01-03T16:21:39.161781Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "mime@1.3.4"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "mime@1.4.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "mime",
        "version": "1.3.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\mime\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:ms:20170412",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.0"
        ],
        "patches": [
          {
            "id": "patch:npm:ms:20170412:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.863964Z"
          },
          {
            "id": "patch:npm:ms:20170412:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.865081Z"
          },
          {
            "id": "patch:npm:ms:20170412:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.866206Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse"
            }
          }
        ],
        "malicious": false,
        "moduleName": "ms",
        "references": [
          {
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/zeit/ms/pull/89",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ]
        },
        "packageName": "ms",
        "proprietary": true,
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "functions_new": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "disclosureTime": "2017-04-11T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-05-15T06:02:45Z",
        "modificationTime": "2022-05-16T13:04:13.342145Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "ms",
        "version": "0.7.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\ms\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20170807",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Dennis Appelt"
        ],
        "semver": {
          "vulnerable": [
            "<3.7.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.7.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/issues/1259",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-01-03T16:21:30.558181Z"
          }
        ],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). It uncompresses responses in memory, and a malicious user may send a specially crafted zip file which will then unzip in the server and cause excessive CPU consumption. This is also known as a `Zip Bomb`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `superagent` to version 3.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1259)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16129"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "479"
          ],
          "GHSA": [
            "GHSA-8225-6cvr-8pqp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-10789"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2017-09-27T11:38:25.465000Z",
        "functions_new": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-10789"
        ],
        "disclosureTime": "2017-08-06T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T11:38:25Z",
        "modificationTime": "2022-01-03T16:21:30.558181Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20181108",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "pszabop"
        ],
        "semver": {
          "vulnerable": [
            "<3.8.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.8.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/superagent/issues/1309",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Information Exposure due to sending the contents of Authorization to third parties.\n## Remediation\nUpgrade `superagent` to version 3.8.1 or higher.\n## References\n- [GitHub Commit](https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4)\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1309)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-12185"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2018-11-08T19:42:02Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-12185"
        ],
        "disclosureTime": "2018-11-08T19:42:02Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-31T13:43:37Z",
        "modificationTime": "2020-12-14T14:41:30.731652Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-patch@1.0.1",
          "code-push@1.10.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-patch\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      }
    ],
    "ok": false,
    "dependencyCount": 38,
    "org": "global-devops-bootcamp",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1+": {
          "licenseType": "LGPL-2.1+",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0+": {
          "licenseType": "LGPL-3.0+",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "13 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-MINIMATCH-3050818",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "credit": [
            "Unknown"
          ],
          "semver": {
            "vulnerable": [
              "<3.0.5"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [
            "3.0.5"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "minimatch",
          "references": [
            {
              "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
              "title": "GitHub Commit"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "Red Hat",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-11-27T21:40:17.490683Z"
            },
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-10-20T01:10:31.056597Z"
            }
          ],
          "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-3517"
            ],
            "CWE": [
              "CWE-1333"
            ]
          },
          "packageName": "minimatch",
          "proprietary": false,
          "creationTime": "2022-10-18T06:10:47.980262Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-10-18T06:00:25Z",
          "packageManager": "npm",
          "publicationTime": "2022-10-18T06:29:18.078950Z",
          "modificationTime": "2022-11-27T21:40:17.490683Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-patch@1.0.1",
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.2"
          ],
          "upgradePath": [
            false,
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.5"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "minimatch",
          "version": "3.0.2",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-SHELLJS-2332187",
          "title": "Improper Privilege Management",
          "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
          "credit": [
            "haxatron"
          ],
          "semver": {
            "vulnerable": [
              "<0.8.5"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "0.8.5"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.1,
          "functions": [],
          "malicious": false,
          "moduleName": "shelljs",
          "references": [
            {
              "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/shelljs/shelljs/issues/1058",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/shelljs/shelljs/pull/1060",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
              "cvssV3BaseScore": 7.1,
              "modificationTime": "2022-02-09T16:10:36.984666Z"
            }
          ],
          "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-0144"
            ],
            "CWE": [
              "CWE-269"
            ]
          },
          "packageName": "shelljs",
          "proprietary": false,
          "creationTime": "2022-01-11T12:52:23.829882Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-01-11T12:39:08Z",
          "packageManager": "npm",
          "publicationTime": "2022-01-12T12:49:35.008405Z",
          "modificationTime": "2022-02-09T16:10:36.984666Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-patch@1.0.1",
            "vsts-task-lib@0.5.13",
            "shelljs@0.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "shelljs",
          "version": "0.3.0",
          "severityWithCritical": "high"
        },
        {
          "id": "npm:brace-expansion:20170302",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "credit": [
            "kamael"
          ],
          "semver": {
            "vulnerable": [
              "<1.1.7"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [
            "1.1.7"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 6.2,
          "functions": [],
          "malicious": false,
          "moduleName": "brace-expansion",
          "references": [
            {
              "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/juliangruber/brace-expansion/issues/33",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/juliangruber/brace-expansion/pull/35",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-01-03T16:23:57.810747Z"
            }
          ],
          "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
          "identifiers": {
            "CVE": [
              "CVE-2017-18077"
            ],
            "CWE": [
              "CWE-400"
            ],
            "NSP": [
              "338"
            ],
            "GHSA": [
              "GHSA-832h-xg76-4gv6"
            ],
            "ALTERNATIVE": [
              "SNYK-JS-BRACEEXPANSION-10483"
            ]
          },
          "packageName": "brace-expansion",
          "proprietary": false,
          "creationTime": "2017-04-26T09:19:21.663000Z",
          "functions_new": [],
          "alternativeIds": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ],
          "disclosureTime": "2017-03-01T22:00:00Z",
          "packageManager": "npm",
          "publicationTime": "2017-04-26T09:19:21Z",
          "modificationTime": "2022-01-03T16:23:57.810747Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-patch@1.0.1",
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.2",
            "brace-expansion@1.1.5"
          ],
          "upgradePath": [
            false,
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.2",
            "brace-expansion@1.1.7"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "brace-expansion",
          "version": "1.1.5",
          "severityWithCritical": "medium"
        }
      ],
      "upgrade": {
        "code-push@1.10.0-beta": {
          "upgradeTo": "code-push@2.0.5",
          "upgrades": [
            "qs@2.3.3",
            "qs@2.3.3",
            "extend@3.0.0",
            "mime@1.3.4",
            "superagent@1.8.3",
            "superagent@1.8.3",
            "debug@2.2.0",
            "ms@0.7.1"
          ],
          "vulns": [
            "SNYK-JS-QS-3153490",
            "npm:qs:20170213",
            "npm:extend:20180424",
            "npm:mime:20170907",
            "npm:superagent:20170807",
            "npm:superagent:20181108",
            "npm:debug:20170905",
            "npm:ms:20170412"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 11,
    "projectName": "vsts-task-code-push-patch",
    "foundProjectCount": 3,
    "displayTargetFile": "Tasks\\codepush-patch\\package.json",
    "hasUnknownVersions": false,
    "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-QS-3153490",
        "title": "Prototype Poisoning",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "BRAUN Nathanael",
          "BRISSAUD Johan"
        ],
        "semver": {
          "vulnerable": [
            "<6.2.4",
            ">=6.3.0 <6.3.3",
            ">=6.4.0 <6.4.1",
            ">=6.5.0 <6.5.3",
            ">=6.6.0 <6.6.1",
            ">=6.7.0 <6.7.3",
            ">=6.8.0 <6.8.3",
            ">=6.9.0 <6.9.7",
            ">=6.10.0 <6.10.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.2.4",
          "6.3.3",
          "6.4.1",
          "6.5.3",
          "6.6.1",
          "6.7.3",
          "6.8.3",
          "6.9.7",
          "6.10.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/pull/428",
            "title": "GitHub PR"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2150323",
            "title": "RedHat Bugzilla Bug"
          },
          {
            "url": "https://github.com/n8tz/CVE-2022-24999",
            "title": "Researcher Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-29T01:11:13.913238Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-03T13:46:25.900727Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n## References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-24999"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "qs",
        "proprietary": false,
        "creationTime": "2022-12-04T11:01:47.782869Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-26T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2022-12-04T12:24:32.307833Z",
        "modificationTime": "2022-12-06T09:33:17.364321Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:qs:20170213",
        "title": "Prototype Override Protection Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<6.0.4",
            ">=6.1.0 <6.1.2",
            ">=6.2.0 <6.2.3",
            ">=6.3.0 <6.3.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "6.0.4",
          "6.1.2",
          "6.2.3",
          "6.3.2"
        ],
        "patches": [
          {
            "id": "patch:npm:qs:20170213:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.855245Z"
          },
          {
            "id": "patch:npm:qs:20170213:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.856271Z"
          },
          {
            "id": "patch:npm:qs:20170213:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.857318Z"
          },
          {
            "id": "patch:npm:qs:20170213:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.858334Z"
          },
          {
            "id": "patch:npm:qs:20170213:4",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.859411Z"
          },
          {
            "id": "patch:npm:qs:20170213:5",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.860523Z"
          },
          {
            "id": "patch:npm:qs:20170213:6",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.861504Z"
          },
          {
            "id": "patch:npm:qs:20170213:7",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.862615Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "internals.parseObject"
            }
          }
        ],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/ljharb/qs/issues/200",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:11:34.280653Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-1000048"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-gqgv-6jq5-jjj9"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ]
        },
        "packageName": "qs",
        "proprietary": true,
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "functions_new": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "internals.parseObject"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "disclosureTime": "2017-02-13T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-03-01T10:00:54Z",
        "modificationTime": "2022-01-03T16:11:34.280653Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "vsts-task-lib@0.5.13",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:debug:20170905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            ">=1.0.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.6.9",
          "3.1.0"
        ],
        "patches": [
          {
            "id": "patch:npm:debug:20170905:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.872397Z"
          },
          {
            "id": "patch:npm:debug:20170905:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.873422Z"
          },
          {
            "id": "patch:npm:debug:20170905:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.874399Z"
          },
          {
            "id": "patch:npm:debug:20170905:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.875363Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "malicious": false,
        "moduleName": "debug",
        "references": [
          {
            "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/debug/issues/501",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/visionmedia/debug/pull/504",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-01-03T16:21:42.477572Z"
          }
        ],
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "identifiers": {
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "534"
          ],
          "GHSA": [
            "GHSA-gxpj-cx7g-858c"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ]
        },
        "packageName": "debug",
        "proprietary": false,
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "functions_new": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "disclosureTime": "2017-09-05T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-26T03:55:05Z",
        "modificationTime": "2022-01-03T16:21:42.477572Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.9"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "debug",
        "version": "2.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\debug\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:extend:20180424",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.2",
            ">=3.0.0 <3.0.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.2",
          "3.0.2"
        ],
        "patches": [
          {
            "id": "patch:npm:extend:20180424:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/extend/20180424/extend_20180424_0_0_0e68e71d93507fcc391e398bc84abd0666b28190.patch"
            ],
            "version": ">=3.0.0 <3.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.727650Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          }
        ],
        "malicious": false,
        "moduleName": "extend",
        "references": [
          {
            "url": "https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/justmoon/node-extend/pull/48%23issuecomment-398261612",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/381185",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T16:22:51.770343Z"
          }
        ],
        "description": "## Overview\n[extend](https://www.npmjs.com/package/extend) is a port of the classic extend() method from jQuery.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Utilities function can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `extend` to version 2.0.2, 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190)\n- [GitHub PR](https://github.com/justmoon/node-extend/pull/48#issuecomment-398261612)\n- [HackerOne Report](https://hackerone.com/reports/381185)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16492"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "996"
          ],
          "GHSA": [
            "GHSA-qrmc-fj45-qfc2"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-EXTEND-12179"
          ]
        },
        "packageName": "extend",
        "proprietary": false,
        "creationTime": "2018-07-23T17:51:10.908000Z",
        "functions_new": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-EXTEND-12179"
        ],
        "disclosureTime": "2018-04-24T17:51:10Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-23T13:46:08Z",
        "modificationTime": "2022-01-03T16:22:51.770343Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "extend@3.0.0"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "extend@3.0.2"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "extend",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\extend\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:mime:20170907",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1",
            ">=2.0.0 <2.0.3"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.4.1",
          "2.0.3"
        ],
        "patches": [
          {
            "id": "patch:npm:mime:20170907:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.877450Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "className": null,
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mime",
        "references": [
          {
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/issues/167",
            "title": "GitHub Issue"
          },
          {
            "url": "https://www.npmjs.com/advisories/535",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:21:39.161781Z"
          }
        ],
        "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "535"
          ],
          "GHSA": [
            "GHSA-wrvr-8mpx-r7pp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ]
        },
        "packageName": "mime",
        "proprietary": false,
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "disclosureTime": "2017-09-07T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T05:48:40Z",
        "modificationTime": "2022-01-03T16:21:39.161781Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "mime@1.3.4"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0",
          "mime@1.4.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "mime",
        "version": "1.3.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\mime\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:ms:20170412",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.0"
        ],
        "patches": [
          {
            "id": "patch:npm:ms:20170412:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.863964Z"
          },
          {
            "id": "patch:npm:ms:20170412:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.865081Z"
          },
          {
            "id": "patch:npm:ms:20170412:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.866206Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse"
            }
          }
        ],
        "malicious": false,
        "moduleName": "ms",
        "references": [
          {
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/zeit/ms/pull/89",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ]
        },
        "packageName": "ms",
        "proprietary": true,
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "functions_new": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "disclosureTime": "2017-04-11T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-05-15T06:02:45Z",
        "modificationTime": "2022-05-16T13:04:13.342145Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "ms",
        "version": "0.7.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\ms\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20170807",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Dennis Appelt"
        ],
        "semver": {
          "vulnerable": [
            "<3.7.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.7.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/issues/1259",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-01-03T16:21:30.558181Z"
          }
        ],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). It uncompresses responses in memory, and a malicious user may send a specially crafted zip file which will then unzip in the server and cause excessive CPU consumption. This is also known as a `Zip Bomb`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `superagent` to version 3.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1259)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16129"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "479"
          ],
          "GHSA": [
            "GHSA-8225-6cvr-8pqp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-10789"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2017-09-27T11:38:25.465000Z",
        "functions_new": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-10789"
        ],
        "disclosureTime": "2017-08-06T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T11:38:25Z",
        "modificationTime": "2022-01-03T16:21:30.558181Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20181108",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "pszabop"
        ],
        "semver": {
          "vulnerable": [
            "<3.8.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.8.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/superagent/issues/1309",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Information Exposure due to sending the contents of Authorization to third parties.\n## Remediation\nUpgrade `superagent` to version 3.8.1 or higher.\n## References\n- [GitHub Commit](https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4)\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1309)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-12185"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2018-11-08T19:42:02Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-12185"
        ],
        "disclosureTime": "2018-11-08T19:42:02Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-31T13:43:37Z",
        "modificationTime": "2020-12-14T14:41:30.731652Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-promote@1.2.2",
          "code-push@1.10.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push@2.0.5",
          "superagent@3.8.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-promote\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      }
    ],
    "ok": false,
    "dependencyCount": 38,
    "org": "global-devops-bootcamp",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1+": {
          "licenseType": "LGPL-2.1+",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0+": {
          "licenseType": "LGPL-3.0+",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "13 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-MINIMATCH-3050818",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          "credit": [
            "Unknown"
          ],
          "semver": {
            "vulnerable": [
              "<3.0.5"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [
            "3.0.5"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.3,
          "functions": [],
          "malicious": false,
          "moduleName": "minimatch",
          "references": [
            {
              "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
              "title": "GitHub Commit"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "Red Hat",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-11-27T21:40:17.490683Z"
            },
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-10-20T01:10:31.056597Z"
            }
          ],
          "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-3517"
            ],
            "CWE": [
              "CWE-1333"
            ]
          },
          "packageName": "minimatch",
          "proprietary": false,
          "creationTime": "2022-10-18T06:10:47.980262Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-10-18T06:00:25Z",
          "packageManager": "npm",
          "publicationTime": "2022-10-18T06:29:18.078950Z",
          "modificationTime": "2022-11-27T21:40:17.490683Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-promote@1.2.2",
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.2"
          ],
          "upgradePath": [
            false,
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.5"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "minimatch",
          "version": "3.0.2",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-SHELLJS-2332187",
          "title": "Improper Privilege Management",
          "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
          "credit": [
            "haxatron"
          ],
          "semver": {
            "vulnerable": [
              "<0.8.5"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "0.8.5"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.1,
          "functions": [],
          "malicious": false,
          "moduleName": "shelljs",
          "references": [
            {
              "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/shelljs/shelljs/issues/1058",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/shelljs/shelljs/pull/1060",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
              "cvssV3BaseScore": 7.1,
              "modificationTime": "2022-02-09T16:10:36.984666Z"
            }
          ],
          "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-0144"
            ],
            "CWE": [
              "CWE-269"
            ]
          },
          "packageName": "shelljs",
          "proprietary": false,
          "creationTime": "2022-01-11T12:52:23.829882Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-01-11T12:39:08Z",
          "packageManager": "npm",
          "publicationTime": "2022-01-12T12:49:35.008405Z",
          "modificationTime": "2022-02-09T16:10:36.984666Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-promote@1.2.2",
            "vsts-task-lib@0.5.13",
            "shelljs@0.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "shelljs",
          "version": "0.3.0",
          "severityWithCritical": "high"
        },
        {
          "id": "npm:brace-expansion:20170302",
          "title": "Regular Expression Denial of Service (ReDoS)",
          "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
          "credit": [
            "kamael"
          ],
          "semver": {
            "vulnerable": [
              "<1.1.7"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [
            "1.1.7"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 6.2,
          "functions": [],
          "malicious": false,
          "moduleName": "brace-expansion",
          "references": [
            {
              "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/juliangruber/brace-expansion/issues/33",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/juliangruber/brace-expansion/pull/35",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "cvssV3BaseScore": 7.5,
              "modificationTime": "2022-01-03T16:23:57.810747Z"
            }
          ],
          "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
          "identifiers": {
            "CVE": [
              "CVE-2017-18077"
            ],
            "CWE": [
              "CWE-400"
            ],
            "NSP": [
              "338"
            ],
            "GHSA": [
              "GHSA-832h-xg76-4gv6"
            ],
            "ALTERNATIVE": [
              "SNYK-JS-BRACEEXPANSION-10483"
            ]
          },
          "packageName": "brace-expansion",
          "proprietary": false,
          "creationTime": "2017-04-26T09:19:21.663000Z",
          "functions_new": [],
          "alternativeIds": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ],
          "disclosureTime": "2017-03-01T22:00:00Z",
          "packageManager": "npm",
          "publicationTime": "2017-04-26T09:19:21Z",
          "modificationTime": "2022-01-03T16:23:57.810747Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-promote@1.2.2",
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.2",
            "brace-expansion@1.1.5"
          ],
          "upgradePath": [
            false,
            "vsts-task-lib@0.5.13",
            "glob@6.0.4",
            "minimatch@3.0.2",
            "brace-expansion@1.1.7"
          ],
          "isUpgradable": true,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "brace-expansion",
          "version": "1.1.5",
          "severityWithCritical": "medium"
        }
      ],
      "upgrade": {
        "code-push@1.10.0-beta": {
          "upgradeTo": "code-push@2.0.5",
          "upgrades": [
            "qs@2.3.3",
            "qs@2.3.3",
            "extend@3.0.0",
            "mime@1.3.4",
            "superagent@1.8.3",
            "superagent@1.8.3",
            "debug@2.2.0",
            "ms@0.7.1"
          ],
          "vulns": [
            "SNYK-JS-QS-3153490",
            "npm:qs:20170213",
            "npm:extend:20180424",
            "npm:mime:20170907",
            "npm:superagent:20170807",
            "npm:superagent:20181108",
            "npm:debug:20170905",
            "npm:ms:20170412"
          ]
        }
      },
      "patch": {},
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 11,
    "projectName": "vsts-task-code-push-promote",
    "foundProjectCount": 3,
    "displayTargetFile": "Tasks\\codepush-promote\\package.json",
    "hasUnknownVersions": false,
    "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-GOT-2932019",
        "title": "Open Redirect",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<11.8.5",
            ">=12.0.0 <12.1.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "11.8.5",
          "12.1.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.4,
        "functions": [],
        "malicious": false,
        "moduleName": "got",
        "references": [
          {
            "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
            "title": "GitHub Diff"
          },
          {
            "url": "https://github.com/sindresorhus/got/pull/2047",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-06-29T01:11:26.531842Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-11-19T20:57:05.871669Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-33987"
          ],
          "CWE": [
            "CWE-601"
          ]
        },
        "packageName": "got",
        "proprietary": false,
        "creationTime": "2022-06-19T09:23:24.210132Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-06-19T08:33:16Z",
        "packageManager": "npm",
        "publicationTime": "2022-06-19T15:33:44.269688Z",
        "modificationTime": "2022-11-19T20:57:05.871669Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "got@3.3.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "got",
        "version": "3.3.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\got\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-I-1726768",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<0.3.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.3.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "i",
        "references": [
          {
            "url": "https://github.com/pksunkara/inflect/commit/a9a0a8e9561c3487854c7cae42565d9652ec858b",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-07-30T01:10:54.837204Z"
          }
        ],
        "description": "## Overview\n[i](https://www.npmjs.com/package/i) is a custom inflections for nodejs.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `classify` and `underscore` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `i` to version 0.3.7 or higher.\n## References\n- [GitHub Commit](https://github.com/pksunkara/inflect/commit/a9a0a8e9561c3487854c7cae42565d9652ec858b)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3820"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "i",
        "proprietary": false,
        "creationTime": "2021-09-27T14:50:41.948292Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-27T14:21:39Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-27T15:46:41.553181Z",
        "modificationTime": "2022-07-30T01:10:54.837204Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "i@0.3.5"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "i@0.3.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "i",
        "version": "0.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\i\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "ini@1.3.4"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "ini@1.3.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\ini\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-450202",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.719849Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/issues/4348",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4336",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4355",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/sailshq/lodash/pull/1",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1065",
            "title": "Node Security Advisory"
          },
          {
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 9.1,
            "modificationTime": "2022-01-03T17:53:52.560412Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1065"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T11:45:02Z",
        "packageManager": "npm",
        "publicationTime": "2019-07-02T11:45:01Z",
        "modificationTime": "2022-08-25T12:14:41.065285Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73638",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "asgerf"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1066",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1068",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1071",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/782",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://hackerone.com/reports/380873",
            "title": "POC: HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-01-03T16:22:51.625949Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16487"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "782",
            "1066",
            "1068",
            "1071"
          ],
          "GHSA": [
            "GHSA-4xc9-xhrj-v574"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-02-03T09:06:37.726000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2018-08-31T18:21:00Z",
        "packageManager": "npm",
        "publicationTime": "2019-02-01T18:21:00Z",
        "modificationTime": "2022-09-13T14:35:06.157983Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73639",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "cristianstaicu"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 4.4,
        "functions": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4450",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/issues/3359",
            "title": "POC: GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T17:53:28.079217Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-1010266"
          ],
          "CWE": [
            "CWE-185"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2019-02-03T09:18:05.060741Z",
        "functions_new": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2017-09-05T09:14:29Z",
        "packageManager": "npm",
        "publicationTime": "2019-04-05T09:14:22Z",
        "modificationTime": "2022-04-05T12:27:32.267901Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:lodash:20180130",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.5"
        ],
        "patches": [
          {
            "id": "patch:npm:lodash:20180130:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20180130/20180130_0_0_lodash_d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a.patch"
            ],
            "version": "=3.10.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.883000Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.3,
        "functions": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/310443",
            "title": "HackerOne Report"
          },
          {
            "url": "https://www.npmjs.com/advisories/1067",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1069",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1070",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T16:27:45.509249Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-3721"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "577",
            "1067",
            "1069",
            "1070"
          ],
          "GHSA": [
            "GHSA-fvqr-27wr-82fm",
            "GHSA-5947-m4fg-xhqg",
            "GHSA-46fh-8fc5-xcwx",
            "GHSA-2m96-9w4j-wgv7"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-LODASH-174180"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2018-02-12T22:28:27.654000Z",
        "functions_new": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-LODASH-174180"
        ],
        "disclosureTime": "2018-01-30T22:28:27Z",
        "packageManager": "npm",
        "publicationTime": "2018-02-14T13:22:50Z",
        "modificationTime": "2022-08-25T12:14:41.090425Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-450202",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.719849Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/issues/4348",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4336",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4355",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/sailshq/lodash/pull/1",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1065",
            "title": "Node Security Advisory"
          },
          {
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 9.1,
            "modificationTime": "2022-01-03T17:53:52.560412Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1065"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T11:45:02Z",
        "packageManager": "npm",
        "publicationTime": "2019-07-02T11:45:01Z",
        "modificationTime": "2022-08-25T12:14:41.065285Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.12"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73638",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "asgerf"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1066",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1068",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1071",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/782",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://hackerone.com/reports/380873",
            "title": "POC: HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-01-03T16:22:51.625949Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16487"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "782",
            "1066",
            "1068",
            "1071"
          ],
          "GHSA": [
            "GHSA-4xc9-xhrj-v574"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-02-03T09:06:37.726000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2018-08-31T18:21:00Z",
        "packageManager": "npm",
        "publicationTime": "2019-02-01T18:21:00Z",
        "modificationTime": "2022-09-13T14:35:06.157983Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.11"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73639",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "cristianstaicu"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 4.4,
        "functions": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4450",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/issues/3359",
            "title": "POC: GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T17:53:28.079217Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-1010266"
          ],
          "CWE": [
            "CWE-185"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2019-02-03T09:18:05.060741Z",
        "functions_new": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2017-09-05T09:14:29Z",
        "packageManager": "npm",
        "publicationTime": "2019-04-05T09:14:22Z",
        "modificationTime": "2022-04-05T12:27:32.267901Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.11"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:lodash:20180130",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.5"
        ],
        "patches": [
          {
            "id": "patch:npm:lodash:20180130:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20180130/20180130_0_0_lodash_d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a.patch"
            ],
            "version": "=3.10.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.883000Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.3,
        "functions": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/310443",
            "title": "HackerOne Report"
          },
          {
            "url": "https://www.npmjs.com/advisories/1067",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1069",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1070",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T16:27:45.509249Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-3721"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "577",
            "1067",
            "1069",
            "1070"
          ],
          "GHSA": [
            "GHSA-fvqr-27wr-82fm",
            "GHSA-5947-m4fg-xhqg",
            "GHSA-46fh-8fc5-xcwx",
            "GHSA-2m96-9w4j-wgv7"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-LODASH-174180"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2018-02-12T22:28:27.654000Z",
        "functions_new": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-LODASH-174180"
        ],
        "disclosureTime": "2018-01-30T22:28:27Z",
        "packageManager": "npm",
        "publicationTime": "2018-02-14T13:22:50Z",
        "modificationTime": "2022-08-25T12:14:41.090425Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/substack/minimist/issues/164",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-11-25T14:17:13.977821Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "modificationTime": "2022-11-25T14:17:13.977821Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.2",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-03T23:19:09.248741Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-09-01T16:53:55.159376Z"
          },
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-04-23T01:11:18.536458Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "modificationTime": "2022-09-01T16:53:55.159376Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/substack/minimist/issues/164",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-11-25T14:17:13.977821Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "modificationTime": "2022-11-25T14:17:13.977821Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.2",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-03T23:19:09.248741Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-09-01T16:53:55.159376Z"
          },
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-04-23T01:11:18.536458Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "modificationTime": "2022-09-01T16:53:55.159376Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/substack/minimist/issues/164",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-11-25T14:17:13.977821Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "modificationTime": "2022-11-25T14:17:13.977821Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\rc\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-03T23:19:09.248741Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-09-01T16:53:55.159376Z"
          },
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-04-23T01:11:18.536458Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "modificationTime": "2022-09-01T16:53:55.159376Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\rc\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MOMENT-2440688",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<2.29.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.29.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "moment",
        "references": [
          {
            "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-07-30T13:11:10.093622Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:37:12.591335Z"
          }
        ],
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-24785"
          ],
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-8hfj-j24r-96c4"
          ]
        },
        "packageName": "moment",
        "proprietary": false,
        "creationTime": "2022-04-05T08:46:07.677588Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-04-05T08:39:23Z",
        "packageManager": "npm",
        "publicationTime": "2022-04-05T12:30:50.878091Z",
        "modificationTime": "2022-11-27T21:37:12.591335Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "moment@2.14.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "moment@2.29.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "moment",
        "version": "2.14.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\moment\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:moment:20161019",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<2.15.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.15.2"
        ],
        "patches": [
          {
            "id": "patch:npm:moment:20161019:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_1.patch"
            ],
            "version": "<2.15.2 >=2.14.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.848228Z"
          },
          {
            "id": "patch:npm:moment:20161019:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_0.patch"
            ],
            "version": "<2.14.0 >=2.12.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.849308Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "moment",
        "references": [
          {
            "url": "https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc",
            "title": "Proof of concept"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\r\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\r\n\r\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and `format` input can be controlled by the user.\r\n\r\nAn attacker can provide a specially crafted input to the `format` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\r\n\r\n## Disclosure Timeline\r\n- October 19th, 2016 - Reported the issue to package owner.\r\n- October 19th, 2016 - Issue acknowledged by package owner.\r\n- October 24th, 2016 - Issue fixed and version `2.15.2` released.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## References\r\n- [Proof of concept](https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc)\r\n- [Fix commit](https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MOMENT-10164"
          ]
        },
        "packageName": "moment",
        "proprietary": true,
        "creationTime": "2016-10-23T06:57:59.675000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-MOMENT-10164"
        ],
        "disclosureTime": "2016-10-18T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2016-10-24T06:57:59Z",
        "modificationTime": "2020-12-14T14:41:49.306035Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "moment@2.14.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "moment@2.15.2"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "moment",
        "version": "2.14.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\moment\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:moment:20170905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            "<2.19.3"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.19.3"
        ],
        "patches": [
          {
            "id": "patch:npm:moment:20170905:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/moment/20170905/moment_0_0_69ed9d44957fa6ab12b73d2ae29d286a857b80eb.patch"
            ],
            "version": "<2.19.3 >=2.16.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.878422Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "monthsShortRegex"
            }
          },
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "monthsRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "weekdaysRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "weekdaysShortRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "weekdaysMinRegex"
            }
          }
        ],
        "malicious": false,
        "moduleName": "moment",
        "references": [
          {
            "url": "https://github.com/moment/moment/issues/4163",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/moment/moment/pull/4326",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-02-15T04:10:25.236941Z"
          }
        ],
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i`) in order to parse dates specified as strings. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `moment` to version 2.19.3 or higher.\n## References\n- [GitHub Issue](https://github.com/moment/moment/issues/4163)\n- [GitHub PR](https://github.com/moment/moment/pull/4326)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-18214"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "532"
          ],
          "GHSA": [
            "GHSA-446m-mv8f-q348"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MOMENT-10841"
          ]
        },
        "packageName": "moment",
        "proprietary": false,
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "functions_new": [
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "monthsShortRegex"
            }
          },
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "monthsRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "weekdaysRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "weekdaysShortRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "weekdaysMinRegex"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MOMENT-10841"
        ],
        "disclosureTime": "2017-09-05T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-11-28T14:47:22Z",
        "modificationTime": "2022-02-15T04:10:25.236941Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "moment@2.14.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "moment@2.19.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "moment",
        "version": "2.14.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\moment\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PLIST-2405644",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:L/E:P",
        "credit": [
          "keerok"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.4"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.4"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7,
        "functions": [],
        "malicious": false,
        "moduleName": "plist",
        "references": [
          {
            "url": "https://github.com/TooTallNate/plist.js/issues/114",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-07-15T01:11:21.152408Z"
          }
        ],
        "description": "## Overview\n[plist](https://github.com/TooTallNate/node-plist) is a Mac OS X Plist parser/builder for Node.js and browsers.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `.parse()`, exploiting this vulnerability may lead to Denial of Service (DoS) and Remote Code Execution.\r\n\r\n## PoC:\r\n\r\n```js\r\nvar plist = require('plist');\r\nvar xmlPollution = `\r\n<plist version=\"1.0\">\r\n  <dict>\r\n    <key>__proto__</key>\r\n    <dict>\r\n      <key>length</key>\r\n      <string>polluted</string>\r\n    </dict>\r\n  </dict>\r\n</plist>`;\r\nconsole.log(plist.parse(xmlPollution).length); // polluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `plist` to version 3.0.4 or higher.\n## References\n- [GitHub Issue](https://github.com/TooTallNate/plist.js/issues/114)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-22912"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "plist",
        "proprietary": false,
        "creationTime": "2022-02-18T11:25:21.980565Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-18T11:12:32Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-18T15:33:53.594042Z",
        "modificationTime": "2022-07-15T01:11:21.152408Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@3.0.0",
          "plist@3.0.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "plist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\plist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:plist:20180219",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jamie Davis"
        ],
        "semver": {
          "vulnerable": [
            ">=1.2.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "plist",
        "references": [
          {
            "url": "https://github.com/TooTallNate/plist.js/commit/a85b9d3559859d58e44d099a6a40bf8c13ab7e66",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/TooTallNate/plist.js/issues/89",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[`plist`](https://www.npmjs.com/package/plist) is a Mac OS X Plist parser/builder for Node.js and browsers\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks due to bundling a vulnerable version of the XMLBuilder package. This can cause an impact of about 10 seconds matching time for data 60 characters long.\n\n## Disclosure Timeline\n* Feb 5th, 2018 - Initial Disclosure to package owner\n* Feb 6th, 2018 - Initial Response from package owner\n* Mar 18th, 2018 - Fix issued\n* Apr 15th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `plist` to version 3.0.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/TooTallNate/plist.js/commit/a85b9d3559859d58e44d099a6a40bf8c13ab7e66)\n- [GitHub Issue](https://github.com/TooTallNate/plist.js/issues/89)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-PLIST-11087"
          ]
        },
        "packageName": "plist",
        "proprietary": true,
        "creationTime": "2018-04-15T15:16:33.857000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-PLIST-11087"
        ],
        "disclosureTime": "2018-04-15T15:16:33.857000Z",
        "packageManager": "npm",
        "publicationTime": "2018-04-15T15:16:33.857000Z",
        "modificationTime": "2020-12-14T14:41:49.474777Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@3.0.0",
          "plist@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "plist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\plist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-QS-3153490",
        "title": "Prototype Poisoning",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "BRAUN Nathanael",
          "BRISSAUD Johan"
        ],
        "semver": {
          "vulnerable": [
            "<6.2.4",
            ">=6.3.0 <6.3.3",
            ">=6.4.0 <6.4.1",
            ">=6.5.0 <6.5.3",
            ">=6.6.0 <6.6.1",
            ">=6.7.0 <6.7.3",
            ">=6.8.0 <6.8.3",
            ">=6.9.0 <6.9.7",
            ">=6.10.0 <6.10.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.2.4",
          "6.3.3",
          "6.4.1",
          "6.5.3",
          "6.6.1",
          "6.7.3",
          "6.8.3",
          "6.9.7",
          "6.10.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/pull/428",
            "title": "GitHub PR"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2150323",
            "title": "RedHat Bugzilla Bug"
          },
          {
            "url": "https://github.com/n8tz/CVE-2022-24999",
            "title": "Researcher Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-29T01:11:13.913238Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-03T13:46:25.900727Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n## References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-24999"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "qs",
        "proprietary": false,
        "creationTime": "2022-12-04T11:01:47.782869Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-26T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2022-12-04T12:24:32.307833Z",
        "modificationTime": "2022-12-06T09:33:17.364321Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:qs:20170213",
        "title": "Prototype Override Protection Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<6.0.4",
            ">=6.1.0 <6.1.2",
            ">=6.2.0 <6.2.3",
            ">=6.3.0 <6.3.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "6.0.4",
          "6.1.2",
          "6.2.3",
          "6.3.2"
        ],
        "patches": [
          {
            "id": "patch:npm:qs:20170213:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.855245Z"
          },
          {
            "id": "patch:npm:qs:20170213:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.856271Z"
          },
          {
            "id": "patch:npm:qs:20170213:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.857318Z"
          },
          {
            "id": "patch:npm:qs:20170213:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.858334Z"
          },
          {
            "id": "patch:npm:qs:20170213:4",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.859411Z"
          },
          {
            "id": "patch:npm:qs:20170213:5",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.860523Z"
          },
          {
            "id": "patch:npm:qs:20170213:6",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.861504Z"
          },
          {
            "id": "patch:npm:qs:20170213:7",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.862615Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "internals.parseObject"
            }
          }
        ],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/ljharb/qs/issues/200",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:11:34.280653Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-1000048"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-gqgv-6jq5-jjj9"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ]
        },
        "packageName": "qs",
        "proprietary": true,
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "functions_new": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "internals.parseObject"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "disclosureTime": "2017-02-13T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-03-01T10:00:54Z",
        "modificationTime": "2022-01-03T16:11:34.280653Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "vsts-task-lib@0.5.13",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-1084960",
        "title": "XML External Entity (XXE) Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.4,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/security/advisories/GHSA-h6q6-9hqw-rwfv",
            "title": "GitHub Advisory"
          },
          {
            "url": "https://github.com/xmldom/xmldom/commit/d4201b9dfbf760049f457f9f08a3888d48835135",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 4.3,
            "modificationTime": "2022-01-03T16:35:17.615961Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. Does not correctly preserve system identifiers, FPIs or namespaces when repeatedly parsing and serializing maliciously crafted documents.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade `xmldom` to version 0.5.0 or higher.\n## References\n- [GitHub Advisory](https://github.com/xmldom/xmldom/security/advisories/GHSA-h6q6-9hqw-rwfv)\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/d4201b9dfbf760049f457f9f08a3888d48835135)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-21366"
          ],
          "CWE": [
            "CWE-611"
          ],
          "GHSA": [
            "GHSA-h6q6-9hqw-rwfv"
          ]
        },
        "packageName": "xmldom",
        "proprietary": true,
        "creationTime": "2021-03-10T15:59:11.081028Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-10T15:34:50Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-10T16:31:47Z",
        "modificationTime": "2022-01-03T16:35:17.615961Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [
          false,
          "code-push-cli@3.0.0",
          "plist@3.0.2",
          "xmldom@0.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-1534562",
        "title": "Improper Input Validation",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.5,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/xmldom/xmldom/issues/271",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-04-26T01:10:30.392784Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It does not correctly escape special characters when serializing elements are removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.\r\n\r\n**Note:**\r\nCustomers who use \"xmldom\" package, should use \"@xmldom/xmldom\" instead, as \"xmldom\" is no longer maintained.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/271)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-32796"
          ],
          "CWE": [
            "CWE-116"
          ],
          "GHSA": [
            "GHSA-5fg8-2547-mr8q"
          ]
        },
        "packageName": "xmldom",
        "proprietary": false,
        "creationTime": "2021-07-28T06:33:12.846430Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-07-28T06:31:31Z",
        "packageManager": "npm",
        "publicationTime": "2021-07-28T15:12:14Z",
        "modificationTime": "2022-05-11T12:48:26.463897Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-3042242",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:L",
        "credit": [
          "@Supraja9726"
        ],
        "semver": {
          "vulnerable": [
            ">=0.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.5,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/xmldom/xmldom/issues/436",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.3",
            "title": "GitHub Release"
          },
          {
            "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L1",
            "title": "Vulnerable Code"
          },
          {
            "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L3",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-11-09T01:11:13.683103Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Prototype Pollution through the `copy()` function in `dom.js`. Exploiting this vulnerability is possible via the `p` variable.\r\n\r\n*DISPUTED*\r\nThis vulnerability has been [disputed by the maintainers of the package](https://github.com/xmldom/xmldom/issues/436#issuecomment-1321093759). \r\nCurrently the only viable exploit that has been demonstrated is to pollute the target object (rather then the global object which is generally the case for Prototype Pollution vulnerabilities) and it is yet unclear if this limited attack vector exposes any vulnerability in the context of this package. \r\n\r\nSee the linked [GitHub Issue](https://github.com/xmldom/xmldom/issues/436) for full details on the discussion around the legitimacy and potential revocation of this vulnerability.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/436)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.3)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L1)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L3)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-37616"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-9pgh-qqpf-7wqj"
          ]
        },
        "packageName": "xmldom",
        "proprietary": false,
        "creationTime": "2022-10-11T06:43:58.053658Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-11T06:34:47Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-11T11:36:43Z",
        "modificationTime": "2022-12-26T16:04:03.177916Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-3092935",
        "title": "Improper Input Validation",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
        "credit": [
          "frumioj",
          "karfau"
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "critical",
        "cvssScore": 9.8,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jindw/xmldom/issues/150",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.7.7",
            "title": "GitHub Release"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.4",
            "title": "GitHub Release"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-11-05T01:10:37.555445Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to parsing XML that is not well-formed, and contains multiple top-level elements. All the root nodes are being added to the `childNodes` collection of the `Document`, without reporting or throwing any error.\r\n\r\n## Workarounds\r\nOne of the following approaches might help, depending on your use case:\r\n\r\n1) Instead of searching for elements in the whole DOM, only search in the `documentElement`.\r\n\r\n2) Reject a document with a document that has more than 1 `childNode`.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931)\n- [GitHub Issue](https://github.com/jindw/xmldom/issues/150)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.7.7)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.4)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-39353"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-crh6-fp67-6883"
          ]
        },
        "packageName": "xmldom",
        "proprietary": false,
        "creationTime": "2022-11-02T08:56:15.224765Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-01T17:29:11Z",
        "packageManager": "npm",
        "publicationTime": "2022-11-02T12:25:35.940676Z",
        "modificationTime": "2022-11-06T22:13:44.989571Z",
        "socialTrendAlert": false,
        "severityWithCritical": "critical",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-Y18N-1021887",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Beomjin Lee"
        ],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.0.1",
            ">=5.0.0 <5.0.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.2.2",
          "4.0.1",
          "5.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "y18n",
        "references": [
          {
            "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/yargs/y18n/issues/96",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/yargs/y18n/pull/108",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-15T01:10:30.866399Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-09-01T17:35:19.289005Z"
          },
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-05-03T21:55:35.206553Z"
          }
        ],
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper sanitization.\r\n## PoC by po6ix:\r\n```js\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7774"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-c4w7-xm78-47vh"
          ]
        },
        "packageName": "y18n",
        "proprietary": true,
        "creationTime": "2020-10-25T14:27:16.715665Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-25T14:24:22Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-10T15:27:28Z",
        "modificationTime": "2022-10-15T01:10:30.866399Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "yargs@3.32.0",
          "y18n@3.2.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "yargs@6.5.0",
          "y18n@3.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "y18n",
        "version": "3.2.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\y18n\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:debug:20170905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            ">=1.0.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.6.9",
          "3.1.0"
        ],
        "patches": [
          {
            "id": "patch:npm:debug:20170905:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.872397Z"
          },
          {
            "id": "patch:npm:debug:20170905:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.873422Z"
          },
          {
            "id": "patch:npm:debug:20170905:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.874399Z"
          },
          {
            "id": "patch:npm:debug:20170905:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.875363Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "malicious": false,
        "moduleName": "debug",
        "references": [
          {
            "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/debug/issues/501",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/visionmedia/debug/pull/504",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-01-03T16:21:42.477572Z"
          }
        ],
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "identifiers": {
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "534"
          ],
          "GHSA": [
            "GHSA-gxpj-cx7g-858c"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ]
        },
        "packageName": "debug",
        "proprietary": false,
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "functions_new": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "disclosureTime": "2017-09-05T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-26T03:55:05Z",
        "modificationTime": "2022-01-03T16:21:42.477572Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.9"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "debug",
        "version": "2.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\debug\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:deep-extend:20180409",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.5.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=0.4.0 <0.5.1"
            ],
            "functionId": {
              "filePath": "lib/deep-extend.js",
              "className": null,
              "functionName": "cloneSpecificValue"
            }
          },
          {
            "version": [
              ">=0.2.5 <0.4.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "deepExtend.module.exports"
            }
          },
          {
            "version": [
              ">=0.2.2 <0.2.5"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.deepExtend"
            }
          },
          {
            "version": [
              "0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "deepExtend"
            }
          }
        ],
        "malicious": false,
        "moduleName": "deep-extend",
        "references": [
          {
            "url": "https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/unclechu/node-deep-extend/issues/39",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/unclechu/node-deep-extend/pull/40",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/311333",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T16:28:05.495785Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:L",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-01T17:35:20.205913Z"
          }
        ],
        "description": "## Overview\n[deep-extend](https://www.npmjs.com/package/deep-extend) is a library for Recursive object extending.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\r\n\r\n## PoC by HoLyVieR\r\n```js\r\nvar merge = require('deep-extend');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nmerge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n## References\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub Issue](https://github.com/unclechu/node-deep-extend/issues/39)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/40)\n- [HackerOne Report](https://hackerone.com/reports/311333)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-3750"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "612"
          ],
          "GHSA": [
            "GHSA-hr2v-3952-633q"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-DEEPEXTEND-12120"
          ]
        },
        "packageName": "deep-extend",
        "proprietary": false,
        "creationTime": "2018-04-15T20:11:17.552000Z",
        "functions_new": [
          {
            "version": [
              ">=0.4.0 <0.5.1"
            ],
            "functionId": {
              "filePath": "lib/deep-extend.js",
              "functionName": "cloneSpecificValue"
            }
          },
          {
            "version": [
              ">=0.2.5 <0.4.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "deepExtend.module.exports"
            }
          },
          {
            "version": [
              ">=0.2.2 <0.2.5"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.deepExtend"
            }
          },
          {
            "version": [
              "0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "deepExtend"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-DEEPEXTEND-12120"
        ],
        "disclosureTime": "2018-04-09T20:11:17Z",
        "packageManager": "npm",
        "publicationTime": "2018-04-25T07:45:48Z",
        "modificationTime": "2022-09-01T17:35:20.205913Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "deep-extend@0.4.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.2.7",
          "deep-extend@0.5.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "deep-extend",
        "version": "0.4.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\deep-extend\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:extend:20180424",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.2",
            ">=3.0.0 <3.0.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.2",
          "3.0.2"
        ],
        "patches": [
          {
            "id": "patch:npm:extend:20180424:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/extend/20180424/extend_20180424_0_0_0e68e71d93507fcc391e398bc84abd0666b28190.patch"
            ],
            "version": ">=3.0.0 <3.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.727650Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          }
        ],
        "malicious": false,
        "moduleName": "extend",
        "references": [
          {
            "url": "https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/justmoon/node-extend/pull/48%23issuecomment-398261612",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/381185",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T16:22:51.770343Z"
          }
        ],
        "description": "## Overview\n[extend](https://www.npmjs.com/package/extend) is a port of the classic extend() method from jQuery.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Utilities function can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `extend` to version 2.0.2, 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190)\n- [GitHub PR](https://github.com/justmoon/node-extend/pull/48#issuecomment-398261612)\n- [HackerOne Report](https://hackerone.com/reports/381185)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16492"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "996"
          ],
          "GHSA": [
            "GHSA-qrmc-fj45-qfc2"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-EXTEND-12179"
          ]
        },
        "packageName": "extend",
        "proprietary": false,
        "creationTime": "2018-07-23T17:51:10.908000Z",
        "functions_new": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-EXTEND-12179"
        ],
        "disclosureTime": "2018-04-24T17:51:10Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-23T13:46:08Z",
        "modificationTime": "2022-01-03T16:22:51.770343Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "extend@3.0.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "extend@3.0.2"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "extend",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\extend\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:mime:20170907",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1",
            ">=2.0.0 <2.0.3"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.4.1",
          "2.0.3"
        ],
        "patches": [
          {
            "id": "patch:npm:mime:20170907:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.877450Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "className": null,
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mime",
        "references": [
          {
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/issues/167",
            "title": "GitHub Issue"
          },
          {
            "url": "https://www.npmjs.com/advisories/535",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:21:39.161781Z"
          }
        ],
        "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "535"
          ],
          "GHSA": [
            "GHSA-wrvr-8mpx-r7pp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ]
        },
        "packageName": "mime",
        "proprietary": false,
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "disclosureTime": "2017-09-07T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T05:48:40Z",
        "modificationTime": "2022-01-03T16:21:39.161781Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "mime@1.3.4"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "mime@1.4.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "mime",
        "version": "1.3.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\mime\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:ms:20170412",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.0"
        ],
        "patches": [
          {
            "id": "patch:npm:ms:20170412:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.863964Z"
          },
          {
            "id": "patch:npm:ms:20170412:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.865081Z"
          },
          {
            "id": "patch:npm:ms:20170412:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.866206Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse"
            }
          }
        ],
        "malicious": false,
        "moduleName": "ms",
        "references": [
          {
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/zeit/ms/pull/89",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ]
        },
        "packageName": "ms",
        "proprietary": true,
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "functions_new": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "disclosureTime": "2017-04-11T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-05-15T06:02:45Z",
        "modificationTime": "2022-05-16T13:04:13.342145Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "ms",
        "version": "0.7.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\ms\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20170807",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Dennis Appelt"
        ],
        "semver": {
          "vulnerable": [
            "<3.7.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.7.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/issues/1259",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-01-03T16:21:30.558181Z"
          }
        ],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). It uncompresses responses in memory, and a malicious user may send a specially crafted zip file which will then unzip in the server and cause excessive CPU consumption. This is also known as a `Zip Bomb`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `superagent` to version 3.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1259)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16129"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "479"
          ],
          "GHSA": [
            "GHSA-8225-6cvr-8pqp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-10789"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2017-09-27T11:38:25.465000Z",
        "functions_new": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-10789"
        ],
        "disclosureTime": "2017-08-06T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T11:38:25Z",
        "modificationTime": "2022-01-03T16:21:30.558181Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20181108",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "pszabop"
        ],
        "semver": {
          "vulnerable": [
            "<3.8.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.8.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/superagent/issues/1309",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Information Exposure due to sending the contents of Authorization to third parties.\n## Remediation\nUpgrade `superagent` to version 3.8.1 or higher.\n## References\n- [GitHub Commit](https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4)\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1309)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-12185"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2018-11-08T19:42:02Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-12185"
        ],
        "disclosureTime": "2018-11-08T19:42:02Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-31T13:43:37Z",
        "modificationTime": "2020-12-14T14:41:30.731652Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:utile:20180614",
        "title": "Uninitialized Memory Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "ChALkeR"
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.2,
        "functions": [
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "className": null,
              "functionName": "base64.encode"
            }
          },
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "className": null,
              "functionName": "base64.decode"
            }
          }
        ],
        "malicious": false,
        "moduleName": "utile",
        "references": [
          {
            "url": "https://hackerone.com/reports/321701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[utile](https://www.npmjs.com/package/utile) is a drop-in replacement for util with some additional advantageous functions.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. A malicious user could extract sensitive data from uninitialized memory or to cause a DoS by passing in a large number, in setups where typed user input can be passed.\n\n**Note** Uninitialized Memory Exposure impacts only Node.js 6.x or lower, Denial of Service impacts any Node.js version.\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nThere is no fix version for `utile`.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/321701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-UTILE-12182"
          ]
        },
        "packageName": "utile",
        "proprietary": false,
        "creationTime": "2018-07-23T19:21:17.566000Z",
        "functions_new": [
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "functionName": "base64.encode"
            }
          },
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "functionName": "base64.decode"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-UTILE-12182"
        ],
        "disclosureTime": "2018-06-14T19:21:17.566000Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-24T15:14:13.765000Z",
        "modificationTime": "2020-12-14T14:41:28.499395Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release@1.2.2",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "utile",
        "version": "0.2.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release\\node_modules\\utile\\package.json",
        "parentDepType": "prod"
      }
    ],
    "ok": false,
    "dependencyCount": 151,
    "org": "global-devops-bootcamp",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1+": {
          "licenseType": "LGPL-2.1+",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0+": {
          "licenseType": "LGPL-3.0+",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "54 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-GOT-2932019",
          "title": "Open Redirect",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
          "credit": [
            "Unknown"
          ],
          "semver": {
            "vulnerable": [
              "<11.8.5",
              ">=12.0.0 <12.1.0"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [
            "11.8.5",
            "12.1.0"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.4,
          "functions": [],
          "malicious": false,
          "moduleName": "got",
          "references": [
            {
              "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
              "title": "GitHub Diff"
            },
            {
              "url": "https://github.com/sindresorhus/got/pull/2047",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-06-29T01:11:26.531842Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-11-19T20:57:05.871669Z"
            }
          ],
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-33987"
            ],
            "CWE": [
              "CWE-601"
            ]
          },
          "packageName": "got",
          "proprietary": false,
          "creationTime": "2022-06-19T09:23:24.210132Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-06-19T08:33:16Z",
          "packageManager": "npm",
          "publicationTime": "2022-06-19T15:33:44.269688Z",
          "modificationTime": "2022-11-19T20:57:05.871669Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release@1.2.2",
            "code-push-cli@1.10.0-beta",
            "update-notifier@0.5.0",
            "latest-version@1.0.1",
            "package-json@1.2.0",
            "got@3.3.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "got",
          "version": "3.3.1",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-SHELLJS-2332187",
          "title": "Improper Privilege Management",
          "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
          "credit": [
            "haxatron"
          ],
          "semver": {
            "vulnerable": [
              "<0.8.5"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [
            "0.8.5"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 7.1,
          "functions": [],
          "malicious": false,
          "moduleName": "shelljs",
          "references": [
            {
              "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/shelljs/shelljs/issues/1058",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/shelljs/shelljs/pull/1060",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "high",
              "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
              "cvssV3BaseScore": 7.1,
              "modificationTime": "2022-02-09T16:10:36.984666Z"
            }
          ],
          "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-0144"
            ],
            "CWE": [
              "CWE-269"
            ]
          },
          "packageName": "shelljs",
          "proprietary": false,
          "creationTime": "2022-01-11T12:52:23.829882Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-01-11T12:39:08Z",
          "packageManager": "npm",
          "publicationTime": "2022-01-12T12:49:35.008405Z",
          "modificationTime": "2022-02-09T16:10:36.984666Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release@1.2.2",
            "vsts-task-lib@0.5.13",
            "shelljs@0.3.0"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "shelljs",
          "version": "0.3.0",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-XMLDOM-1534562",
          "title": "Improper Input Validation",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
          "credit": [
            "Unknown"
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 6.5,
          "functions": [],
          "malicious": false,
          "moduleName": "xmldom",
          "references": [
            {
              "url": "https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/xmldom/xmldom/issues/271",
              "title": "GitHub Issue"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-04-26T01:10:30.392784Z"
            }
          ],
          "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It does not correctly escape special characters when serializing elements are removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.\r\n\r\n**Note:**\r\nCustomers who use \"xmldom\" package, should use \"@xmldom/xmldom\" instead, as \"xmldom\" is no longer maintained.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/271)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-32796"
            ],
            "CWE": [
              "CWE-116"
            ],
            "GHSA": [
              "GHSA-5fg8-2547-mr8q"
            ]
          },
          "packageName": "xmldom",
          "proprietary": false,
          "creationTime": "2021-07-28T06:33:12.846430Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2021-07-28T06:31:31Z",
          "packageManager": "npm",
          "publicationTime": "2021-07-28T15:12:14Z",
          "modificationTime": "2022-05-11T12:48:26.463897Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release@1.2.2",
            "code-push-cli@1.10.0-beta",
            "plist@1.2.0",
            "xmldom@0.1.22"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "xmldom",
          "version": "0.1.22",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-XMLDOM-3042242",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:L",
          "credit": [
            "@Supraja9726"
          ],
          "semver": {
            "vulnerable": [
              ">=0.0.0"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 8.5,
          "functions": [],
          "malicious": false,
          "moduleName": "xmldom",
          "references": [
            {
              "url": "https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/xmldom/xmldom/issues/436",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.3",
              "title": "GitHub Release"
            },
            {
              "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L1",
              "title": "Vulnerable Code"
            },
            {
              "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L3",
              "title": "Vulnerable Code"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-11-09T01:11:13.683103Z"
            }
          ],
          "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Prototype Pollution through the `copy()` function in `dom.js`. Exploiting this vulnerability is possible via the `p` variable.\r\n\r\n*DISPUTED*\r\nThis vulnerability has been [disputed by the maintainers of the package](https://github.com/xmldom/xmldom/issues/436#issuecomment-1321093759). \r\nCurrently the only viable exploit that has been demonstrated is to pollute the target object (rather then the global object which is generally the case for Prototype Pollution vulnerabilities) and it is yet unclear if this limited attack vector exposes any vulnerability in the context of this package. \r\n\r\nSee the linked [GitHub Issue](https://github.com/xmldom/xmldom/issues/436) for full details on the discussion around the legitimacy and potential revocation of this vulnerability.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/436)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.3)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L1)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L3)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-37616"
            ],
            "CWE": [
              "CWE-1321"
            ],
            "GHSA": [
              "GHSA-9pgh-qqpf-7wqj"
            ]
          },
          "packageName": "xmldom",
          "proprietary": false,
          "creationTime": "2022-10-11T06:43:58.053658Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-10-11T06:34:47Z",
          "packageManager": "npm",
          "publicationTime": "2022-10-11T11:36:43Z",
          "modificationTime": "2022-12-26T16:04:03.177916Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release@1.2.2",
            "code-push-cli@1.10.0-beta",
            "plist@1.2.0",
            "xmldom@0.1.22"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "xmldom",
          "version": "0.1.22",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-XMLDOM-3092935",
          "title": "Improper Input Validation",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
          "credit": [
            "frumioj",
            "karfau"
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "critical",
          "cvssScore": 9.8,
          "functions": [],
          "malicious": false,
          "moduleName": "xmldom",
          "references": [
            {
              "url": "https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/jindw/xmldom/issues/150",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.7.7",
              "title": "GitHub Release"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.4",
              "title": "GitHub Release"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4",
              "title": "GitHub Release"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-11-05T01:10:37.555445Z"
            }
          ],
          "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to parsing XML that is not well-formed, and contains multiple top-level elements. All the root nodes are being added to the `childNodes` collection of the `Document`, without reporting or throwing any error.\r\n\r\n## Workarounds\r\nOne of the following approaches might help, depending on your use case:\r\n\r\n1) Instead of searching for elements in the whole DOM, only search in the `documentElement`.\r\n\r\n2) Reject a document with a document that has more than 1 `childNode`.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931)\n- [GitHub Issue](https://github.com/jindw/xmldom/issues/150)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.7.7)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.4)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-39353"
            ],
            "CWE": [
              "CWE-20"
            ],
            "GHSA": [
              "GHSA-crh6-fp67-6883"
            ]
          },
          "packageName": "xmldom",
          "proprietary": false,
          "creationTime": "2022-11-02T08:56:15.224765Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-11-01T17:29:11Z",
          "packageManager": "npm",
          "publicationTime": "2022-11-02T12:25:35.940676Z",
          "modificationTime": "2022-11-06T22:13:44.989571Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release@1.2.2",
            "code-push-cli@1.10.0-beta",
            "plist@1.2.0",
            "xmldom@0.1.22"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "xmldom",
          "version": "0.1.22",
          "severityWithCritical": "critical"
        },
        {
          "id": "npm:utile:20180614",
          "title": "Uninitialized Memory Exposure",
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N",
          "credit": [
            "ChALkeR"
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "low",
          "cvssScore": 2.2,
          "functions": [
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "className": null,
                "functionName": "base64.encode"
              }
            },
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "className": null,
                "functionName": "base64.decode"
              }
            }
          ],
          "malicious": false,
          "moduleName": "utile",
          "references": [
            {
              "url": "https://hackerone.com/reports/321701",
              "title": "HackerOne Report"
            }
          ],
          "cvssDetails": [],
          "description": "## Overview\n[utile](https://www.npmjs.com/package/utile) is a drop-in replacement for util with some additional advantageous functions.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. A malicious user could extract sensitive data from uninitialized memory or to cause a DoS by passing in a large number, in setups where typed user input can be passed.\n\n**Note** Uninitialized Memory Exposure impacts only Node.js 6.x or lower, Denial of Service impacts any Node.js version.\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nThere is no fix version for `utile`.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/321701)\n",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-399"
            ],
            "ALTERNATIVE": [
              "SNYK-JS-UTILE-12182"
            ]
          },
          "packageName": "utile",
          "proprietary": false,
          "creationTime": "2018-07-23T19:21:17.566000Z",
          "functions_new": [
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "functionName": "base64.encode"
              }
            },
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "functionName": "base64.decode"
              }
            }
          ],
          "alternativeIds": [
            "SNYK-JS-UTILE-12182"
          ],
          "disclosureTime": "2018-06-14T19:21:17.566000Z",
          "packageManager": "npm",
          "publicationTime": "2018-07-24T15:14:13.765000Z",
          "modificationTime": "2020-12-14T14:41:28.499395Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release@1.2.2",
            "code-push-cli@1.10.0-beta",
            "prompt@0.2.14",
            "utile@0.2.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "utile",
          "version": "0.2.1",
          "severityWithCritical": "low"
        }
      ],
      "upgrade": {
        "code-push-cli@1.10.0-beta": {
          "upgradeTo": "code-push-cli@3.0.0",
          "upgrades": [
            "plist@1.2.0",
            "plist@1.2.0",
            "xmldom@0.1.22",
            "qs@2.3.3",
            "qs@2.3.3",
            "extend@3.0.0",
            "mime@1.3.4",
            "superagent@1.8.3",
            "superagent@1.8.3",
            "i@0.3.5",
            "ini@1.3.4",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "minimatch@3.0.2",
            "minimist@0.0.8",
            "minimist@0.0.8",
            "moment@2.14.1",
            "moment@2.14.1",
            "moment@2.14.1",
            "y18n@3.2.1",
            "brace-expansion@1.1.5",
            "debug@2.2.0",
            "deep-extend@0.4.1",
            "ms@0.7.1"
          ],
          "vulns": [
            "SNYK-JS-PLIST-2405644",
            "npm:plist:20180219",
            "SNYK-JS-XMLDOM-1084960",
            "SNYK-JS-QS-3153490",
            "npm:qs:20170213",
            "npm:extend:20180424",
            "npm:mime:20170907",
            "npm:superagent:20170807",
            "npm:superagent:20181108",
            "SNYK-JS-I-1726768",
            "SNYK-JS-INI-1048974",
            "SNYK-JS-LODASH-1018905",
            "SNYK-JS-LODASH-1040724",
            "SNYK-JS-LODASH-450202",
            "SNYK-JS-LODASH-567746",
            "SNYK-JS-LODASH-608086",
            "SNYK-JS-LODASH-73638",
            "SNYK-JS-LODASH-73639",
            "npm:lodash:20180130",
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-MINIMIST-2429795",
            "SNYK-JS-MINIMIST-559764",
            "SNYK-JS-MOMENT-2440688",
            "npm:moment:20161019",
            "npm:moment:20170905",
            "SNYK-JS-Y18N-1021887",
            "npm:brace-expansion:20170302",
            "npm:debug:20170905",
            "npm:deep-extend:20180409",
            "npm:ms:20170412"
          ]
        }
      },
      "patch": {
        "npm:lodash:20180130": {
          "paths": [
            {
              "code-push-cli > plist > xmlbuilder > lodash": {
                "patched": "2023-01-04T17:54:31.918Z"
              }
            }
          ]
        }
      },
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 36,
    "projectName": "vsts-task-code-push-release",
    "foundProjectCount": 3,
    "displayTargetFile": "Tasks\\codepush-release\\package.json",
    "hasUnknownVersions": false,
    "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1"
  },
  {
    "vulnerabilities": [
      {
        "id": "SNYK-JS-GOT-2932019",
        "title": "Open Redirect",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<11.8.5",
            ">=12.0.0 <12.1.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "11.8.5",
          "12.1.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.4,
        "functions": [],
        "malicious": false,
        "moduleName": "got",
        "references": [
          {
            "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
            "title": "GitHub Diff"
          },
          {
            "url": "https://github.com/sindresorhus/got/pull/2047",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-06-29T01:11:26.531842Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-11-19T20:57:05.871669Z"
          }
        ],
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-33987"
          ],
          "CWE": [
            "CWE-601"
          ]
        },
        "packageName": "got",
        "proprietary": false,
        "creationTime": "2022-06-19T09:23:24.210132Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-06-19T08:33:16Z",
        "packageManager": "npm",
        "publicationTime": "2022-06-19T15:33:44.269688Z",
        "modificationTime": "2022-11-19T20:57:05.871669Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "got@3.3.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "got",
        "version": "3.3.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\got\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-I-1726768",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<0.3.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.3.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "i",
        "references": [
          {
            "url": "https://github.com/pksunkara/inflect/commit/a9a0a8e9561c3487854c7cae42565d9652ec858b",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-07-30T01:10:54.837204Z"
          }
        ],
        "description": "## Overview\n[i](https://www.npmjs.com/package/i) is a custom inflections for nodejs.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) in the `classify` and `underscore` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `i` to version 0.3.7 or higher.\n## References\n- [GitHub Commit](https://github.com/pksunkara/inflect/commit/a9a0a8e9561c3487854c7cae42565d9652ec858b)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-3820"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "i",
        "proprietary": false,
        "creationTime": "2021-09-27T14:50:41.948292Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-09-27T14:21:39Z",
        "packageManager": "npm",
        "publicationTime": "2021-09-27T15:46:41.553181Z",
        "modificationTime": "2022-07-30T01:10:54.837204Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "i@0.3.5"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "i@0.3.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "i",
        "version": "0.3.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\i\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-INI-1048974",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Eugene Lim",
          "Government Technology Agency Cyber Security Group"
        ],
        "semver": {
          "vulnerable": [
            "<1.3.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.3.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "ini",
        "references": [
          {
            "url": "https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7",
            "title": "Eugene Lim - Research Blog Post"
          },
          {
            "url": "https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-12-03T01:11:01.035564Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-10-27T14:23:39.509078Z"
          }
        ],
        "description": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7788"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-qqgx-2p2h-9c37"
          ]
        },
        "packageName": "ini",
        "proprietary": true,
        "creationTime": "2020-12-08T15:34:07.743781Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-12-08T13:02:04Z",
        "packageManager": "npm",
        "publicationTime": "2020-12-10T18:08:38Z",
        "modificationTime": "2022-12-03T01:11:01.035564Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "ini@1.3.4"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "ini@1.3.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "ini",
        "version": "1.3.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\ini\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-450202",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.719849Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/issues/4348",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4336",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4355",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/sailshq/lodash/pull/1",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1065",
            "title": "Node Security Advisory"
          },
          {
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 9.1,
            "modificationTime": "2022-01-03T17:53:52.560412Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1065"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T11:45:02Z",
        "packageManager": "npm",
        "publicationTime": "2019-07-02T11:45:01Z",
        "modificationTime": "2022-08-25T12:14:41.065285Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73638",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "asgerf"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1066",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1068",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1071",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/782",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://hackerone.com/reports/380873",
            "title": "POC: HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-01-03T16:22:51.625949Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16487"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "782",
            "1066",
            "1068",
            "1071"
          ],
          "GHSA": [
            "GHSA-4xc9-xhrj-v574"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-02-03T09:06:37.726000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2018-08-31T18:21:00Z",
        "packageManager": "npm",
        "publicationTime": "2019-02-01T18:21:00Z",
        "modificationTime": "2022-09-13T14:35:06.157983Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73639",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "cristianstaicu"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 4.4,
        "functions": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4450",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/issues/3359",
            "title": "POC: GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T17:53:28.079217Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-1010266"
          ],
          "CWE": [
            "CWE-185"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2019-02-03T09:18:05.060741Z",
        "functions_new": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2017-09-05T09:14:29Z",
        "packageManager": "npm",
        "publicationTime": "2019-04-05T09:14:22Z",
        "modificationTime": "2022-04-05T12:27:32.267901Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:lodash:20180130",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.5"
        ],
        "patches": [
          {
            "id": "patch:npm:lodash:20180130:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20180130/20180130_0_0_lodash_d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a.patch"
            ],
            "version": "=3.10.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.883000Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.3,
        "functions": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/310443",
            "title": "HackerOne Report"
          },
          {
            "url": "https://www.npmjs.com/advisories/1067",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1069",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1070",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T16:27:45.509249Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-3721"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "577",
            "1067",
            "1069",
            "1070"
          ],
          "GHSA": [
            "GHSA-fvqr-27wr-82fm",
            "GHSA-5947-m4fg-xhqg",
            "GHSA-46fh-8fc5-xcwx",
            "GHSA-2m96-9w4j-wgv7"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-LODASH-174180"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2018-02-12T22:28:27.654000Z",
        "functions_new": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-LODASH-174180"
        ],
        "disclosureTime": "2018-01-30T22:28:27Z",
        "packageManager": "npm",
        "publicationTime": "2018-02-14T13:22:50Z",
        "modificationTime": "2022-08-25T12:14:41.090425Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmlbuilder@4.0.0",
          "lodash@3.10.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "name": "lodash",
        "version": "3.10.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1018905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Liyuan Chen"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/5065",
            "title": "GitHub Fix PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-09-14T01:10:48.134557Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-28500"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-10-16T16:48:40.985673Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-16T16:47:34Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:49Z",
        "modificationTime": "2022-09-14T01:10:48.134557Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-1040724",
        "title": "Command Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C",
        "credit": [
          "Marc Hassan"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.21"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.21"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 7.2,
            "modificationTime": "2022-09-14T01:10:48.257735Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-23337"
          ],
          "CWE": [
            "CWE-78"
          ],
          "GHSA": [
            "GHSA-35jh-r3h4-6jhm"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2020-11-17T14:07:17.048472Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-11-17T13:02:10Z",
        "packageManager": "npm",
        "publicationTime": "2021-02-15T11:50:50Z",
        "modificationTime": "2022-09-14T01:10:48.257735Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.21"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-450202",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.12"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.12"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-450202:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch"
            ],
            "version": "=4.17.11",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.719849Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/issues/4348",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4336",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4355",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/sailshq/lodash/pull/1",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1065",
            "title": "Node Security Advisory"
          },
          {
            "url": "https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/",
            "title": "Snyk Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 9.1,
            "modificationTime": "2022-01-03T17:53:52.560412Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-10744"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1065"
          ],
          "GHSA": [
            "GHSA-jf85-cpcp-j695"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-06-19T12:04:21.040000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.3 <4.17.12"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.customDefaultsMerge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2019-06-19T11:45:02Z",
        "packageManager": "npm",
        "publicationTime": "2019-07-02T11:45:01Z",
        "modificationTime": "2022-08-25T12:14:41.065285Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.12"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-567746",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C",
        "credit": [
          "posix"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.20"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.20"
        ],
        "patches": [
          {
            "id": "patch:SNYK-JS-LODASH-567746:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch"
            ],
            "version": ">=4.14.2",
            "comments": [],
            "modificationTime": "2020-04-30T14:28:46.729327Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.2,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4759",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H",
            "cvssV3BaseScore": 7.4,
            "modificationTime": "2022-05-13T01:10:54.704725Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-8203"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1523"
          ],
          "GHSA": [
            "GHSA-p6mc-m468-83gw"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-04-28T14:32:13.683154Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-04-27T22:14:18Z",
        "packageManager": "npm",
        "publicationTime": "2020-04-28T14:59:14Z",
        "modificationTime": "2022-08-25T12:14:41.221655Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.20"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-608086",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "awarau"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.17"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.17"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://hackerone.com/reports/864701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n## PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2020-08-21T12:52:58.443440Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-08-21T10:34:29Z",
        "packageManager": "npm",
        "publicationTime": "2020-08-21T12:53:03Z",
        "modificationTime": "2022-08-25T12:14:41.622393Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.17"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73638",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "asgerf"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://www.npmjs.com/advisories/1066",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1068",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1071",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/782",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://hackerone.com/reports/380873",
            "title": "POC: HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-01-03T16:22:51.625949Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16487"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "782",
            "1066",
            "1068",
            "1071"
          ],
          "GHSA": [
            "GHSA-4xc9-xhrj-v574"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2019-02-03T09:06:37.726000Z",
        "functions_new": [
          {
            "version": [
              ">=4.17.5 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "safeGet"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.assignMergeValue"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.3"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.mergeDefaults"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2018-08-31T18:21:00Z",
        "packageManager": "npm",
        "publicationTime": "2019-02-01T18:21:00Z",
        "modificationTime": "2022-09-13T14:35:06.157983Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.11"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-LODASH-73639",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "cristianstaicu"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.11"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.11"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 4.4,
        "functions": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4450",
            "title": "GitHub PR"
          },
          {
            "url": "https://github.com/lodash/lodash/issues/3359",
            "title": "POC: GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T17:53:28.079217Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
        "identifiers": {
          "CVE": [
            "CVE-2019-1010266"
          ],
          "CWE": [
            "CWE-185"
          ]
        },
        "packageName": "lodash",
        "proprietary": false,
        "creationTime": "2019-02-03T09:18:05.060741Z",
        "functions_new": [
          {
            "version": [
              ">=4.15.0 <4.17.11"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "hasUnicodeWord"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2017-09-05T09:14:29Z",
        "packageManager": "npm",
        "publicationTime": "2019-04-05T09:14:22Z",
        "modificationTime": "2022-04-05T12:27:32.267901Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.11"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:lodash:20180130",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "semver": {
          "vulnerable": [
            "<4.17.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.17.5"
        ],
        "patches": [
          {
            "id": "patch:npm:lodash:20180130:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/lodash/20180130/20180130_0_0_lodash_d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a.patch"
            ],
            "version": "=3.10.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.883000Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.3,
        "functions": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "className": null,
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "className": null,
              "functionName": "merge"
            }
          }
        ],
        "malicious": false,
        "moduleName": "lodash",
        "references": [
          {
            "url": "https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/lodash/lodash/pull/4337",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/310443",
            "title": "HackerOne Report"
          },
          {
            "url": "https://www.npmjs.com/advisories/1067",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1069",
            "title": "NPM Security Advisory"
          },
          {
            "url": "https://www.npmjs.com/advisories/1070",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 6.5,
            "modificationTime": "2022-01-03T16:27:45.509249Z"
          }
        ],
        "description": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-3721"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "577",
            "1067",
            "1069",
            "1070"
          ],
          "GHSA": [
            "GHSA-fvqr-27wr-82fm",
            "GHSA-5947-m4fg-xhqg",
            "GHSA-46fh-8fc5-xcwx",
            "GHSA-2m96-9w4j-wgv7"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-LODASH-174180"
          ]
        },
        "packageName": "lodash",
        "proprietary": true,
        "creationTime": "2018-02-12T22:28:27.654000Z",
        "functions_new": [
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMerge"
            }
          },
          {
            "version": [
              ">=4.0.0 <4.17.5"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=3.0.0 <4.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "runInContext.baseMergeDeep"
            }
          },
          {
            "version": [
              ">=2.0.0 <3.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=1.1.0 <2.0.0"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "runInContext.merge"
            }
          },
          {
            "version": [
              ">=0.9.0 <1.0.0"
            ],
            "functionId": {
              "filePath": "lodash.js",
              "functionName": "merge"
            }
          },
          {
            "version": [
              ">= 1.0.0 <1.0.3"
            ],
            "functionId": {
              "filePath": "dist/lodash.js",
              "functionName": "merge"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-LODASH-174180"
        ],
        "disclosureTime": "2018-01-30T22:28:27Z",
        "packageManager": "npm",
        "publicationTime": "2018-02-14T13:22:50Z",
        "modificationTime": "2022-08-25T12:14:41.090425Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.13.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "xml2js@0.4.17",
          "xmlbuilder@4.2.1",
          "lodash@4.17.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "lodash",
        "version": "4.13.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xml2js\\node_modules\\lodash\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMATCH-3050818",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.5"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "minimatch",
        "references": [
          {
            "url": "https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:40:17.490683Z"
          },
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-10-20T01:10:31.056597Z"
          }
        ],
        "description": "## Overview\n[minimatch](https://www.npmjs.com/package/minimatch) is a minimal matching utility.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `braceExpand` function in `minimatch.js`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `minimatch` to version 3.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/isaacs/minimatch/commit/a8763f4388e51956be62dc6025cec1126beeb5e6)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-3517"
          ],
          "CWE": [
            "CWE-1333"
          ]
        },
        "packageName": "minimatch",
        "proprietary": false,
        "creationTime": "2022-10-18T06:10:47.980262Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-18T06:00:25Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-18T06:29:18.078950Z",
        "modificationTime": "2022-11-27T21:40:17.490683Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimatch",
        "version": "3.0.2",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimatch\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/substack/minimist/issues/164",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-11-25T14:17:13.977821Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "modificationTime": "2022-11-25T14:17:13.977821Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.2",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-03T23:19:09.248741Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-09-01T16:53:55.159376Z"
          },
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-04-23T01:11:18.536458Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "modificationTime": "2022-09-01T16:53:55.159376Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/substack/minimist/issues/164",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-11-25T14:17:13.977821Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "modificationTime": "2022-11-25T14:17:13.977821Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.2",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-03T23:19:09.248741Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-09-01T16:53:55.159376Z"
          },
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-04-23T01:11:18.536458Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "modificationTime": "2022-09-01T16:53:55.159376Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.1",
          "minimist@0.0.8"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "configstore@1.4.0",
          "mkdirp@0.5.2",
          "minimist@1.2.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "0.0.8",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-2429795",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<1.2.6"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.2.6"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d",
            "title": "Fix Commit"
          },
          {
            "url": "https://github.com/substack/minimist/issues/164",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/substack/minimist/blob/master/index.js%23L69",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-05-18T11:05:33.152638Z"
          },
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-04-13T01:10:15.021168Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-11-25T14:17:13.977821Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-44906"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "SNYK": [
            "SNYK-JS-MINIMIST-559764"
          ]
        },
        "packageName": "minimist",
        "proprietary": false,
        "creationTime": "2022-03-18T13:02:08.840039Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-03-18T12:24:05Z",
        "packageManager": "npm",
        "publicationTime": "2022-03-21T12:09:35Z",
        "modificationTime": "2022-11-25T14:17:13.977821Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.6"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\rc\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MINIMIST-559764",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Snyk Security Team"
        ],
        "semver": {
          "vulnerable": [
            "<0.2.1",
            ">=1.0.0 <1.2.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.2.1",
          "1.2.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.6,
        "functions": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "malicious": false,
        "moduleName": "minimist",
        "references": [
          {
            "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a",
            "title": "Command Injection PoC"
          },
          {
            "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94",
            "title": "GitHub Fix Commit #1"
          },
          {
            "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab",
            "title": "GitHub Fix Commit #2"
          },
          {
            "url": "https://snyk.io/blog/prototype-pollution-minimist/",
            "title": "Snyk Research Blog"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 8.1,
            "modificationTime": "2022-05-03T23:19:09.248741Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-09-01T16:53:55.159376Z"
          },
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 5.6,
            "modificationTime": "2022-04-23T01:11:18.536458Z"
          }
        ],
        "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7598"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "1179"
          ],
          "GHSA": [
            "GHSA-vh95-rmgr-6w4m"
          ]
        },
        "packageName": "minimist",
        "proprietary": true,
        "creationTime": "2020-03-11T08:25:47.093051Z",
        "functions_new": [
          {
            "version": [
              "<0.2.1",
              ">=1.0.0 <1.1.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "setKey"
            }
          },
          {
            "version": [
              "<0.2.1",
              ">=1.1.1 <1.2.3"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.setKey"
            }
          }
        ],
        "alternativeIds": [],
        "disclosureTime": "2020-03-10T08:22:24Z",
        "packageManager": "npm",
        "publicationTime": "2020-03-11T08:22:19Z",
        "modificationTime": "2022-09-01T16:53:55.159376Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "minimist@1.2.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "minimist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\rc\\node_modules\\minimist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-MOMENT-2440688",
        "title": "Directory Traversal",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<2.29.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.29.2"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "moment",
        "references": [
          {
            "url": "https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-07-30T13:11:10.093622Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-27T21:37:12.591335Z"
          }
        ],
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-24785"
          ],
          "CWE": [
            "CWE-22"
          ],
          "GHSA": [
            "GHSA-8hfj-j24r-96c4"
          ]
        },
        "packageName": "moment",
        "proprietary": false,
        "creationTime": "2022-04-05T08:46:07.677588Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-04-05T08:39:23Z",
        "packageManager": "npm",
        "publicationTime": "2022-04-05T12:30:50.878091Z",
        "modificationTime": "2022-11-27T21:37:12.591335Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "moment@2.14.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "moment@2.29.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "moment",
        "version": "2.14.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\moment\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:moment:20161019",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<2.15.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.15.2"
        ],
        "patches": [
          {
            "id": "patch:npm:moment:20161019:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_1.patch"
            ],
            "version": "<2.15.2 >=2.14.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.848228Z"
          },
          {
            "id": "patch:npm:moment:20161019:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_0.patch"
            ],
            "version": "<2.14.0 >=2.12.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.849308Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.9,
        "functions": [],
        "malicious": false,
        "moduleName": "moment",
        "references": [
          {
            "url": "https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9",
            "title": "GitHub Commit"
          },
          {
            "url": "https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc",
            "title": "Proof of concept"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\r\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\r\n\r\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and `format` input can be controlled by the user.\r\n\r\nAn attacker can provide a specially crafted input to the `format` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\r\n\r\n## Disclosure Timeline\r\n- October 19th, 2016 - Reported the issue to package owner.\r\n- October 19th, 2016 - Issue acknowledged by package owner.\r\n- October 24th, 2016 - Issue fixed and version `2.15.2` released.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## References\r\n- [Proof of concept](https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc)\r\n- [Fix commit](https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MOMENT-10164"
          ]
        },
        "packageName": "moment",
        "proprietary": true,
        "creationTime": "2016-10-23T06:57:59.675000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-MOMENT-10164"
        ],
        "disclosureTime": "2016-10-18T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2016-10-24T06:57:59Z",
        "modificationTime": "2020-12-14T14:41:49.306035Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "moment@2.14.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "moment@2.15.2"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "moment",
        "version": "2.14.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\moment\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:moment:20170905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            "<2.19.3"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.19.3"
        ],
        "patches": [
          {
            "id": "patch:npm:moment:20170905:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/moment/20170905/moment_0_0_69ed9d44957fa6ab12b73d2ae29d286a857b80eb.patch"
            ],
            "version": "<2.19.3 >=2.16.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.878422Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "monthsShortRegex"
            }
          },
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "monthsRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "weekdaysRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "weekdaysShortRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "className": null,
              "functionName": "weekdaysMinRegex"
            }
          }
        ],
        "malicious": false,
        "moduleName": "moment",
        "references": [
          {
            "url": "https://github.com/moment/moment/issues/4163",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/moment/moment/pull/4326",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-02-15T04:10:25.236941Z"
          }
        ],
        "description": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i`) in order to parse dates specified as strings. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `moment` to version 2.19.3 or higher.\n## References\n- [GitHub Issue](https://github.com/moment/moment/issues/4163)\n- [GitHub PR](https://github.com/moment/moment/pull/4326)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-18214"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "532"
          ],
          "GHSA": [
            "GHSA-446m-mv8f-q348"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MOMENT-10841"
          ]
        },
        "packageName": "moment",
        "proprietary": false,
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "functions_new": [
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "monthsShortRegex"
            }
          },
          {
            "version": [
              "<2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "monthsRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "weekdaysRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "weekdaysShortRegex"
            }
          },
          {
            "version": [
              ">=2.13.0 <2.19.3"
            ],
            "functionId": {
              "filePath": "moment.js",
              "functionName": "weekdaysMinRegex"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MOMENT-10841"
        ],
        "disclosureTime": "2017-09-05T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-11-28T14:47:22Z",
        "modificationTime": "2022-02-15T04:10:25.236941Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "moment@2.14.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "moment@2.19.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "moment",
        "version": "2.14.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\moment\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-PLIST-2405644",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:L/E:P",
        "credit": [
          "keerok"
        ],
        "semver": {
          "vulnerable": [
            "<3.0.4"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.4"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7,
        "functions": [],
        "malicious": false,
        "moduleName": "plist",
        "references": [
          {
            "url": "https://github.com/TooTallNate/plist.js/issues/114",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-07-15T01:11:21.152408Z"
          }
        ],
        "description": "## Overview\n[plist](https://github.com/TooTallNate/node-plist) is a Mac OS X Plist parser/builder for Node.js and browsers.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `.parse()`, exploiting this vulnerability may lead to Denial of Service (DoS) and Remote Code Execution.\r\n\r\n## PoC:\r\n\r\n```js\r\nvar plist = require('plist');\r\nvar xmlPollution = `\r\n<plist version=\"1.0\">\r\n  <dict>\r\n    <key>__proto__</key>\r\n    <dict>\r\n      <key>length</key>\r\n      <string>polluted</string>\r\n    </dict>\r\n  </dict>\r\n</plist>`;\r\nconsole.log(plist.parse(xmlPollution).length); // polluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `plist` to version 3.0.4 or higher.\n## References\n- [GitHub Issue](https://github.com/TooTallNate/plist.js/issues/114)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-22912"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "plist",
        "proprietary": false,
        "creationTime": "2022-02-18T11:25:21.980565Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-02-18T11:12:32Z",
        "packageManager": "npm",
        "publicationTime": "2022-02-18T15:33:53.594042Z",
        "modificationTime": "2022-07-15T01:11:21.152408Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@3.0.0",
          "plist@3.0.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "plist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\plist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:plist:20180219",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:L/E:P/RL:O/RC:C",
        "credit": [
          "Jamie Davis"
        ],
        "semver": {
          "vulnerable": [
            ">=1.2.0 <3.0.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.0.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "plist",
        "references": [
          {
            "url": "https://github.com/TooTallNate/plist.js/commit/a85b9d3559859d58e44d099a6a40bf8c13ab7e66",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/TooTallNate/plist.js/issues/89",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[`plist`](https://www.npmjs.com/package/plist) is a Mac OS X Plist parser/builder for Node.js and browsers\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks due to bundling a vulnerable version of the XMLBuilder package. This can cause an impact of about 10 seconds matching time for data 60 characters long.\n\n## Disclosure Timeline\n* Feb 5th, 2018 - Initial Disclosure to package owner\n* Feb 6th, 2018 - Initial Response from package owner\n* Mar 18th, 2018 - Fix issued\n* Apr 15th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n\n## Remediation\nUpgrade `plist` to version 3.0.1 or higher.\n\n## References\n- [GitHub Commit](https://github.com/TooTallNate/plist.js/commit/a85b9d3559859d58e44d099a6a40bf8c13ab7e66)\n- [GitHub Issue](https://github.com/TooTallNate/plist.js/issues/89)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-PLIST-11087"
          ]
        },
        "packageName": "plist",
        "proprietary": true,
        "creationTime": "2018-04-15T15:16:33.857000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-PLIST-11087"
        ],
        "disclosureTime": "2018-04-15T15:16:33.857000Z",
        "packageManager": "npm",
        "publicationTime": "2018-04-15T15:16:33.857000Z",
        "modificationTime": "2020-12-14T14:41:49.474777Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@3.0.0",
          "plist@3.0.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "plist",
        "version": "1.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\plist\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-QS-3153490",
        "title": "Prototype Poisoning",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P",
        "credit": [
          "BRAUN Nathanael",
          "BRISSAUD Johan"
        ],
        "semver": {
          "vulnerable": [
            "<6.2.4",
            ">=6.3.0 <6.3.3",
            ">=6.4.0 <6.4.1",
            ">=6.5.0 <6.5.3",
            ">=6.6.0 <6.6.1",
            ">=6.7.0 <6.7.3",
            ">=6.8.0 <6.8.3",
            ">=6.9.0 <6.9.7",
            ">=6.10.0 <6.10.3"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.2.4",
          "6.3.3",
          "6.4.1",
          "6.5.3",
          "6.6.1",
          "6.7.3",
          "6.8.3",
          "6.9.7",
          "6.10.3"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/pull/428",
            "title": "GitHub PR"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2150323",
            "title": "RedHat Bugzilla Bug"
          },
          {
            "url": "https://github.com/n8tz/CVE-2022-24999",
            "title": "Researcher Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-11-29T01:11:13.913238Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-12-03T13:46:25.900727Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n## References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-24999"
          ],
          "CWE": [
            "CWE-1321"
          ]
        },
        "packageName": "qs",
        "proprietary": false,
        "creationTime": "2022-12-04T11:01:47.782869Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-26T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2022-12-04T12:24:32.307833Z",
        "modificationTime": "2022-12-06T09:33:17.364321Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.3"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:qs:20170213",
        "title": "Prototype Override Protection Bypass",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<6.0.4",
            ">=6.1.0 <6.1.2",
            ">=6.2.0 <6.2.3",
            ">=6.3.0 <6.3.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "6.0.4",
          "6.1.2",
          "6.2.3",
          "6.3.2"
        ],
        "patches": [
          {
            "id": "patch:npm:qs:20170213:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.855245Z"
          },
          {
            "id": "patch:npm:qs:20170213:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.856271Z"
          },
          {
            "id": "patch:npm:qs:20170213:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.857318Z"
          },
          {
            "id": "patch:npm:qs:20170213:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.858334Z"
          },
          {
            "id": "patch:npm:qs:20170213:4",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.859411Z"
          },
          {
            "id": "patch:npm:qs:20170213:5",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.860523Z"
          },
          {
            "id": "patch:npm:qs:20170213:6",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.861504Z"
          },
          {
            "id": "patch:npm:qs:20170213:7",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.862615Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.5,
        "functions": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "className": null,
              "functionName": "internals.parseObject"
            }
          }
        ],
        "malicious": false,
        "moduleName": "qs",
        "references": [
          {
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/ljharb/qs/issues/200",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:11:34.280653Z"
          }
        ],
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-1000048"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-gqgv-6jq5-jjj9"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ]
        },
        "packageName": "qs",
        "proprietary": true,
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "functions_new": [
          {
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObject"
            }
          },
          {
            "version": [
              ">=6.3.1 <6.3.2"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObjectRecursive"
            }
          },
          {
            "version": [
              "<6.0.4"
            ],
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "internals.parseObject"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "disclosureTime": "2017-02-13T00:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-03-01T10:00:54Z",
        "modificationTime": "2022-01-03T16:11:34.280653Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "qs@2.3.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "qs@6.5.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "qs",
        "version": "2.3.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\qs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "shelljs@0.6.0"
        ],
        "upgradePath": [
          false,
          "shelljs@0.8.5"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.6.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-SHELLJS-2332187",
        "title": "Improper Privilege Management",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H/E:P",
        "credit": [
          "haxatron"
        ],
        "semver": {
          "vulnerable": [
            "<0.8.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.8.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.1,
        "functions": [],
        "malicious": false,
        "moduleName": "shelljs",
        "references": [
          {
            "url": "https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/shelljs/shelljs/issues/1058",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/shelljs/shelljs/pull/1060",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
            "cvssV3BaseScore": 7.1,
            "modificationTime": "2022-02-09T16:10:36.984666Z"
          }
        ],
        "description": "## Overview\n[shelljs](None) is a wrapper for the Unix shell commands for Node.js.\n\nAffected versions of this package are vulnerable to Improper Privilege Management. When `ShellJS` is used to create shell scripts which may be running as `root`, users with low-level privileges on the system can leak sensitive information such as passwords (depending on implementation) from the standard output of the privileged process OR shutdown privileged `ShellJS` processes via the `exec` function when triggering EACCESS errors.\r\n\r\n**Note:** Thi only impacts the synchronous version of `shell.exec()`.\n## Remediation\nUpgrade `shelljs` to version 0.8.5 or higher.\n## References\n- [GitHub Commit](https://github.com/shelljs/shelljs/commit/d919d22dd6de385edaa9d90313075a77f74b338c)\n- [GitHub Issue](https://github.com/shelljs/shelljs/issues/1058)\n- [GitHub PR](https://github.com/shelljs/shelljs/pull/1060)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-0144"
          ],
          "CWE": [
            "CWE-269"
          ]
        },
        "packageName": "shelljs",
        "proprietary": false,
        "creationTime": "2022-01-11T12:52:23.829882Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-01-11T12:39:08Z",
        "packageManager": "npm",
        "publicationTime": "2022-01-12T12:49:35.008405Z",
        "modificationTime": "2022-02-09T16:10:36.984666Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "vsts-task-lib@0.5.13",
          "shelljs@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "shelljs",
        "version": "0.3.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\vsts-task-lib\\node_modules\\shelljs\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-1084960",
        "title": "XML External Entity (XXE) Injection",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.4,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/security/advisories/GHSA-h6q6-9hqw-rwfv",
            "title": "GitHub Advisory"
          },
          {
            "url": "https://github.com/xmldom/xmldom/commit/d4201b9dfbf760049f457f9f08a3888d48835135",
            "title": "GitHub Commit"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 4.3,
            "modificationTime": "2022-01-03T16:35:17.615961Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. Does not correctly preserve system identifiers, FPIs or namespaces when repeatedly parsing and serializing maliciously crafted documents.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade `xmldom` to version 0.5.0 or higher.\n## References\n- [GitHub Advisory](https://github.com/xmldom/xmldom/security/advisories/GHSA-h6q6-9hqw-rwfv)\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/d4201b9dfbf760049f457f9f08a3888d48835135)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-21366"
          ],
          "CWE": [
            "CWE-611"
          ],
          "GHSA": [
            "GHSA-h6q6-9hqw-rwfv"
          ]
        },
        "packageName": "xmldom",
        "proprietary": true,
        "creationTime": "2021-03-10T15:59:11.081028Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-03-10T15:34:50Z",
        "packageManager": "npm",
        "publicationTime": "2021-03-10T16:31:47Z",
        "modificationTime": "2022-01-03T16:35:17.615961Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [
          false,
          "code-push-cli@3.0.0",
          "plist@3.0.2",
          "xmldom@0.5.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-1534562",
        "title": "Improper Input Validation",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.5,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/xmldom/xmldom/issues/271",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-04-26T01:10:30.392784Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It does not correctly escape special characters when serializing elements are removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.\r\n\r\n**Note:**\r\nCustomers who use \"xmldom\" package, should use \"@xmldom/xmldom\" instead, as \"xmldom\" is no longer maintained.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/271)\n",
        "identifiers": {
          "CVE": [
            "CVE-2021-32796"
          ],
          "CWE": [
            "CWE-116"
          ],
          "GHSA": [
            "GHSA-5fg8-2547-mr8q"
          ]
        },
        "packageName": "xmldom",
        "proprietary": false,
        "creationTime": "2021-07-28T06:33:12.846430Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2021-07-28T06:31:31Z",
        "packageManager": "npm",
        "publicationTime": "2021-07-28T15:12:14Z",
        "modificationTime": "2022-05-11T12:48:26.463897Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-3042242",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:L",
        "credit": [
          "@Supraja9726"
        ],
        "semver": {
          "vulnerable": [
            ">=0.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 8.5,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/xmldom/xmldom/issues/436",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.3",
            "title": "GitHub Release"
          },
          {
            "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L1",
            "title": "Vulnerable Code"
          },
          {
            "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L3",
            "title": "Vulnerable Code"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-11-09T01:11:13.683103Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Prototype Pollution through the `copy()` function in `dom.js`. Exploiting this vulnerability is possible via the `p` variable.\r\n\r\n*DISPUTED*\r\nThis vulnerability has been [disputed by the maintainers of the package](https://github.com/xmldom/xmldom/issues/436#issuecomment-1321093759). \r\nCurrently the only viable exploit that has been demonstrated is to pollute the target object (rather then the global object which is generally the case for Prototype Pollution vulnerabilities) and it is yet unclear if this limited attack vector exposes any vulnerability in the context of this package. \r\n\r\nSee the linked [GitHub Issue](https://github.com/xmldom/xmldom/issues/436) for full details on the discussion around the legitimacy and potential revocation of this vulnerability.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/436)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.3)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L1)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L3)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-37616"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-9pgh-qqpf-7wqj"
          ]
        },
        "packageName": "xmldom",
        "proprietary": false,
        "creationTime": "2022-10-11T06:43:58.053658Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-10-11T06:34:47Z",
        "packageManager": "npm",
        "publicationTime": "2022-10-11T11:36:43Z",
        "modificationTime": "2022-12-26T16:04:03.177916Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-XMLDOM-3092935",
        "title": "Improper Input Validation",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
        "credit": [
          "frumioj",
          "karfau"
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "critical",
        "cvssScore": 9.8,
        "functions": [],
        "malicious": false,
        "moduleName": "xmldom",
        "references": [
          {
            "url": "https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/jindw/xmldom/issues/150",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.7.7",
            "title": "GitHub Release"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.4",
            "title": "GitHub Release"
          },
          {
            "url": "https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4",
            "title": "GitHub Release"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-11-05T01:10:37.555445Z"
          }
        ],
        "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to parsing XML that is not well-formed, and contains multiple top-level elements. All the root nodes are being added to the `childNodes` collection of the `Document`, without reporting or throwing any error.\r\n\r\n## Workarounds\r\nOne of the following approaches might help, depending on your use case:\r\n\r\n1) Instead of searching for elements in the whole DOM, only search in the `documentElement`.\r\n\r\n2) Reject a document with a document that has more than 1 `childNode`.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931)\n- [GitHub Issue](https://github.com/jindw/xmldom/issues/150)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.7.7)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.4)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4)\n",
        "identifiers": {
          "CVE": [
            "CVE-2022-39353"
          ],
          "CWE": [
            "CWE-20"
          ],
          "GHSA": [
            "GHSA-crh6-fp67-6883"
          ]
        },
        "packageName": "xmldom",
        "proprietary": false,
        "creationTime": "2022-11-02T08:56:15.224765Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2022-11-01T17:29:11Z",
        "packageManager": "npm",
        "publicationTime": "2022-11-02T12:25:35.940676Z",
        "modificationTime": "2022-11-06T22:13:44.989571Z",
        "socialTrendAlert": false,
        "severityWithCritical": "critical",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "plist@1.2.0",
          "xmldom@0.1.22"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "xmldom",
        "version": "0.1.22",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\xmldom\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "SNYK-JS-Y18N-1021887",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Beomjin Lee"
        ],
        "semver": {
          "vulnerable": [
            "<3.2.2",
            ">=4.0.0 <4.0.1",
            ">=5.0.0 <5.0.5"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "3.2.2",
          "4.0.1",
          "5.0.5"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [],
        "malicious": false,
        "moduleName": "y18n",
        "references": [
          {
            "url": "https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/yargs/y18n/issues/96",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/yargs/y18n/pull/108",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-10-15T01:10:30.866399Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-09-01T17:35:19.289005Z"
          },
          {
            "assigner": "SUSE",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvssV3BaseScore": 7.3,
            "modificationTime": "2022-05-03T21:55:35.206553Z"
          }
        ],
        "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution due to improper sanitization.\r\n## PoC by po6ix:\r\n```js\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25)\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
        "identifiers": {
          "CVE": [
            "CVE-2020-7774"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "GHSA": [
            "GHSA-c4w7-xm78-47vh"
          ]
        },
        "packageName": "y18n",
        "proprietary": true,
        "creationTime": "2020-10-25T14:27:16.715665Z",
        "functions_new": [],
        "alternativeIds": [],
        "disclosureTime": "2020-10-25T14:24:22Z",
        "packageManager": "npm",
        "publicationTime": "2020-11-10T15:27:28Z",
        "modificationTime": "2022-10-15T01:10:30.866399Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "yargs@3.32.0",
          "y18n@3.2.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "yargs@6.5.0",
          "y18n@3.2.2"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "y18n",
        "version": "3.2.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\y18n\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "vsts-task-lib@0.5.13",
          "glob@6.0.4",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:brace-expansion:20170302",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "credit": [
          "kamael"
        ],
        "semver": {
          "vulnerable": [
            "<1.1.7"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.1.7"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 6.2,
        "functions": [],
        "malicious": false,
        "moduleName": "brace-expansion",
        "references": [
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/issues/33",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/juliangruber/brace-expansion/pull/35",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:23:57.810747Z"
          }
        ],
        "description": "## Overview\r\n[`brace-expansion`](https://www.npmjs.com/package/brace-expansion) is a package that performs brace expansion as known from sh/bash.\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `brace-expansion` to version 1.1.7 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/juliangruber/brace-expansion/pull/35)\r\n- [GitHub Issue](https://github.com/juliangruber/brace-expansion/issues/33)\r\n- [GitHub Commit](https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3)",
        "identifiers": {
          "CVE": [
            "CVE-2017-18077"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "338"
          ],
          "GHSA": [
            "GHSA-832h-xg76-4gv6"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-BRACEEXPANSION-10483"
          ]
        },
        "packageName": "brace-expansion",
        "proprietary": false,
        "creationTime": "2017-04-26T09:19:21.663000Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-BRACEEXPANSION-10483"
        ],
        "disclosureTime": "2017-03-01T22:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-04-26T09:19:21Z",
        "modificationTime": "2022-01-03T16:23:57.810747Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.5"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "prompt@0.2.14",
          "utile@0.2.1",
          "rimraf@2.5.3",
          "glob@7.0.5",
          "minimatch@3.0.2",
          "brace-expansion@1.1.7"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "brace-expansion",
        "version": "1.1.5",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\brace-expansion\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:debug:20170905",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            ">=1.0.0 <2.6.9",
            ">=3.0.0 <3.1.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.6.9",
          "3.1.0"
        ],
        "patches": [
          {
            "id": "patch:npm:debug:20170905:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch"
            ],
            "version": ">= 3.0.0 <=3.0.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.872397Z"
          },
          {
            "id": "patch:npm:debug:20170905:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.5.1 <2.6.9",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.873422Z"
          },
          {
            "id": "patch:npm:debug:20170905:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.4.0 <2.5.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.874399Z"
          },
          {
            "id": "patch:npm:debug:20170905:3",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch"
            ],
            "version": ">=2.0.0 <2.4.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.875363Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "className": null,
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "malicious": false,
        "moduleName": "debug",
        "references": [
          {
            "url": "https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/debug/issues/501",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/visionmedia/debug/pull/504",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "cvssV3BaseScore": 5.3,
            "modificationTime": "2022-01-03T16:21:42.477572Z"
          }
        ],
        "description": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
        "identifiers": {
          "CVE": [
            "CVE-2017-16137"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "534"
          ],
          "GHSA": [
            "GHSA-gxpj-cx7g-858c"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-DEBUG-10762"
          ]
        },
        "packageName": "debug",
        "proprietary": false,
        "creationTime": "2017-09-13T07:55:05.106000Z",
        "functions_new": [
          {
            "version": [
              ">= 2.5.0 <2.6.9",
              ">=3.0.0 <3.1.0"
            ],
            "functionId": {
              "filePath": "src/node.js",
              "functionName": "exports.formatters.o"
            }
          },
          {
            "version": [
              ">=1.0.0 <2.5.0"
            ],
            "functionId": {
              "filePath": "node.js",
              "functionName": "exports.formatters.o"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-DEBUG-10762"
        ],
        "disclosureTime": "2017-09-05T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-26T03:55:05Z",
        "modificationTime": "2022-01-03T16:21:42.477572Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.9"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "debug",
        "version": "2.2.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\debug\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:deep-extend:20180409",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
        "credit": [
          "Olivier Arteau (HoLyVieR)"
        ],
        "semver": {
          "vulnerable": [
            "<0.5.1"
          ]
        },
        "exploit": "Proof of Concept",
        "fixedIn": [
          "0.5.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              ">=0.4.0 <0.5.1"
            ],
            "functionId": {
              "filePath": "lib/deep-extend.js",
              "className": null,
              "functionName": "cloneSpecificValue"
            }
          },
          {
            "version": [
              ">=0.2.5 <0.4.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "deepExtend.module.exports"
            }
          },
          {
            "version": [
              ">=0.2.2 <0.2.5"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports.deepExtend"
            }
          },
          {
            "version": [
              "0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "deepExtend"
            }
          }
        ],
        "malicious": false,
        "moduleName": "deep-extend",
        "references": [
          {
            "url": "https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/unclechu/node-deep-extend/issues/39",
            "title": "GitHub Issue"
          },
          {
            "url": "https://github.com/unclechu/node-deep-extend/pull/40",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/311333",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T16:28:05.495785Z"
          },
          {
            "assigner": "Red Hat",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:L",
            "cvssV3BaseScore": 4.2,
            "modificationTime": "2022-09-01T17:35:20.205913Z"
          }
        ],
        "description": "## Overview\n[deep-extend](https://www.npmjs.com/package/deep-extend) is a library for Recursive object extending.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Utilities function in all the listed modules can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\r\n\r\n## PoC by HoLyVieR\r\n```js\r\nvar merge = require('deep-extend');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\nmerge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `deep-extend` to version 0.5.1 or higher.\n## References\n- [GitHub Commit](https://github.com/unclechu/node-deep-extend/commit/433ee51ed606f4e1867ece57b6ff5a47bebb492f)\n- [GitHub Issue](https://github.com/unclechu/node-deep-extend/issues/39)\n- [GitHub PR](https://github.com/unclechu/node-deep-extend/pull/40)\n- [HackerOne Report](https://hackerone.com/reports/311333)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-3750"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "612"
          ],
          "GHSA": [
            "GHSA-hr2v-3952-633q"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-DEEPEXTEND-12120"
          ]
        },
        "packageName": "deep-extend",
        "proprietary": false,
        "creationTime": "2018-04-15T20:11:17.552000Z",
        "functions_new": [
          {
            "version": [
              ">=0.4.0 <0.5.1"
            ],
            "functionId": {
              "filePath": "lib/deep-extend.js",
              "functionName": "cloneSpecificValue"
            }
          },
          {
            "version": [
              ">=0.2.5 <0.4.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "deepExtend.module.exports"
            }
          },
          {
            "version": [
              ">=0.2.2 <0.2.5"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.deepExtend"
            }
          },
          {
            "version": [
              "0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          },
          {
            "version": [
              "<0.2.1"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "deepExtend"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-DEEPEXTEND-12120"
        ],
        "disclosureTime": "2018-04-09T20:11:17Z",
        "packageManager": "npm",
        "publicationTime": "2018-04-25T07:45:48Z",
        "modificationTime": "2022-09-01T17:35:20.205913Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.1.6",
          "deep-extend@0.4.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "update-notifier@0.5.0",
          "latest-version@1.0.1",
          "package-json@1.2.0",
          "registry-url@3.1.0",
          "rc@1.2.7",
          "deep-extend@0.5.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "deep-extend",
        "version": "0.4.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\deep-extend\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:extend:20180424",
        "title": "Prototype Pollution",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "credit": [
          "Unknown"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.2",
            ">=3.0.0 <3.0.2"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.2",
          "3.0.2"
        ],
        "patches": [
          {
            "id": "patch:npm:extend:20180424:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/extend/20180424/extend_20180424_0_0_0e68e71d93507fcc391e398bc84abd0666b28190.patch"
            ],
            "version": ">=3.0.0 <3.0.2",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.727650Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "high",
        "cvssScore": 7.3,
        "functions": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "module.exports"
            }
          }
        ],
        "malicious": false,
        "moduleName": "extend",
        "references": [
          {
            "url": "https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/justmoon/node-extend/pull/48%23issuecomment-398261612",
            "title": "GitHub PR"
          },
          {
            "url": "https://hackerone.com/reports/381185",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "critical",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "cvssV3BaseScore": 9.8,
            "modificationTime": "2022-01-03T16:22:51.770343Z"
          }
        ],
        "description": "## Overview\n[extend](https://www.npmjs.com/package/extend) is a port of the classic extend() method from jQuery.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Utilities function can be tricked into modifying the prototype of \"Object\" when the attacker control part of the structure passed to these function. This can let an attacker add or modify existing property that will exist on all object.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `extend` to version 2.0.2, 3.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/justmoon/node-extend/commit/0e68e71d93507fcc391e398bc84abd0666b28190)\n- [GitHub PR](https://github.com/justmoon/node-extend/pull/48#issuecomment-398261612)\n- [HackerOne Report](https://hackerone.com/reports/381185)\n",
        "identifiers": {
          "CVE": [
            "CVE-2018-16492"
          ],
          "CWE": [
            "CWE-1321"
          ],
          "NSP": [
            "996"
          ],
          "GHSA": [
            "GHSA-qrmc-fj45-qfc2"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-EXTEND-12179"
          ]
        },
        "packageName": "extend",
        "proprietary": false,
        "creationTime": "2018-07-23T17:51:10.908000Z",
        "functions_new": [
          {
            "version": [
              "<2.0.2",
              ">=3.0.0 <3.0.2"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-EXTEND-12179"
        ],
        "disclosureTime": "2018-04-24T17:51:10Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-23T13:46:08Z",
        "modificationTime": "2022-01-03T16:22:51.770343Z",
        "socialTrendAlert": false,
        "severityWithCritical": "high",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "extend@3.0.0"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "extend@3.0.2"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "extend",
        "version": "3.0.0",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\extend\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:mime:20170907",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "semver": {
          "vulnerable": [
            "<1.4.1",
            ">=2.0.0 <2.0.3"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "1.4.1",
          "2.0.3"
        ],
        "patches": [
          {
            "id": "patch:npm:mime:20170907:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
            ],
            "version": "=1.2.11 || =1.3.4",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.877450Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "className": null,
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "className": null,
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "malicious": false,
        "moduleName": "mime",
        "references": [
          {
            "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/broofa/node-mime/issues/167",
            "title": "GitHub Issue"
          },
          {
            "url": "https://www.npmjs.com/advisories/535",
            "title": "NPM Security Advisory"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "high",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 7.5,
            "modificationTime": "2022-01-03T16:21:39.161781Z"
          }
        ],
        "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16138"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "535"
          ],
          "GHSA": [
            "GHSA-wrvr-8mpx-r7pp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MIME-10788"
          ]
        },
        "packageName": "mime",
        "proprietary": false,
        "creationTime": "2017-09-26T05:48:40.307000Z",
        "functions_new": [
          {
            "version": [
              ">=2.0.0 <2.0.3"
            ],
            "functionId": {
              "filePath": "Mime.js",
              "functionName": "Mime.prototype.getType"
            }
          },
          {
            "version": [
              ">=1.2.6 <1.4.1"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "Mime.prototype.lookup"
            }
          },
          {
            "version": [
              "<1.2.6"
            ],
            "functionId": {
              "filePath": "mime.js",
              "functionName": "mime.module.exports.lookup"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MIME-10788"
        ],
        "disclosureTime": "2017-09-07T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T05:48:40Z",
        "modificationTime": "2022-01-03T16:21:39.161781Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "mime@1.3.4"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0",
          "mime@1.4.1"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "mime",
        "version": "1.3.4",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\mime\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:ms:20170412",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Snyk Security Research Team"
        ],
        "semver": {
          "vulnerable": [
            "<2.0.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "2.0.0"
        ],
        "patches": [
          {
            "id": "patch:npm:ms:20170412:0",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
            ],
            "version": "=1.0.0",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.863964Z"
          },
          {
            "id": "patch:npm:ms:20170412:1",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
            ],
            "version": "=0.7.2 || =0.7.3",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.865081Z"
          },
          {
            "id": "patch:npm:ms:20170412:2",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
            ],
            "version": "=0.7.1",
            "comments": [],
            "modificationTime": "2019-12-03T11:40:45.866206Z"
          }
        ],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "className": null,
              "functionName": "parse"
            }
          }
        ],
        "malicious": false,
        "moduleName": "ms",
        "references": [
          {
            "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/zeit/ms/pull/89",
            "title": "GitHub PR"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-400"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-MS-10509"
          ]
        },
        "packageName": "ms",
        "proprietary": true,
        "creationTime": "2017-04-12T10:02:45.497000Z",
        "functions_new": [
          {
            "version": [
              ">=0.7.3 <2.0.0"
            ],
            "functionId": {
              "filePath": "index.js",
              "functionName": "parse"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-MS-10509"
        ],
        "disclosureTime": "2017-04-11T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-05-15T06:02:45Z",
        "modificationTime": "2022-05-16T13:04:13.342145Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3",
          "debug@2.2.0",
          "ms@0.7.1"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.4",
          "code-push@2.0.4",
          "superagent@1.8.3",
          "debug@2.6.7",
          "ms@2.0.0"
        ],
        "isUpgradable": true,
        "isPatchable": true,
        "name": "ms",
        "version": "0.7.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\ms\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20170807",
        "title": "Denial of Service (DoS)",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "credit": [
          "Dennis Appelt"
        ],
        "semver": {
          "vulnerable": [
            "<3.7.0"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.7.0"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 3.7,
        "functions": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "className": null,
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/issues/1259",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [
          {
            "assigner": "NVD",
            "severity": "medium",
            "cvssV3Vector": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "cvssV3BaseScore": 5.9,
            "modificationTime": "2022-01-03T16:21:30.558181Z"
          }
        ],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). It uncompresses responses in memory, and a malicious user may send a specially crafted zip file which will then unzip in the server and cause excessive CPU consumption. This is also known as a `Zip Bomb`.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `superagent` to version 3.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1259)\n",
        "identifiers": {
          "CVE": [
            "CVE-2017-16129"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            "479"
          ],
          "GHSA": [
            "GHSA-8225-6cvr-8pqp"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-10789"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2017-09-27T11:38:25.465000Z",
        "functions_new": [
          {
            "version": [
              ">=3.4.0 <3.7.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype._end"
            }
          },
          {
            "version": [
              "<3.4.0"
            ],
            "functionId": {
              "filePath": "lib/node/index.js",
              "functionName": "Request.prototype.end"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-10789"
        ],
        "disclosureTime": "2017-08-06T21:00:00Z",
        "packageManager": "npm",
        "publicationTime": "2017-09-27T11:38:25Z",
        "modificationTime": "2022-01-03T16:21:30.558181Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.0"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:superagent:20181108",
        "title": "Information Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "pszabop"
        ],
        "semver": {
          "vulnerable": [
            "<3.8.1"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [
          "3.8.1"
        ],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "medium",
        "cvssScore": 5.3,
        "functions": [],
        "malicious": false,
        "moduleName": "superagent",
        "references": [
          {
            "url": "https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4",
            "title": "GitHub Commit"
          },
          {
            "url": "https://github.com/visionmedia/superagent/issues/1309",
            "title": "GitHub Issue"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[superagent](https://www.npmjs.com/package/superagent) is a Small progressive client-side HTTP request library, and Node.js module with the same API, supporting many high-level HTTP client features.\n\nAffected versions of this package are vulnerable to Information Exposure due to sending the contents of Authorization to third parties.\n## Remediation\nUpgrade `superagent` to version 3.8.1 or higher.\n## References\n- [GitHub Commit](https://github.com/visionmedia/superagent/commit/087edaf15cac51f69ae6346c431f40627aff0ff4)\n- [GitHub Issue](https://github.com/visionmedia/superagent/issues/1309)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-200"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-SUPERAGENT-12185"
          ]
        },
        "packageName": "superagent",
        "proprietary": false,
        "creationTime": "2018-11-08T19:42:02Z",
        "functions_new": [],
        "alternativeIds": [
          "SNYK-JS-SUPERAGENT-12185"
        ],
        "disclosureTime": "2018-11-08T19:42:02Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-31T13:43:37Z",
        "modificationTime": "2020-12-14T14:41:30.731652Z",
        "socialTrendAlert": false,
        "severityWithCritical": "medium",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "code-push@1.8.0-beta",
          "superagent@1.8.3"
        ],
        "upgradePath": [
          false,
          "code-push-cli@2.1.5",
          "code-push@2.0.5",
          "superagent@3.8.1"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "name": "superagent",
        "version": "1.8.3",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\superagent\\package.json",
        "parentDepType": "prod"
      },
      {
        "id": "npm:utile:20180614",
        "title": "Uninitialized Memory Exposure",
        "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N",
        "credit": [
          "ChALkeR"
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "exploit": "Not Defined",
        "fixedIn": [],
        "patches": [],
        "insights": {
          "triageAdvice": null
        },
        "language": "js",
        "severity": "low",
        "cvssScore": 2.2,
        "functions": [
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "className": null,
              "functionName": "base64.encode"
            }
          },
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "className": null,
              "functionName": "base64.decode"
            }
          }
        ],
        "malicious": false,
        "moduleName": "utile",
        "references": [
          {
            "url": "https://hackerone.com/reports/321701",
            "title": "HackerOne Report"
          }
        ],
        "cvssDetails": [],
        "description": "## Overview\n[utile](https://www.npmjs.com/package/utile) is a drop-in replacement for util with some additional advantageous functions.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. A malicious user could extract sensitive data from uninitialized memory or to cause a DoS by passing in a large number, in setups where typed user input can be passed.\n\n**Note** Uninitialized Memory Exposure impacts only Node.js 6.x or lower, Denial of Service impacts any Node.js version.\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nThere is no fix version for `utile`.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/321701)\n",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-399"
          ],
          "ALTERNATIVE": [
            "SNYK-JS-UTILE-12182"
          ]
        },
        "packageName": "utile",
        "proprietary": false,
        "creationTime": "2018-07-23T19:21:17.566000Z",
        "functions_new": [
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "functionName": "base64.encode"
            }
          },
          {
            "version": [
              ">0.0.6 <=0.3.0"
            ],
            "functionId": {
              "filePath": "lib/base64.js",
              "functionName": "base64.decode"
            }
          }
        ],
        "alternativeIds": [
          "SNYK-JS-UTILE-12182"
        ],
        "disclosureTime": "2018-06-14T19:21:17.566000Z",
        "packageManager": "npm",
        "publicationTime": "2018-07-24T15:14:13.765000Z",
        "modificationTime": "2020-12-14T14:41:28.499395Z",
        "socialTrendAlert": false,
        "severityWithCritical": "low",
        "from": [
          "vsts-task-code-push-release-cordova@1.0.5",
          "code-push-cli@1.10.0-beta",
          "prompt@0.2.14",
          "utile@0.2.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "name": "utile",
        "version": "0.2.1",
        "__filename": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1\\Tasks\\codepush-release-cordova\\node_modules\\utile\\package.json",
        "parentDepType": "prod"
      }
    ],
    "ok": false,
    "dependencyCount": 152,
    "org": "global-devops-bootcamp",
    "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.25.0\nignore: {}\npatch: {}\n",
    "isPrivate": true,
    "licensesPolicy": {
      "severities": {},
      "orgLicenseRules": {
        "AGPL-1.0": {
          "licenseType": "AGPL-1.0",
          "severity": "high",
          "instructions": ""
        },
        "AGPL-3.0": {
          "licenseType": "AGPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "Artistic-1.0": {
          "licenseType": "Artistic-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "Artistic-2.0": {
          "licenseType": "Artistic-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "CDDL-1.0": {
          "licenseType": "CDDL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "CPOL-1.02": {
          "licenseType": "CPOL-1.02",
          "severity": "high",
          "instructions": ""
        },
        "EPL-1.0": {
          "licenseType": "EPL-1.0",
          "severity": "medium",
          "instructions": ""
        },
        "GPL-2.0": {
          "licenseType": "GPL-2.0",
          "severity": "high",
          "instructions": ""
        },
        "GPL-3.0": {
          "licenseType": "GPL-3.0",
          "severity": "high",
          "instructions": ""
        },
        "LGPL-2.0": {
          "licenseType": "LGPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1": {
          "licenseType": "LGPL-2.1",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-2.1+": {
          "licenseType": "LGPL-2.1+",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0": {
          "licenseType": "LGPL-3.0",
          "severity": "medium",
          "instructions": ""
        },
        "LGPL-3.0+": {
          "licenseType": "LGPL-3.0+",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-1.1": {
          "licenseType": "MPL-1.1",
          "severity": "medium",
          "instructions": ""
        },
        "MPL-2.0": {
          "licenseType": "MPL-2.0",
          "severity": "medium",
          "instructions": ""
        },
        "MS-RL": {
          "licenseType": "MS-RL",
          "severity": "medium",
          "instructions": ""
        },
        "SimPL-2.0": {
          "licenseType": "SimPL-2.0",
          "severity": "high",
          "instructions": ""
        }
      }
    },
    "packageManager": "npm",
    "ignoreSettings": {
      "adminOnly": false,
      "reasonRequired": false,
      "disregardFilesystemIgnores": false
    },
    "summary": "55 vulnerable dependency paths",
    "remediation": {
      "unresolved": [
        {
          "id": "SNYK-JS-GOT-2932019",
          "title": "Open Redirect",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
          "credit": [
            "Unknown"
          ],
          "semver": {
            "vulnerable": [
              "<11.8.5",
              ">=12.0.0 <12.1.0"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [
            "11.8.5",
            "12.1.0"
          ],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 5.4,
          "functions": [],
          "malicious": false,
          "moduleName": "got",
          "references": [
            {
              "url": "https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0",
              "title": "GitHub Diff"
            },
            {
              "url": "https://github.com/sindresorhus/got/pull/2047",
              "title": "GitHub PR"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-06-29T01:11:26.531842Z"
            },
            {
              "assigner": "Red Hat",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-11-19T20:57:05.871669Z"
            }
          ],
          "description": "## Overview\n\nAffected versions of this package are vulnerable to Open Redirect due to missing verification of requested URLs. It allowed a victim to be redirected to a UNIX socket.\n## Remediation\nUpgrade `got` to version 11.8.5, 12.1.0 or higher.\n## References\n- [GitHub Diff](https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0)\n- [GitHub PR](https://github.com/sindresorhus/got/pull/2047)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-33987"
            ],
            "CWE": [
              "CWE-601"
            ]
          },
          "packageName": "got",
          "proprietary": false,
          "creationTime": "2022-06-19T09:23:24.210132Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-06-19T08:33:16Z",
          "packageManager": "npm",
          "publicationTime": "2022-06-19T15:33:44.269688Z",
          "modificationTime": "2022-11-19T20:57:05.871669Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release-cordova@1.0.5",
            "code-push-cli@1.10.0-beta",
            "update-notifier@0.5.0",
            "latest-version@1.0.1",
            "package-json@1.2.0",
            "got@3.3.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "got",
          "version": "3.3.1",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-XMLDOM-1534562",
          "title": "Improper Input Validation",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
          "credit": [
            "Unknown"
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "medium",
          "cvssScore": 6.5,
          "functions": [],
          "malicious": false,
          "moduleName": "xmldom",
          "references": [
            {
              "url": "https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/xmldom/xmldom/issues/271",
              "title": "GitHub Issue"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "medium",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
              "cvssV3BaseScore": 5.3,
              "modificationTime": "2022-04-26T01:10:30.392784Z"
            }
          ],
          "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation. It does not correctly escape special characters when serializing elements are removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.\r\n\r\n**Note:**\r\nCustomers who use \"xmldom\" package, should use \"@xmldom/xmldom\" instead, as \"xmldom\" is no longer maintained.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/271)\n",
          "identifiers": {
            "CVE": [
              "CVE-2021-32796"
            ],
            "CWE": [
              "CWE-116"
            ],
            "GHSA": [
              "GHSA-5fg8-2547-mr8q"
            ]
          },
          "packageName": "xmldom",
          "proprietary": false,
          "creationTime": "2021-07-28T06:33:12.846430Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2021-07-28T06:31:31Z",
          "packageManager": "npm",
          "publicationTime": "2021-07-28T15:12:14Z",
          "modificationTime": "2022-05-11T12:48:26.463897Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release-cordova@1.0.5",
            "code-push-cli@1.10.0-beta",
            "plist@1.2.0",
            "xmldom@0.1.22"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "xmldom",
          "version": "0.1.22",
          "severityWithCritical": "medium"
        },
        {
          "id": "SNYK-JS-XMLDOM-3042242",
          "title": "Prototype Pollution",
          "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:L",
          "credit": [
            "@Supraja9726"
          ],
          "semver": {
            "vulnerable": [
              ">=0.0.0"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "high",
          "cvssScore": 8.5,
          "functions": [],
          "malicious": false,
          "moduleName": "xmldom",
          "references": [
            {
              "url": "https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/xmldom/xmldom/issues/436",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.3",
              "title": "GitHub Release"
            },
            {
              "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L1",
              "title": "Vulnerable Code"
            },
            {
              "url": "https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js%23L3",
              "title": "Vulnerable Code"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-11-09T01:11:13.683103Z"
            }
          ],
          "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Prototype Pollution through the `copy()` function in `dom.js`. Exploiting this vulnerability is possible via the `p` variable.\r\n\r\n*DISPUTED*\r\nThis vulnerability has been [disputed by the maintainers of the package](https://github.com/xmldom/xmldom/issues/436#issuecomment-1321093759). \r\nCurrently the only viable exploit that has been demonstrated is to pollute the target object (rather then the global object which is generally the case for Prototype Pollution vulnerabilities) and it is yet unclear if this limited attack vector exposes any vulnerability in the context of this package. \r\n\r\nSee the linked [GitHub Issue](https://github.com/xmldom/xmldom/issues/436) for full details on the discussion around the legitimacy and potential revocation of this vulnerability.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n\n-   Web browser\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/b5c1be1a42810f7c7c3becdbaa1a93f69372645d)\n- [GitHub Issue](https://github.com/xmldom/xmldom/issues/436)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.3)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L1)\n- [Vulnerable Code](https://github.com/xmldom/xmldom/blob/bc36efddf9948aba15618f85dc1addfc2ac9d7b2/lib/dom.js#L3)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-37616"
            ],
            "CWE": [
              "CWE-1321"
            ],
            "GHSA": [
              "GHSA-9pgh-qqpf-7wqj"
            ]
          },
          "packageName": "xmldom",
          "proprietary": false,
          "creationTime": "2022-10-11T06:43:58.053658Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-10-11T06:34:47Z",
          "packageManager": "npm",
          "publicationTime": "2022-10-11T11:36:43Z",
          "modificationTime": "2022-12-26T16:04:03.177916Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release-cordova@1.0.5",
            "code-push-cli@1.10.0-beta",
            "plist@1.2.0",
            "xmldom@0.1.22"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "xmldom",
          "version": "0.1.22",
          "severityWithCritical": "high"
        },
        {
          "id": "SNYK-JS-XMLDOM-3092935",
          "title": "Improper Input Validation",
          "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P",
          "credit": [
            "frumioj",
            "karfau"
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "exploit": "Proof of Concept",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "critical",
          "cvssScore": 9.8,
          "functions": [],
          "malicious": false,
          "moduleName": "xmldom",
          "references": [
            {
              "url": "https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931",
              "title": "GitHub Commit"
            },
            {
              "url": "https://github.com/jindw/xmldom/issues/150",
              "title": "GitHub Issue"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.7.7",
              "title": "GitHub Release"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.8.4",
              "title": "GitHub Release"
            },
            {
              "url": "https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4",
              "title": "GitHub Release"
            }
          ],
          "cvssDetails": [
            {
              "assigner": "NVD",
              "severity": "critical",
              "cvssV3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "cvssV3BaseScore": 9.8,
              "modificationTime": "2022-11-05T01:10:37.555445Z"
            }
          ],
          "description": "## Overview\n[xmldom](https://www.npmjs.org/package/xmldom) is an A pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module.\n\nAffected versions of this package are vulnerable to Improper Input Validation due to parsing XML that is not well-formed, and contains multiple top-level elements. All the root nodes are being added to the `childNodes` collection of the `Document`, without reporting or throwing any error.\r\n\r\n## Workarounds\r\nOne of the following approaches might help, depending on your use case:\r\n\r\n1) Instead of searching for elements in the whole DOM, only search in the `documentElement`.\r\n\r\n2) Reject a document with a document that has more than 1 `childNode`.\n## Remediation\nThere is no fixed version for `xmldom`.\n## References\n- [GitHub Commit](https://github.com/xmldom/xmldom/commit/c02f786216bed70825f9a351c65e61500f51e931)\n- [GitHub Issue](https://github.com/jindw/xmldom/issues/150)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.7.7)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.8.4)\n- [GitHub Release](https://github.com/xmldom/xmldom/releases/tag/0.9.0-beta.4)\n",
          "identifiers": {
            "CVE": [
              "CVE-2022-39353"
            ],
            "CWE": [
              "CWE-20"
            ],
            "GHSA": [
              "GHSA-crh6-fp67-6883"
            ]
          },
          "packageName": "xmldom",
          "proprietary": false,
          "creationTime": "2022-11-02T08:56:15.224765Z",
          "functions_new": [],
          "alternativeIds": [],
          "disclosureTime": "2022-11-01T17:29:11Z",
          "packageManager": "npm",
          "publicationTime": "2022-11-02T12:25:35.940676Z",
          "modificationTime": "2022-11-06T22:13:44.989571Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release-cordova@1.0.5",
            "code-push-cli@1.10.0-beta",
            "plist@1.2.0",
            "xmldom@0.1.22"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "xmldom",
          "version": "0.1.22",
          "severityWithCritical": "critical"
        },
        {
          "id": "npm:utile:20180614",
          "title": "Uninitialized Memory Exposure",
          "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N",
          "credit": [
            "ChALkeR"
          ],
          "semver": {
            "vulnerable": [
              "*"
            ]
          },
          "exploit": "Not Defined",
          "fixedIn": [],
          "patches": [],
          "insights": {
            "triageAdvice": null
          },
          "language": "js",
          "severity": "low",
          "cvssScore": 2.2,
          "functions": [
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "className": null,
                "functionName": "base64.encode"
              }
            },
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "className": null,
                "functionName": "base64.decode"
              }
            }
          ],
          "malicious": false,
          "moduleName": "utile",
          "references": [
            {
              "url": "https://hackerone.com/reports/321701",
              "title": "HackerOne Report"
            }
          ],
          "cvssDetails": [],
          "description": "## Overview\n[utile](https://www.npmjs.com/package/utile) is a drop-in replacement for util with some additional advantageous functions.\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure. A malicious user could extract sensitive data from uninitialized memory or to cause a DoS by passing in a large number, in setups where typed user input can be passed.\n\n**Note** Uninitialized Memory Exposure impacts only Node.js 6.x or lower, Denial of Service impacts any Node.js version.\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n\n## Remediation\nThere is no fix version for `utile`.\n\n## References\n- [HackerOne Report](https://hackerone.com/reports/321701)\n",
          "identifiers": {
            "CVE": [],
            "CWE": [
              "CWE-399"
            ],
            "ALTERNATIVE": [
              "SNYK-JS-UTILE-12182"
            ]
          },
          "packageName": "utile",
          "proprietary": false,
          "creationTime": "2018-07-23T19:21:17.566000Z",
          "functions_new": [
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "functionName": "base64.encode"
              }
            },
            {
              "version": [
                ">0.0.6 <=0.3.0"
              ],
              "functionId": {
                "filePath": "lib/base64.js",
                "functionName": "base64.decode"
              }
            }
          ],
          "alternativeIds": [
            "SNYK-JS-UTILE-12182"
          ],
          "disclosureTime": "2018-06-14T19:21:17.566000Z",
          "packageManager": "npm",
          "publicationTime": "2018-07-24T15:14:13.765000Z",
          "modificationTime": "2020-12-14T14:41:28.499395Z",
          "socialTrendAlert": false,
          "from": [
            "vsts-task-code-push-release-cordova@1.0.5",
            "code-push-cli@1.10.0-beta",
            "prompt@0.2.14",
            "utile@0.2.1"
          ],
          "upgradePath": [],
          "isUpgradable": false,
          "isPatchable": false,
          "isPinnable": false,
          "isRuntime": false,
          "name": "utile",
          "version": "0.2.1",
          "severityWithCritical": "low"
        }
      ],
      "upgrade": {
        "code-push-cli@1.10.0-beta": {
          "upgradeTo": "code-push-cli@3.0.0",
          "upgrades": [
            "plist@1.2.0",
            "plist@1.2.0",
            "xmldom@0.1.22",
            "qs@2.3.3",
            "qs@2.3.3",
            "extend@3.0.0",
            "mime@1.3.4",
            "superagent@1.8.3",
            "superagent@1.8.3",
            "i@0.3.5",
            "ini@1.3.4",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "lodash@4.13.1",
            "minimatch@3.0.2",
            "minimist@0.0.8",
            "minimist@0.0.8",
            "moment@2.14.1",
            "moment@2.14.1",
            "moment@2.14.1",
            "y18n@3.2.1",
            "brace-expansion@1.1.5",
            "debug@2.2.0",
            "deep-extend@0.4.1",
            "ms@0.7.1"
          ],
          "vulns": [
            "SNYK-JS-PLIST-2405644",
            "npm:plist:20180219",
            "SNYK-JS-XMLDOM-1084960",
            "SNYK-JS-QS-3153490",
            "npm:qs:20170213",
            "npm:extend:20180424",
            "npm:mime:20170907",
            "npm:superagent:20170807",
            "npm:superagent:20181108",
            "SNYK-JS-I-1726768",
            "SNYK-JS-INI-1048974",
            "SNYK-JS-LODASH-1018905",
            "SNYK-JS-LODASH-1040724",
            "SNYK-JS-LODASH-450202",
            "SNYK-JS-LODASH-567746",
            "SNYK-JS-LODASH-608086",
            "SNYK-JS-LODASH-73638",
            "SNYK-JS-LODASH-73639",
            "npm:lodash:20180130",
            "SNYK-JS-MINIMATCH-3050818",
            "SNYK-JS-MINIMIST-2429795",
            "SNYK-JS-MINIMIST-559764",
            "SNYK-JS-MOMENT-2440688",
            "npm:moment:20161019",
            "npm:moment:20170905",
            "SNYK-JS-Y18N-1021887",
            "npm:brace-expansion:20170302",
            "npm:debug:20170905",
            "npm:deep-extend:20180409",
            "npm:ms:20170412"
          ]
        },
        "shelljs@0.6.0": {
          "upgradeTo": "shelljs@0.8.5",
          "upgrades": [
            "shelljs@0.6.0"
          ],
          "vulns": [
            "SNYK-JS-SHELLJS-2332187"
          ]
        }
      },
      "patch": {
        "npm:lodash:20180130": {
          "paths": [
            {
              "code-push-cli > plist > xmlbuilder > lodash": {
                "patched": "2023-01-04T17:54:35.662Z"
              }
            }
          ]
        }
      },
      "ignore": {},
      "pin": {}
    },
    "filesystemPolicy": false,
    "filtered": {
      "ignore": [],
      "patch": []
    },
    "uniqueCount": 36,
    "projectName": "vsts-task-code-push-release-cordova",
    "foundProjectCount": 3,
    "displayTargetFile": "Tasks\\codepush-release-cordova\\package.json",
    "hasUnknownVersions": false,
    "path": "C:\\Users\\JesseHouwing\\source\\extension-securiry\\vsixs\\ms-vsclient\\code-push\\1.3.1"
  }
]
